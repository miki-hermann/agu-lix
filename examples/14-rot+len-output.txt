+++ SPECIFICATION --- bidirectional branch, version 0.99
+++ Parameters:
    ===========
+++ input       = 14-rot+len-input.txt
+++ output      = 14-rot+len-output.txt
+++ trace       = 3
+++ direction   = first-to-last
+++ drop        = yes
+++ verbose     = 3
+++ split       = 4
+++ loop limit  = 10
-----------------------------------------------------------------------

+++ specification RotLen from 14-rot+len-input.txt successfully parsed
+++ sorts: nat list
+++ finitary sorts: <empty>
+++ symbol precedence = {rot > len > app > + > cons > nil > s > 0}
+++ Rewrite System 
	x + 0 -> x
	len(nil) -> 0
	rot(0, y) -> y
	app(nil, y) -> y
	x + s(y) -> s(x + y)
	len(cons(x, y)) -> s(len(y))
	app(cons(x, y), z) -> cons(x, app(y, z))
	rot(s(x), cons(y, z)) -> rot(x, app(z, cons(y, nil)))
+++ inductive positions:
... for +: 1
... for app: 0
... for len: 0
... for rot: 0 1
+++ maximal depths of left-hand sides:
... for app: 2
... for rot: 2
... for len: 2
... for +: 2
+++ general maximal depth = 2
+++ sort dependence: nat < list
+++ test sets for defined functions and sorts:
... for +
... ... nat
		0
		s(x)
... for len
... ... list
		nil
		cons(x, y)
... for app
... ... list
		nil
		cons(x, y)
... for rot
... ... nat
		0
		s(x)
... ... list
		nil
		cons(x, y)

+++ conjecture(s)
	len(rot(len(x), x)) = len(x)

+++ inference system initiated
+++ treating clause
	len(rot(len(x), x)) = len(x)
+++ inductive narrowing on conjecture
	len(rot(len(x), x)) = len(x)
... induction variables of
	len(rot(len(x), x)) = len(x)
... are:
	x:list
+++ perform INDUCTIVE NARROWING on conjecture 
	len(rot(len(x), x)) = len(x)
... with variable x
+++ creating new conjecture
	len(rot(len(nil), nil)) = len(nil)
+++ creating new conjecture
	len(rot(len(cons(xts, yts)), cons(xts, yts))) = len(cons(xts, yts))
--- clause
	len(rot(len(nil), nil)) = len(nil)
... reduced to tautology
	0 = 0
--- clause
	len(rot(len(cons(xts, yts)), cons(xts, yts))) = len(cons(xts, yts))
... reduced in 3 steps to
	len(rot(len(yts), app(yts, cons(xts, nil)))) = s(len(yts))
+++ inductive narrowing succeeded
--- clause
	len(rot(len(x), x)) = len(x)
... oriented to rule
	len(rot(len(x), x)) -> len(x)
+++ added new clause(s)
	len(rot(len(yts), app(yts, cons(xts, nil)))) = s(len(yts))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	len(rot(len(yts), app(yts, cons(xts, nil)))) = s(len(yts))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(rot(len(x), x)) -> len(x)
--- Primal Grammar:
	<empty>

+++ treating clause
	len(rot(len(yts), app(yts, cons(xts, nil)))) = s(len(yts))
+++ inductive narrowing on conjecture
	len(rot(len(yts), app(yts, cons(xts, nil)))) = s(len(yts))
... induction variables of
	len(rot(len(yts), app(yts, cons(xts, nil)))) = s(len(yts))
... are:
	yts:list
+++ perform INDUCTIVE NARROWING on conjecture 
	len(rot(len(yts), app(yts, cons(xts, nil)))) = s(len(yts))
... with variable yts
+++ creating new conjecture
	len(rot(len(nil), app(nil, cons(xts, nil)))) = s(len(nil))
+++ creating new conjecture
	len(rot(len(cons(xts2, yts)), app(cons(xts2, yts), cons(xts1, nil)))) = s(len(cons(xts2, yts)))
--- clause
	len(rot(len(nil), app(nil, cons(xts, nil)))) = s(len(nil))
... reduced to tautology
	s(0) = s(0)
--- clause
	len(rot(len(cons(xts2, yts)), app(cons(xts2, yts), cons(xts1, nil)))) = s(len(cons(xts2, yts)))
... reduced in 4 steps to
	len(rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil)))) = s(s(len(yts)))
+++ inductive narrowing succeeded
--- clause
	len(rot(len(yts), app(yts, cons(xts, nil)))) = s(len(yts))
... oriented to rule
	len(rot(len(yts), app(yts, cons(xts, nil)))) -> s(len(yts))
+++ added new clause(s)
	len(rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil)))) = s(s(len(yts)))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	len(rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil)))) = s(s(len(yts)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(rot(len(x), x)) -> len(x)
	len(rot(len(yts), app(yts, cons(xts, nil)))) -> s(len(yts))
--- Primal Grammar:
	<empty>

+++ treating clause
	len(rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil)))) = s(s(len(yts)))
+++ inductive narrowing on conjecture
	len(rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil)))) = s(s(len(yts)))
... induction variables of
	len(rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil)))) = s(s(len(yts)))
... are:
	yts:list
+++ perform INDUCTIVE NARROWING on conjecture 
	len(rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil)))) = s(s(len(yts)))
... with variable yts
+++ creating new conjecture
	len(rot(len(nil), app(app(nil, cons(xts2, nil)), cons(xts1, nil)))) = s(s(len(nil)))
+++ creating new conjecture
	len(rot(len(cons(xts3, yts)), app(app(cons(xts3, yts), cons(xts2, nil)), cons(xts1, nil)))) = s(s(len(cons(xts3, yts))))
--- clause
	len(rot(len(nil), app(app(nil, cons(xts2, nil)), cons(xts1, nil)))) = s(s(len(nil)))
... reduced to tautology
	s(s(0)) = s(s(0))
--- clause
	len(rot(len(cons(xts3, yts)), app(app(cons(xts3, yts), cons(xts2, nil)), cons(xts1, nil)))) = s(s(len(cons(xts3, yts))))
... reduced in 5 steps to
	len(rot(len(yts), app(app(app(yts, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)))) = s(s(s(len(yts))))
+++ inductive narrowing succeeded
--- clause
	len(rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil)))) = s(s(len(yts)))
... oriented to rule
	len(rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil)))) -> s(s(len(yts)))
+++ added new clause(s)
	len(rot(len(yts), app(app(app(yts, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)))) = s(s(s(len(yts))))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	len(rot(len(yts), app(app(app(yts, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)))) = s(s(s(len(yts))))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(rot(len(x), x)) -> len(x)
	len(rot(len(yts), app(yts, cons(xts, nil)))) -> s(len(yts))
	len(rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil)))) -> s(s(len(yts)))
--- Primal Grammar:
	<empty>

+++ treating clause
	len(rot(len(yts), app(app(app(yts, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)))) = s(s(s(len(yts))))
+++ inductive narrowing on conjecture
	len(rot(len(yts), app(app(app(yts, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)))) = s(s(s(len(yts))))
... induction variables of
	len(rot(len(yts), app(app(app(yts, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)))) = s(s(s(len(yts))))
... are:
	yts:list
+++ perform INDUCTIVE NARROWING on conjecture 
	len(rot(len(yts), app(app(app(yts, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)))) = s(s(s(len(yts))))
... with variable yts
+++ creating new conjecture
	len(rot(len(nil), app(app(app(nil, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)))) = s(s(s(len(nil))))
+++ creating new conjecture
	len(rot(len(cons(xts4, yts)), app(app(app(cons(xts4, yts), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)))) = s(s(s(len(cons(xts4, yts)))))
--- clause
	len(rot(len(nil), app(app(app(nil, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)))) = s(s(s(len(nil))))
... reduced to tautology
	s(s(s(0))) = s(s(s(0)))
--- clause
	len(rot(len(cons(xts4, yts)), app(app(app(cons(xts4, yts), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)))) = s(s(s(len(cons(xts4, yts)))))
... reduced in 6 steps to
	len(rot(len(yts), app(app(app(app(yts, cons(xts4, nil)), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)))) = s(s(s(s(len(yts)))))
+++ inductive narrowing succeeded
--- clause
	len(rot(len(yts), app(app(app(yts, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)))) = s(s(s(len(yts))))
... oriented to rule
	len(rot(len(yts), app(app(app(yts, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)))) -> s(s(s(len(yts))))
+++ added new clause(s)
	len(rot(len(yts), app(app(app(app(yts, cons(xts4, nil)), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)))) = s(s(s(s(len(yts)))))
... to conjectures
+++ active wrap
	len(rot(len(yts), app(., cons(xts, nil)))) = s(.)
... with sequence
	len(rot(len(yts), app(yts, cons(xts, nil)))) = s(len(yts))
	len(rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil)))) = s(s(len(yts)))
	len(rot(len(yts), app(app(app(yts, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)))) = s(s(s(len(yts))))
+++ primal grammar found for head
	{app, cons, len, nil, rot, s}
... and wrap
	len(rot(len(yts), app(., cons(xts, nil)))) = s(.)
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> app(^f0($n0; yts, xts@), cons(xts$n0, nil))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(rot(len(yts), app(^f0($n; yts, xts@), cons(xts$n, nil)))) = s(^f1($n; yts))
--- clause
	len(rot(len(yts), app(app(app(app(yts, cons(xts4, nil)), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)))) = s(s(s(s(len(yts)))))
... subsumed by lemma
	len(rot(len(yts), app(^f0($n; yts, xts@), cons(xts$n, nil)))) = s(^f1($n; yts))
... with substitution
	$n <- 3

+++ Status of the Inference System
--- Conjectures:
	<empty>
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(rot(len(x), x)) -> len(x)
	len(rot(len(yts), app(yts, cons(xts, nil)))) -> s(len(yts))
	len(rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil)))) -> s(s(len(yts)))
	len(rot(len(yts), app(app(app(yts, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)))) -> s(s(s(len(yts))))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> app(^f0($n0; yts, xts@), cons(xts$n0, nil))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(rot(len(yts), app(^f0($n; yts, xts@), cons(xts$n, nil)))) = s(^f1($n; yts))

+++ SUCCESS: all conjectures proved
+++ Statistics:
... Number of proof steps          = 4
... Number of induction steps      = 4
... Number of equational steps     = 0
... Number of case rewriting steps = 0
... Number of PG defined symbols   = 2
... Number of PG lemmas            = 1
... Elapsed time (seconds)         = 0.006
