+++ SPECIFICATION --- bidirectional branch, version 0.99
+++ Parameters:
    ===========
+++ input       = 26-qrev+rev-input.txt
+++ output      = 26-qrev+rev-output.txt
+++ trace       = 3
+++ direction   = first-to-last
+++ drop        = yes
+++ verbose     = 3
+++ split       = 4
+++ loop limit  = 10
-----------------------------------------------------------------------

+++ specification RevQrev from 26-qrev+rev-input.txt successfully parsed
+++ sorts: nat list
+++ finitary sorts: <empty>
+++ symbol precedence = {qrev > rev > app > cons > nil}
+++ Rewrite System 
	rev(nil) -> nil
	app(nil, y) -> y
	qrev(nil, x) -> x
	app(cons(x, y), z) -> cons(x, app(y, z))
	qrev(cons(x, y), z) -> qrev(y, cons(x, z))
	rev(cons(x, y)) -> app(rev(y), cons(x, nil))
+++ inductive positions:
... for app: 0
... for qrev: 0
... for rev: 0
+++ maximal depths of left-hand sides:
... for qrev: 2
... for app: 2
... for rev: 2
+++ general maximal depth = 2
+++ sort dependence: nat < list
+++ test sets for defined functions and sorts:
... for app
... ... list
		nil
		cons(x, y)
... for qrev
... ... list
		nil
		cons(x, y)
... for rev
... ... list
		nil
		cons(x, y)

+++ conjecture(s)
	qrev(rev(x), nil) = x

+++ inference system initiated
+++ treating clause
	qrev(rev(x), nil) = x
+++ inductive narrowing on conjecture
	qrev(rev(x), nil) = x
... induction variables of
	qrev(rev(x), nil) = x
... are:
	x:list
+++ perform INDUCTIVE NARROWING on conjecture 
	qrev(rev(x), nil) = x
... with variable x
+++ creating new conjecture
	qrev(rev(nil), nil) = nil
+++ creating new conjecture
	qrev(rev(cons(xts, yts)), nil) = cons(xts, yts)
--- clause
	qrev(rev(nil), nil) = nil
... reduced to tautology
	nil = nil
--- clause
	qrev(rev(cons(xts, yts)), nil) = cons(xts, yts)
... reduced in 1 step to
	qrev(app(rev(yts), cons(xts, nil)), nil) = cons(xts, yts)
+++ inductive narrowing succeeded
--- clause
	qrev(rev(x), nil) = x
... oriented to rule
	qrev(rev(x), nil) -> x
+++ added new clause(s)
	qrev(app(rev(yts), cons(xts, nil)), nil) = cons(xts, yts)
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	qrev(app(rev(yts), cons(xts, nil)), nil) = cons(xts, yts)
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	qrev(rev(x), nil) -> x
--- Primal Grammar:
	<empty>

+++ treating clause
	qrev(app(rev(yts), cons(xts, nil)), nil) = cons(xts, yts)
+++ inductive narrowing on conjecture
	qrev(app(rev(yts), cons(xts, nil)), nil) = cons(xts, yts)
... induction variables of
	qrev(app(rev(yts), cons(xts, nil)), nil) = cons(xts, yts)
... are:
	yts:list
+++ perform INDUCTIVE NARROWING on conjecture 
	qrev(app(rev(yts), cons(xts, nil)), nil) = cons(xts, yts)
... with variable yts
+++ creating new conjecture
	qrev(app(rev(nil), cons(xts, nil)), nil) = cons(xts, nil)
+++ creating new conjecture
	qrev(app(rev(cons(xts2, yts)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, yts))
--- clause
	qrev(app(rev(nil), cons(xts, nil)), nil) = cons(xts, nil)
... reduced to tautology
	cons(xts, nil) = cons(xts, nil)
--- clause
	qrev(app(rev(cons(xts2, yts)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, yts))
... reduced in 1 step to
	qrev(app(app(rev(yts), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, yts))
+++ inductive narrowing succeeded
--- clause
	qrev(app(rev(yts), cons(xts, nil)), nil) = cons(xts, yts)
... oriented to rule
	qrev(app(rev(yts), cons(xts, nil)), nil) -> cons(xts, yts)
+++ added new clause(s)
	qrev(app(app(rev(yts), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, yts))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	qrev(app(app(rev(yts), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, yts))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	qrev(rev(x), nil) -> x
	qrev(app(rev(yts), cons(xts, nil)), nil) -> cons(xts, yts)
--- Primal Grammar:
	<empty>

+++ treating clause
	qrev(app(app(rev(yts), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, yts))
+++ inductive narrowing on conjecture
	qrev(app(app(rev(yts), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, yts))
... induction variables of
	qrev(app(app(rev(yts), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, yts))
... are:
	yts:list
+++ perform INDUCTIVE NARROWING on conjecture 
	qrev(app(app(rev(yts), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, yts))
... with variable yts
+++ creating new conjecture
	qrev(app(app(rev(nil), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, nil))
+++ creating new conjecture
	qrev(app(app(rev(cons(xts3, yts)), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, cons(xts3, yts)))
--- clause
	qrev(app(app(rev(nil), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, nil))
... reduced to tautology
	cons(xts2, cons(xts1, nil)) = cons(xts2, cons(xts1, nil))
--- clause
	qrev(app(app(rev(cons(xts3, yts)), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, cons(xts3, yts)))
... reduced in 1 step to
	qrev(app(app(app(rev(yts), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, cons(xts3, yts)))
+++ inductive narrowing succeeded
--- clause
	qrev(app(app(rev(yts), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, yts))
... oriented to rule
	qrev(app(app(rev(yts), cons(xts2, nil)), cons(xts1, nil)), nil) -> cons(xts2, cons(xts1, yts))
+++ added new clause(s)
	qrev(app(app(app(rev(yts), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, cons(xts3, yts)))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	qrev(app(app(app(rev(yts), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, cons(xts3, yts)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	qrev(rev(x), nil) -> x
	qrev(app(rev(yts), cons(xts, nil)), nil) -> cons(xts, yts)
	qrev(app(app(rev(yts), cons(xts2, nil)), cons(xts1, nil)), nil) -> cons(xts2, cons(xts1, yts))
--- Primal Grammar:
	<empty>

+++ treating clause
	qrev(app(app(app(rev(yts), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, cons(xts3, yts)))
+++ inductive narrowing on conjecture
	qrev(app(app(app(rev(yts), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, cons(xts3, yts)))
... induction variables of
	qrev(app(app(app(rev(yts), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, cons(xts3, yts)))
... are:
	yts:list
+++ perform INDUCTIVE NARROWING on conjecture 
	qrev(app(app(app(rev(yts), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, cons(xts3, yts)))
... with variable yts
+++ creating new conjecture
	qrev(app(app(app(rev(nil), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, cons(xts3, nil)))
+++ creating new conjecture
	qrev(app(app(app(rev(cons(xts4, yts)), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, cons(xts3, cons(xts4, yts))))
--- clause
	qrev(app(app(app(rev(nil), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, cons(xts3, nil)))
... reduced to tautology
	cons(xts3, cons(xts2, cons(xts1, nil))) = cons(xts3, cons(xts2, cons(xts1, nil)))
--- clause
	qrev(app(app(app(rev(cons(xts4, yts)), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, cons(xts3, cons(xts4, yts))))
... reduced in 1 step to
	qrev(app(app(app(app(rev(yts), cons(xts4, nil)), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, cons(xts3, cons(xts4, yts))))
+++ inductive narrowing succeeded
--- clause
	qrev(app(app(app(rev(yts), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, cons(xts3, yts)))
... oriented to rule
	qrev(app(app(app(rev(yts), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)), nil) -> cons(xts3, cons(xts2, cons(xts1, yts)))
+++ added new clause(s)
	qrev(app(app(app(app(rev(yts), cons(xts4, nil)), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, cons(xts3, cons(xts4, yts))))
... to conjectures
+++ active wrap
	qrev(app(., cons(xts, nil)), nil) = cons(xts, .)
... with sequence
	qrev(app(rev(yts), cons(xts, nil)), nil) = cons(xts, yts)
	qrev(app(app(rev(yts), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, yts))
	qrev(app(app(app(rev(yts), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, cons(xts3, yts)))
+++ primal grammar found for head
	{app, cons, nil, qrev, rev}
... and wrap
	qrev(app(., cons(xts, nil)), nil) = cons(xts, .)
+++ Presburger system  = {
	^f0(0; yts, xts@) -> rev(yts)
	^f0($n0 + 1; yts, xts@) -> app(^f0($n0; yts, xts@), cons(xts$n0, nil))
	^f1(0; yts, xts@) -> yts
	^f1($n1 + 1; yts, xts@) -> cons(xts$n1, ^f1($n1; yts, xts@))
+++ }
+++ Lemma(s)           = 
	qrev(app(^f0($n; yts, xts@), cons(xts$n, nil)), nil) = cons(xts$n, ^f1($n; yts, xts@))
--- clause
	qrev(app(app(app(app(rev(yts), cons(xts4, nil)), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)), nil) = cons(xts1, cons(xts2, cons(xts3, cons(xts4, yts))))
... subsumed by lemma
	qrev(app(^f0($n; yts, xts@), cons(xts$n, nil)), nil) = cons(xts$n, ^f1($n; yts, xts@))
... with substitution
	$n <- 3

+++ Status of the Inference System
--- Conjectures:
	<empty>
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	qrev(rev(x), nil) -> x
	qrev(app(rev(yts), cons(xts, nil)), nil) -> cons(xts, yts)
	qrev(app(app(rev(yts), cons(xts2, nil)), cons(xts1, nil)), nil) -> cons(xts2, cons(xts1, yts))
	qrev(app(app(app(rev(yts), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil)), nil) -> cons(xts3, cons(xts2, cons(xts1, yts)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> rev(yts)
	^f0($n0 + 1; yts, xts@) -> app(^f0($n0; yts, xts@), cons(xts$n0, nil))
	^f1(0; yts, xts@) -> yts
	^f1($n1 + 1; yts, xts@) -> cons(xts$n1, ^f1($n1; yts, xts@))
+++ }
+++ Lemma(s)           = 
	qrev(app(^f0($n; yts, xts@), cons(xts$n, nil)), nil) = cons(xts$n, ^f1($n; yts, xts@))

+++ SUCCESS: all conjectures proved
+++ Statistics:
... Number of proof steps          = 4
... Number of induction steps      = 4
... Number of equational steps     = 0
... Number of case rewriting steps = 0
... Number of PG defined symbols   = 2
... Number of PG lemmas            = 1
... Elapsed time (seconds)         = 0.004
