+++ SPECIFICATION --- bidirectional branch, version 0.99
+++ Parameters:
    ===========
+++ input       = 13-rot+len-in.txt
+++ output      = 13-rot+len-out.txt
+++ trace       = 3
+++ direction   = first-to-last
+++ drop        = yes
+++ verbose     = 3
+++ split       = 4
+++ loop limit  = 10
+++ stdlib      = /usr/local/lib/indy/stdlib/
-----------------------------------------------------------------------

+++ specification RotLen from 13-rot+len-in.txt successfully parsed
+++ Listing
         1: specification RotLen
         2: sorts
         3:      list nat
         4: constructors
         5:      0: -> nat
         6:      cons: nat list -> list
         7:      nil: -> list
         8:      s: nat -> nat
         9: defined functions
        10:      +: nat nat -> nat
        11:      app: list list -> list
        12:      len: list -> nat
        13:      rot: nat list -> list
        14: precedence
        15:      rot > len > app > + > cons > nil > s > 0
        16: axioms
        17:      x + 0 = x;
        18:      len(nil) = 0;
        19:      rot(0, y) = y;
        20:      app(nil, y) = y;
        21:      x + s(y) = s(x + y);
        22:      len(cons(x, y)) = s(len(y));
        23:      app(cons(x, y), z) = cons(x, app(y, z));
        24:      rot(s(x), cons(y, z)) = rot(x, app(z, cons(y, nil)));
        25: conjectures
        26:      rot(len(x), x) = x;
        27: end
+++ finitary sorts: <empty>
+++ Rewrite System 
	x + 0 -> x
	len(nil) -> 0
	rot(0, y) -> y
	app(nil, y) -> y
	x + s(y) -> s(x + y)
	len(cons(x, y)) -> s(len(y))
	app(cons(x, y), z) -> cons(x, app(y, z))
	rot(s(x), cons(y, z)) -> rot(x, app(z, cons(y, nil)))
+++ inductive positions:
... for +: 1
... for app: 0
... for len: 0
... for rot: 0 1
+++ maximal depths of left-hand sides:
... for app: 2
... for rot: 2
... for len: 2
... for +: 2
+++ general maximal depth = 2
+++ sort dependence: nat < list
+++ test sets for defined functions and sorts:
... for rot
... ... nat
		0
		s(x)
... ... list
		nil
		cons(x, y)
... for app
... ... list
		nil
		cons(x, y)
... for len
... ... list
		nil
		cons(x, y)
... for +
... ... nat
		0
		s(x)

+++ conjecture(s)
	rot(len(x), x) = x

+++ inference system initiated
+++ treating clause
	rot(len(x), x) = x
+++ inductive narrowing on conjecture
	rot(len(x), x) = x
... induction variables of
	rot(len(x), x) = x
... are:
	x:list
+++ perform INDUCTIVE NARROWING on conjecture 
	rot(len(x), x) = x
... with variable x
+++ creating new conjecture
	rot(len(nil), nil) = nil
+++ creating new conjecture
	rot(len(cons(xts, yts)), cons(xts, yts)) = cons(xts, yts)
--- clause
	rot(len(nil), nil) = nil
... reduced to tautology
	nil = nil
--- clause
	rot(len(cons(xts, yts)), cons(xts, yts)) = cons(xts, yts)
... reduced in 2 steps to
	rot(len(yts), app(yts, cons(xts, nil))) = cons(xts, yts)
+++ inductive narrowing succeeded
--- clause
	rot(len(x), x) = x
... oriented to rule
	rot(len(x), x) -> x
+++ added new clause(s)
	rot(len(yts), app(yts, cons(xts, nil))) = cons(xts, yts)
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	rot(len(yts), app(yts, cons(xts, nil))) = cons(xts, yts)
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	rot(len(x), x) -> x
--- Primal Grammar:
	<empty>

+++ treating clause
	rot(len(yts), app(yts, cons(xts, nil))) = cons(xts, yts)
+++ inductive narrowing on conjecture
	rot(len(yts), app(yts, cons(xts, nil))) = cons(xts, yts)
... induction variables of
	rot(len(yts), app(yts, cons(xts, nil))) = cons(xts, yts)
... are:
	yts:list
+++ perform INDUCTIVE NARROWING on conjecture 
	rot(len(yts), app(yts, cons(xts, nil))) = cons(xts, yts)
... with variable yts
+++ creating new conjecture
	rot(len(nil), app(nil, cons(xts, nil))) = cons(xts, nil)
+++ creating new conjecture
	rot(len(cons(xts2, yts)), app(cons(xts2, yts), cons(xts1, nil))) = cons(xts1, cons(xts2, yts))
--- clause
	rot(len(nil), app(nil, cons(xts, nil))) = cons(xts, nil)
... reduced to tautology
	cons(xts, nil) = cons(xts, nil)
--- clause
	rot(len(cons(xts2, yts)), app(cons(xts2, yts), cons(xts1, nil))) = cons(xts1, cons(xts2, yts))
... reduced in 3 steps to
	rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil))) = cons(xts2, cons(xts1, yts))
+++ inductive narrowing succeeded
--- clause
	rot(len(yts), app(yts, cons(xts, nil))) = cons(xts, yts)
... oriented to rule
	rot(len(yts), app(yts, cons(xts, nil))) -> cons(xts, yts)
+++ added new clause(s)
	rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil))) = cons(xts2, cons(xts1, yts))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil))) = cons(xts2, cons(xts1, yts))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	rot(len(x), x) -> x
	rot(len(yts), app(yts, cons(xts, nil))) -> cons(xts, yts)
--- Primal Grammar:
	<empty>

+++ treating clause
	rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil))) = cons(xts2, cons(xts1, yts))
+++ inductive narrowing on conjecture
	rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil))) = cons(xts2, cons(xts1, yts))
... induction variables of
	rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil))) = cons(xts2, cons(xts1, yts))
... are:
	yts:list
+++ perform INDUCTIVE NARROWING on conjecture 
	rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil))) = cons(xts2, cons(xts1, yts))
... with variable yts
+++ creating new conjecture
	rot(len(nil), app(app(nil, cons(xts2, nil)), cons(xts1, nil))) = cons(xts2, cons(xts1, nil))
+++ creating new conjecture
	rot(len(cons(xts3, yts)), app(app(cons(xts3, yts), cons(xts2, nil)), cons(xts1, nil))) = cons(xts2, cons(xts1, cons(xts3, yts)))
--- clause
	rot(len(nil), app(app(nil, cons(xts2, nil)), cons(xts1, nil))) = cons(xts2, cons(xts1, nil))
... reduced to tautology
	cons(xts2, cons(xts1, nil)) = cons(xts2, cons(xts1, nil))
--- clause
	rot(len(cons(xts3, yts)), app(app(cons(xts3, yts), cons(xts2, nil)), cons(xts1, nil))) = cons(xts2, cons(xts1, cons(xts3, yts)))
... reduced in 4 steps to
	rot(len(yts), app(app(app(yts, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil))) = cons(xts3, cons(xts2, cons(xts1, yts)))
+++ inductive narrowing succeeded
--- clause
	rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil))) = cons(xts2, cons(xts1, yts))
... oriented to rule
	rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil))) -> cons(xts2, cons(xts1, yts))
+++ added new clause(s)
	rot(len(yts), app(app(app(yts, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil))) = cons(xts3, cons(xts2, cons(xts1, yts)))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	rot(len(yts), app(app(app(yts, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil))) = cons(xts3, cons(xts2, cons(xts1, yts)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	rot(len(x), x) -> x
	rot(len(yts), app(yts, cons(xts, nil))) -> cons(xts, yts)
	rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil))) -> cons(xts2, cons(xts1, yts))
--- Primal Grammar:
	<empty>

+++ treating clause
	rot(len(yts), app(app(app(yts, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil))) = cons(xts3, cons(xts2, cons(xts1, yts)))
+++ inductive narrowing on conjecture
	rot(len(yts), app(app(app(yts, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil))) = cons(xts3, cons(xts2, cons(xts1, yts)))
... induction variables of
	rot(len(yts), app(app(app(yts, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil))) = cons(xts3, cons(xts2, cons(xts1, yts)))
... are:
	yts:list
+++ perform INDUCTIVE NARROWING on conjecture 
	rot(len(yts), app(app(app(yts, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil))) = cons(xts3, cons(xts2, cons(xts1, yts)))
... with variable yts
+++ creating new conjecture
	rot(len(nil), app(app(app(nil, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil))) = cons(xts3, cons(xts2, cons(xts1, nil)))
+++ creating new conjecture
	rot(len(cons(xts4, yts)), app(app(app(cons(xts4, yts), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil))) = cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts))))
--- clause
	rot(len(nil), app(app(app(nil, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil))) = cons(xts3, cons(xts2, cons(xts1, nil)))
... reduced to tautology
	cons(xts3, cons(xts2, cons(xts1, nil))) = cons(xts3, cons(xts2, cons(xts1, nil)))
--- clause
	rot(len(cons(xts4, yts)), app(app(app(cons(xts4, yts), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil))) = cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts))))
... reduced in 5 steps to
	rot(len(yts), app(app(app(app(yts, cons(xts4, nil)), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil))) = cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))
+++ inductive narrowing succeeded
--- clause
	rot(len(yts), app(app(app(yts, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil))) = cons(xts3, cons(xts2, cons(xts1, yts)))
... oriented to rule
	rot(len(yts), app(app(app(yts, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil))) -> cons(xts3, cons(xts2, cons(xts1, yts)))
+++ added new clause(s)
	rot(len(yts), app(app(app(app(yts, cons(xts4, nil)), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil))) = cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))
... to conjectures
+++ active wrap
	rot(len(yts), app(., cons(xts, nil))) = cons(., .)
... with sequence
	rot(len(yts), app(yts, cons(xts, nil))) = cons(xts, yts)
	rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil))) = cons(xts2, cons(xts1, yts))
	rot(len(yts), app(app(app(yts, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil))) = cons(xts3, cons(xts2, cons(xts1, yts)))
+++ primal grammar found for head
	{app, cons, len, nil, rot}
... and wrap
	rot(len(yts), app(., cons(xts, nil))) = cons(., .)
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> app(^f0($n0; yts, xts@), cons(xts$n0, nil))
	^f1(0; yts, xts@) -> yts
	^f1($n1 + 1; yts, xts@) -> cons(xts$n1, ^f1($n1; yts, xts@))
+++ }
+++ Lemma(s)           = 
	rot(len(yts), app(^f0($n; yts, xts@), cons(xts$n, nil))) = cons(xts$n, ^f1($n; yts, xts@))
--- clause
	rot(len(yts), app(app(app(app(yts, cons(xts4, nil)), cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil))) = cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))
... subsumed by lemma
	rot(len(yts), app(^f0($n; yts, xts@), cons(xts$n, nil))) = cons(xts$n, ^f1($n; yts, xts@))
... with substitution
	$n <- 3

+++ Status of the Inference System
--- Conjectures:
	<empty>
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	rot(len(x), x) -> x
	rot(len(yts), app(yts, cons(xts, nil))) -> cons(xts, yts)
	rot(len(yts), app(app(yts, cons(xts2, nil)), cons(xts1, nil))) -> cons(xts2, cons(xts1, yts))
	rot(len(yts), app(app(app(yts, cons(xts3, nil)), cons(xts2, nil)), cons(xts1, nil))) -> cons(xts3, cons(xts2, cons(xts1, yts)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> app(^f0($n0; yts, xts@), cons(xts$n0, nil))
	^f1(0; yts, xts@) -> yts
	^f1($n1 + 1; yts, xts@) -> cons(xts$n1, ^f1($n1; yts, xts@))
+++ }
+++ Lemma(s)           = 
	rot(len(yts), app(^f0($n; yts, xts@), cons(xts$n, nil))) = cons(xts$n, ^f1($n; yts, xts@))

+++ SUCCESS: all conjectures proved
+++ Statistics:
... Number of proof steps          = 4
... Number of induction steps      = 4
... Number of equational steps     = 0
... Number of case rewriting steps = 0
... Number of PG defined symbols   = 2
... Number of PG lemmas            = 1
... Elapsed time (seconds)         = 0.005
