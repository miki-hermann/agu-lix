+++ SPECIFICATION --- bidirectional branch, version 0.99
+++ Parameters:
    ===========
+++ input       = 05-len+dbl-in.txt
+++ output      = 05-len+dbl-out.txt
+++ trace       = 3
+++ direction   = first-to-last
+++ drop        = yes
+++ verbose     = 3
+++ split       = 4
+++ loop limit  = 10
+++ stdlib      = /usr/local/lib/indy/stdlib/
-----------------------------------------------------------------------

+++ specification LenDouble from 05-len+dbl-in.txt successfully parsed
+++ Listing
         1: specification LenDouble
         2: sorts
         3:      list nat
         4: constructors
         5:      0: -> nat
         6:      cons: nat list -> list
         7:      nil: -> list
         8:      s: nat -> nat
         9: defined functions
        10:      +: nat nat -> nat
        11:      app: list list -> list
        12:      dbl: nat -> nat
        13:      len: list -> nat
        14: precedence
        15:      len > dbl > app > + > cons > nil > s > 0
        16: axioms
        17:      x + 0 = x;
        18:      dbl(0) = 0;
        19:      len(nil) = 0;
        20:      app(nil, y) = y;
        21:      x + s(y) = s(x + y);
        22:      dbl(s(x)) = s(s(dbl(x)));
        23:      len(cons(x, y)) = s(len(y));
        24:      app(cons(x, y), z) = cons(x, app(y, z));
        25: conjectures
        26:      len(app(x, x)) = dbl(len(x));
        27: end
+++ finitary sorts: <empty>
+++ Rewrite System 
	x + 0 -> x
	dbl(0) -> 0
	len(nil) -> 0
	app(nil, y) -> y
	x + s(y) -> s(x + y)
	dbl(s(x)) -> s(s(dbl(x)))
	len(cons(x, y)) -> s(len(y))
	app(cons(x, y), z) -> cons(x, app(y, z))
+++ inductive positions:
... for +: 1
... for app: 0
... for dbl: 0
... for len: 0
+++ maximal depths of left-hand sides:
... for app: 2
... for dbl: 2
... for len: 2
... for +: 2
+++ general maximal depth = 2
+++ sort dependence: nat < list
+++ test sets for defined functions and sorts:
... for dbl
... ... nat
		0
		s(x)
... for app
... ... list
		nil
		cons(x, y)
... for len
... ... list
		nil
		cons(x, y)
... for +
... ... nat
		0
		s(x)

+++ conjecture(s)
	len(app(x, x)) = dbl(len(x))

+++ inference system initiated
+++ treating clause
	len(app(x, x)) = dbl(len(x))
+++ inductive narrowing on conjecture
	len(app(x, x)) = dbl(len(x))
... induction variables of
	len(app(x, x)) = dbl(len(x))
... are:
	x:list
+++ perform INDUCTIVE NARROWING on conjecture 
	len(app(x, x)) = dbl(len(x))
... with variable x
+++ creating new conjecture
	len(app(nil, nil)) = dbl(len(nil))
+++ creating new conjecture
	len(app(cons(xts, yts), cons(xts, yts))) = dbl(len(cons(xts, yts)))
--- clause
	len(app(nil, nil)) = dbl(len(nil))
... reduced to tautology
	0 = 0
--- clause
	len(app(cons(xts, yts), cons(xts, yts))) = dbl(len(cons(xts, yts)))
... reduced in 4 steps to
	s(len(app(yts, cons(xts, yts)))) = s(s(dbl(len(yts))))
... decomposed into new clause(s)
	len(app(yts, cons(xts, yts))) = s(dbl(len(yts)))
+++ inductive narrowing succeeded
--- clause
	len(app(x, x)) = dbl(len(x))
... oriented to rule
	len(app(x, x)) -> dbl(len(x))
+++ added new clause(s)
	len(app(yts, cons(xts, yts))) = s(dbl(len(yts)))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	len(app(yts, cons(xts, yts))) = s(dbl(len(yts)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(app(x, x)) -> dbl(len(x))
--- Primal Grammar:
	<empty>

+++ treating clause
	len(app(yts, cons(xts, yts))) = s(dbl(len(yts)))
+++ inductive narrowing on conjecture
	len(app(yts, cons(xts, yts))) = s(dbl(len(yts)))
... induction variables of
	len(app(yts, cons(xts, yts))) = s(dbl(len(yts)))
... are:
	yts:list
+++ perform INDUCTIVE NARROWING on conjecture 
	len(app(yts, cons(xts, yts))) = s(dbl(len(yts)))
... with variable yts
+++ creating new conjecture
	len(app(nil, cons(xts, nil))) = s(dbl(len(nil)))
+++ creating new conjecture
	len(app(cons(xts2, yts), cons(xts1, cons(xts2, yts)))) = s(dbl(len(cons(xts2, yts))))
--- clause
	len(app(nil, cons(xts, nil))) = s(dbl(len(nil)))
... reduced to tautology
	s(0) = s(0)
--- clause
	len(app(cons(xts2, yts), cons(xts1, cons(xts2, yts)))) = s(dbl(len(cons(xts2, yts))))
... reduced in 4 steps to
	s(len(app(yts, cons(xts2, cons(xts1, yts))))) = s(s(s(dbl(len(yts)))))
... decomposed into new clause(s)
	len(app(yts, cons(xts2, cons(xts1, yts)))) = s(s(dbl(len(yts))))
+++ inductive narrowing succeeded
--- clause
	len(app(yts, cons(xts, yts))) = s(dbl(len(yts)))
... oriented to rule
	len(app(yts, cons(xts, yts))) -> s(dbl(len(yts)))
+++ added new clause(s)
	len(app(yts, cons(xts2, cons(xts1, yts)))) = s(s(dbl(len(yts))))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	len(app(yts, cons(xts2, cons(xts1, yts)))) = s(s(dbl(len(yts))))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(app(x, x)) -> dbl(len(x))
	len(app(yts, cons(xts, yts))) -> s(dbl(len(yts)))
--- Primal Grammar:
	<empty>

+++ treating clause
	len(app(yts, cons(xts2, cons(xts1, yts)))) = s(s(dbl(len(yts))))
+++ inductive narrowing on conjecture
	len(app(yts, cons(xts2, cons(xts1, yts)))) = s(s(dbl(len(yts))))
... induction variables of
	len(app(yts, cons(xts2, cons(xts1, yts)))) = s(s(dbl(len(yts))))
... are:
	yts:list
+++ perform INDUCTIVE NARROWING on conjecture 
	len(app(yts, cons(xts2, cons(xts1, yts)))) = s(s(dbl(len(yts))))
... with variable yts
+++ creating new conjecture
	len(app(nil, cons(xts2, cons(xts1, nil)))) = s(s(dbl(len(nil))))
+++ creating new conjecture
	len(app(cons(xts3, yts), cons(xts2, cons(xts1, cons(xts3, yts))))) = s(s(dbl(len(cons(xts3, yts)))))
--- clause
	len(app(nil, cons(xts2, cons(xts1, nil)))) = s(s(dbl(len(nil))))
... reduced to tautology
	s(s(0)) = s(s(0))
--- clause
	len(app(cons(xts3, yts), cons(xts2, cons(xts1, cons(xts3, yts))))) = s(s(dbl(len(cons(xts3, yts)))))
... reduced in 4 steps to
	s(len(app(yts, cons(xts3, cons(xts2, cons(xts1, yts)))))) = s(s(s(s(dbl(len(yts))))))
... decomposed into new clause(s)
	len(app(yts, cons(xts3, cons(xts2, cons(xts1, yts))))) = s(s(s(dbl(len(yts)))))
+++ inductive narrowing succeeded
--- clause
	len(app(yts, cons(xts2, cons(xts1, yts)))) = s(s(dbl(len(yts))))
... oriented to rule
	len(app(yts, cons(xts2, cons(xts1, yts)))) -> s(s(dbl(len(yts))))
+++ added new clause(s)
	len(app(yts, cons(xts3, cons(xts2, cons(xts1, yts))))) = s(s(s(dbl(len(yts)))))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	len(app(yts, cons(xts3, cons(xts2, cons(xts1, yts))))) = s(s(s(dbl(len(yts)))))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(app(x, x)) -> dbl(len(x))
	len(app(yts, cons(xts, yts))) -> s(dbl(len(yts)))
	len(app(yts, cons(xts2, cons(xts1, yts)))) -> s(s(dbl(len(yts))))
--- Primal Grammar:
	<empty>

+++ treating clause
	len(app(yts, cons(xts3, cons(xts2, cons(xts1, yts))))) = s(s(s(dbl(len(yts)))))
+++ inductive narrowing on conjecture
	len(app(yts, cons(xts3, cons(xts2, cons(xts1, yts))))) = s(s(s(dbl(len(yts)))))
... induction variables of
	len(app(yts, cons(xts3, cons(xts2, cons(xts1, yts))))) = s(s(s(dbl(len(yts)))))
... are:
	yts:list
+++ perform INDUCTIVE NARROWING on conjecture 
	len(app(yts, cons(xts3, cons(xts2, cons(xts1, yts))))) = s(s(s(dbl(len(yts)))))
... with variable yts
+++ creating new conjecture
	len(app(nil, cons(xts3, cons(xts2, cons(xts1, nil))))) = s(s(s(dbl(len(nil)))))
+++ creating new conjecture
	len(app(cons(xts4, yts), cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts)))))) = s(s(s(dbl(len(cons(xts4, yts))))))
--- clause
	len(app(nil, cons(xts3, cons(xts2, cons(xts1, nil))))) = s(s(s(dbl(len(nil)))))
... reduced to tautology
	s(s(s(0))) = s(s(s(0)))
--- clause
	len(app(cons(xts4, yts), cons(xts3, cons(xts2, cons(xts1, cons(xts4, yts)))))) = s(s(s(dbl(len(cons(xts4, yts))))))
... reduced in 4 steps to
	s(len(app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts))))))) = s(s(s(s(s(dbl(len(yts)))))))
... decomposed into new clause(s)
	len(app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts)))))) = s(s(s(s(dbl(len(yts))))))
+++ inductive narrowing succeeded
--- clause
	len(app(yts, cons(xts3, cons(xts2, cons(xts1, yts))))) = s(s(s(dbl(len(yts)))))
... oriented to rule
	len(app(yts, cons(xts3, cons(xts2, cons(xts1, yts))))) -> s(s(s(dbl(len(yts)))))
+++ added new clause(s)
	len(app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts)))))) = s(s(s(s(dbl(len(yts))))))
... to conjectures
+++ active wrap
	len(app(yts, cons(., .))) = s(.)
... with sequence
	len(app(yts, cons(xts, yts))) = s(dbl(len(yts)))
	len(app(yts, cons(xts2, cons(xts1, yts)))) = s(s(dbl(len(yts))))
	len(app(yts, cons(xts3, cons(xts2, cons(xts1, yts))))) = s(s(s(dbl(len(yts)))))
+++ primal grammar found for head
	{app, cons, dbl, len, s}
... and wrap
	len(app(yts, cons(., .))) = s(.)
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> cons(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> dbl(len(yts))
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(app(yts, cons(xts$n, ^f0($n; yts, xts@)))) = s(^f1($n; yts))
--- clause
	len(app(yts, cons(xts4, cons(xts3, cons(xts2, cons(xts1, yts)))))) = s(s(s(s(dbl(len(yts))))))
... subsumed by lemma
	len(app(yts, cons(xts$n, ^f0($n; yts, xts@)))) = s(^f1($n; yts))
... with substitution
	$n <- 3

+++ Status of the Inference System
--- Conjectures:
	<empty>
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(app(x, x)) -> dbl(len(x))
	len(app(yts, cons(xts, yts))) -> s(dbl(len(yts)))
	len(app(yts, cons(xts2, cons(xts1, yts)))) -> s(s(dbl(len(yts))))
	len(app(yts, cons(xts3, cons(xts2, cons(xts1, yts))))) -> s(s(s(dbl(len(yts)))))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> yts
	^f0($n0 + 1; yts, xts@) -> cons(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> dbl(len(yts))
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(app(yts, cons(xts$n, ^f0($n; yts, xts@)))) = s(^f1($n; yts))

+++ SUCCESS: all conjectures proved
+++ Statistics:
... Number of proof steps          = 4
... Number of induction steps      = 4
... Number of equational steps     = 0
... Number of case rewriting steps = 0
... Number of PG defined symbols   = 2
... Number of PG lemmas            = 1
... Elapsed time (seconds)         = 0.005
