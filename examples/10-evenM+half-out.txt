+++ SPECIFICATION --- bidirectional branch, version 0.99
+++ Parameters:
    ===========
+++ input       = 10-evenM+half-in.txt
+++ output      = 10-evenM+half-out.txt
+++ trace       = 3
+++ direction   = first-to-last
+++ drop        = yes
+++ verbose     = 3
+++ split       = 4
+++ loop limit  = 10
+++ stdlib      = /usr/local/lib/indy/stdlib/
-----------------------------------------------------------------------

+++ specification evenMhalf from 10-evenM+half-in.txt successfully parsed
+++ Listing
         1: specification evenMhalf
         2: sorts
         3:      bool nat
         4: constructors
         5:      0: -> nat
         6:      false: -> bool
         7:      s: nat -> nat
         8:      true: -> bool
         9: defined functions
        10:      +: nat nat -> nat
        11:      even: nat -> bool
        12:      half: nat -> nat
        13:      odd: nat -> bool
        14: precedence
        15:      + > half > even = odd > s > 0 > false = true
        16: axioms
        17:      0 + x = x;
        18:      half(0) = 0;
        19:      even(0) = true;
        20:      half(s(0)) = 0;
        21:      odd(0) = false;
        22:      odd(s(0)) = true;
        23:      even(s(x)) = odd(x);
        24:      odd(s(x)) = even(x);
        25:      s(x) + y = s(x + y);
        26:      half(s(s(x))) = s(half(x));
        27: conjectures
        28:      even(x) = true => half(x) + half(x) = x;
        29: end
+++ finitary sorts: bool
+++ Rewrite System 
	0 + x -> x
	half(0) -> 0
	even(0) -> true
	half(s(0)) -> 0
	odd(0) -> false
	odd(s(0)) -> true
	even(s(x)) -> odd(x)
	odd(s(x)) -> even(x)
	s(x) + y -> s(x + y)
	half(s(s(x))) -> s(half(x))
+++ inductive positions:
... for +: 0
... for even: 0
... for half: 0 0.0
... for odd: 0 0.0
+++ maximal depths of left-hand sides:
... for odd: 2
... for even: 2
... for half: 3
... for +: 2
+++ general maximal depth = 3
+++ sort dependence: <empty>
+++ test sets for defined functions and sorts:
... for odd
... ... nat
		0
		s(x)
... for even
... ... nat
		0
		s(x)
... for half
... ... nat
		0
		s(0)
		s(s(x))
... for +
... ... nat
		0
		s(x)

+++ conjecture(s)
	even(x) = true => half(x) + half(x) = x

+++ inference system initiated
+++ treating clause
	even(x) = true => half(x) + half(x) = x
+++ inductive narrowing on conjecture
	even(x) = true => half(x) + half(x) = x
... induction variables of
	even(x) = true => half(x) + half(x) = x
... are:
	x:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	even(x) = true => half(x) + half(x) = x
... with variable x
+++ creating new conjecture
	even(0) = true => half(0) + half(0) = 0
+++ creating new conjecture
	even(s(xts)) = true => half(s(xts)) + half(s(xts)) = s(xts)
--- clause
	even(0) = true => half(0) + half(0) = 0
... reduced to tautology
	0 = 0
--- clause
	even(s(xts)) = true => half(s(xts)) + half(s(xts)) = s(xts)
... reduced in 1 step to
	odd(xts) = true => half(s(xts)) + half(s(xts)) = s(xts)
+++ inductive narrowing succeeded
--- clause
	even(x) = true => half(x) + half(x) = x
... oriented to rule
	even(x) = true => half(x) + half(x) -> x
+++ added new clause(s)
	odd(xts) = true => half(s(xts)) + half(s(xts)) = s(xts)
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	odd(xts) = true => half(s(xts)) + half(s(xts)) = s(xts)
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	even(x) = true => half(x) + half(x) -> x
--- Primal Grammar:
	<empty>

+++ treating clause
	odd(xts) = true => half(s(xts)) + half(s(xts)) = s(xts)
+++ inductive narrowing on conjecture
	odd(xts) = true => half(s(xts)) + half(s(xts)) = s(xts)
... induction variables of
	odd(xts) = true => half(s(xts)) + half(s(xts)) = s(xts)
... are:
	xts:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	odd(xts) = true => half(s(xts)) + half(s(xts)) = s(xts)
... with variable xts
+++ creating new conjecture
	odd(0) = true => half(s(0)) + half(s(0)) = s(0)
+++ creating new conjecture
	odd(s(0)) = true => half(s(s(0))) + half(s(s(0))) = s(s(0))
+++ creating new conjecture
	odd(s(s(xts))) = true => half(s(s(s(xts)))) + half(s(s(s(xts)))) = s(s(s(xts)))
--- clause
	odd(0) = true => half(s(0)) + half(s(0)) = s(0)
... reduced in 4 steps to
	false = true => 0 = s(0)
--- clause
	false = true => 0 = s(0)
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	odd(s(0)) = true => half(s(s(0))) + half(s(s(0))) = s(s(0))
... reduced to tautology
	s(s(0)) = s(s(0))
--- clause
	odd(s(s(xts))) = true => half(s(s(s(xts)))) + half(s(s(s(xts)))) = s(s(s(xts)))
... reduced in 5 steps to
	odd(xts) = true => s(half(s(xts)) + s(half(s(xts)))) = s(s(s(xts)))
... decomposed into new clause(s)
	half(s(xts)) + s(half(s(xts))) = s(s(xts))
... decomposed into new clause(s)
	odd(xts) = true => half(s(xts)) + s(half(s(xts))) = s(s(xts))
+++ inductive narrowing succeeded
--- clause
	odd(xts) = true => half(s(xts)) + half(s(xts)) = s(xts)
... oriented to rule
	odd(xts) = true => half(s(xts)) + half(s(xts)) -> s(xts)
+++ added new clause(s)
	odd(xts) = true => half(s(xts)) + s(half(s(xts))) = s(s(xts))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	odd(xts) = true => half(s(xts)) + s(half(s(xts))) = s(s(xts))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	even(x) = true => half(x) + half(x) -> x
	odd(xts) = true => half(s(xts)) + half(s(xts)) -> s(xts)
--- Primal Grammar:
	<empty>

+++ treating clause
	odd(xts) = true => half(s(xts)) + s(half(s(xts))) = s(s(xts))
+++ inductive narrowing on conjecture
	odd(xts) = true => half(s(xts)) + s(half(s(xts))) = s(s(xts))
... induction variables of
	odd(xts) = true => half(s(xts)) + s(half(s(xts))) = s(s(xts))
... are:
	xts:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	odd(xts) = true => half(s(xts)) + s(half(s(xts))) = s(s(xts))
... with variable xts
+++ creating new conjecture
	odd(0) = true => half(s(0)) + s(half(s(0))) = s(s(0))
+++ creating new conjecture
	odd(s(0)) = true => half(s(s(0))) + s(half(s(s(0)))) = s(s(s(0)))
+++ creating new conjecture
	odd(s(s(xts))) = true => half(s(s(s(xts)))) + s(half(s(s(s(xts))))) = s(s(s(s(xts))))
--- clause
	odd(0) = true => half(s(0)) + s(half(s(0))) = s(s(0))
... reduced in 4 steps to
	false = true => s(0) = s(s(0))
--- clause
	false = true => s(0) = s(s(0))
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	odd(s(0)) = true => half(s(s(0))) + s(half(s(s(0)))) = s(s(s(0)))
... reduced to tautology
	s(s(s(0))) = s(s(s(0)))
--- clause
	odd(s(s(xts))) = true => half(s(s(s(xts)))) + s(half(s(s(s(xts))))) = s(s(s(s(xts))))
... reduced in 5 steps to
	odd(xts) = true => s(half(s(xts)) + s(s(half(s(xts))))) = s(s(s(s(xts))))
... decomposed into new clause(s)
	half(s(xts)) + s(s(half(s(xts)))) = s(s(s(xts)))
... decomposed into new clause(s)
	odd(xts) = true => half(s(xts)) + s(s(half(s(xts)))) = s(s(s(xts)))
+++ inductive narrowing succeeded
--- clause
	odd(xts) = true => half(s(xts)) + s(half(s(xts))) = s(s(xts))
... oriented to rule
	odd(xts) = true => half(s(xts)) + s(half(s(xts))) -> s(s(xts))
+++ added new clause(s)
	odd(xts) = true => half(s(xts)) + s(s(half(s(xts)))) = s(s(s(xts)))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	odd(xts) = true => half(s(xts)) + s(s(half(s(xts)))) = s(s(s(xts)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	even(x) = true => half(x) + half(x) -> x
	odd(xts) = true => half(s(xts)) + half(s(xts)) -> s(xts)
	odd(xts) = true => half(s(xts)) + s(half(s(xts))) -> s(s(xts))
--- Primal Grammar:
	<empty>

+++ treating clause
	odd(xts) = true => half(s(xts)) + s(s(half(s(xts)))) = s(s(s(xts)))
+++ inductive narrowing on conjecture
	odd(xts) = true => half(s(xts)) + s(s(half(s(xts)))) = s(s(s(xts)))
... induction variables of
	odd(xts) = true => half(s(xts)) + s(s(half(s(xts)))) = s(s(s(xts)))
... are:
	xts:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	odd(xts) = true => half(s(xts)) + s(s(half(s(xts)))) = s(s(s(xts)))
... with variable xts
+++ creating new conjecture
	odd(0) = true => half(s(0)) + s(s(half(s(0)))) = s(s(s(0)))
+++ creating new conjecture
	odd(s(0)) = true => half(s(s(0))) + s(s(half(s(s(0))))) = s(s(s(s(0))))
+++ creating new conjecture
	odd(s(s(xts))) = true => half(s(s(s(xts)))) + s(s(half(s(s(s(xts)))))) = s(s(s(s(s(xts)))))
--- clause
	odd(0) = true => half(s(0)) + s(s(half(s(0)))) = s(s(s(0)))
... reduced in 4 steps to
	false = true => s(s(0)) = s(s(s(0)))
--- clause
	false = true => s(s(0)) = s(s(s(0)))
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	odd(s(0)) = true => half(s(s(0))) + s(s(half(s(s(0))))) = s(s(s(s(0))))
... reduced to tautology
	s(s(s(s(0)))) = s(s(s(s(0))))
--- clause
	odd(s(s(xts))) = true => half(s(s(s(xts)))) + s(s(half(s(s(s(xts)))))) = s(s(s(s(s(xts)))))
... reduced in 5 steps to
	odd(xts) = true => s(half(s(xts)) + s(s(s(half(s(xts)))))) = s(s(s(s(s(xts)))))
... decomposed into new clause(s)
	half(s(xts)) + s(s(s(half(s(xts))))) = s(s(s(s(xts))))
... decomposed into new clause(s)
	odd(xts) = true => half(s(xts)) + s(s(s(half(s(xts))))) = s(s(s(s(xts))))
+++ inductive narrowing succeeded
--- clause
	odd(xts) = true => half(s(xts)) + s(s(half(s(xts)))) = s(s(s(xts)))
... oriented to rule
	odd(xts) = true => half(s(xts)) + s(s(half(s(xts)))) -> s(s(s(xts)))
+++ added new clause(s)
	odd(xts) = true => half(s(xts)) + s(s(s(half(s(xts))))) = s(s(s(s(xts))))
... to conjectures
+++ active wrap
	odd(xts) = true => half(s(xts)) + . = s(.)
... with sequence
	odd(xts) = true => half(s(xts)) + half(s(xts)) = s(xts)
	odd(xts) = true => half(s(xts)) + s(half(s(xts))) = s(s(xts))
	odd(xts) = true => half(s(xts)) + s(s(half(s(xts)))) = s(s(s(xts)))
+++ primal grammar found for head
	{+, half, odd, s, true}
... and wrap
	odd(xts) = true => half(s(xts)) + . = s(.)
+++ Presburger system  = {
	^f0(0; xts) -> half(s(xts))
	^f0($n0 + 1; xts) -> s(^f0($n0; xts))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	odd(xts) = true => half(s(xts)) + ^f0($n; xts) = s(^f1($n; xts))
--- clause
	odd(xts) = true => half(s(xts)) + s(s(s(half(s(xts))))) = s(s(s(s(xts))))
... subsumed by lemma
	odd(xts) = true => half(s(xts)) + ^f0($n; xts) = s(^f1($n; xts))
... with substitution
	$n <- 3

+++ Status of the Inference System
--- Conjectures:
	<empty>
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	even(x) = true => half(x) + half(x) -> x
	odd(xts) = true => half(s(xts)) + half(s(xts)) -> s(xts)
	odd(xts) = true => half(s(xts)) + s(half(s(xts))) -> s(s(xts))
	odd(xts) = true => half(s(xts)) + s(s(half(s(xts)))) -> s(s(s(xts)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; xts) -> half(s(xts))
	^f0($n0 + 1; xts) -> s(^f0($n0; xts))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	odd(xts) = true => half(s(xts)) + ^f0($n; xts) = s(^f1($n; xts))

+++ SUCCESS: all conjectures proved
+++ Statistics:
... Number of proof steps          = 4
... Number of induction steps      = 4
... Number of equational steps     = 0
... Number of case rewriting steps = 0
... Number of PG defined symbols   = 2
... Number of PG lemmas            = 1
... Elapsed time (seconds)         = 0.005
