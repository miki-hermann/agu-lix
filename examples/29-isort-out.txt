+++ SPECIFICATION --- bidirectional branch, version 0.99
+++ Parameters:
    ===========
+++ input       = 29-isort-in.txt
+++ output      = 29-isort-out.txt
+++ trace       = 3
+++ direction   = first-to-last
+++ drop        = yes
+++ verbose     = 3
+++ split       = 4
+++ loop limit  = 52
+++ stdlib      = /usr/local/lib/indy/stdlib/
-----------------------------------------------------------------------

+++ specification sorted from 29-isort-in.txt successfully parsed
+++ Listing
         1: specification sorted
         2: sorts
         3:      bool list nat
         4: constructors
         5:      0: -> nat
         6:      cons: nat list -> list
         7:      false: -> bool
         8:      nil: -> list
         9:      s: nat -> nat
        10:      true: -> bool
        11: defined functions
        12:      <=: nat nat -> bool
        13:      insert: nat list -> list
        14:      isort: list -> list
        15:      len: list -> nat
        16: precedence
        17:      len > isort > insert > <= > cons > nil > s > 0 > false = true
        18: axioms
        19:      len(nil) = 0;
        20:      0 <= x = true;
        21:      isort(nil) = nil;
        22:      s(x) <= 0 = false;
        23:      s(x) <= s(y) = x <= y;
        24:      insert(x, nil) = cons(x, nil);
        25:      len(cons(xh, xt)) = s(len(xt));
        26:      isort(cons(x, y)) = insert(x, isort(y));
        27:      x <= y = true => insert(x, cons(y, z)) = cons(x, cons(y, z));
        28:      x <= y = false => insert(x, cons(y, z)) = cons(y, insert(x, z));
        29: conjectures
        30:      len(isort(x)) = len(x);
        31: end
+++ finitary sorts: bool
+++ Rewrite System 
	len(nil) -> 0
	0 <= x -> true
	isort(nil) -> nil
	s(x) <= 0 -> false
	s(x) <= s(y) -> x <= y
	insert(x, nil) -> cons(x, nil)
	len(cons(xh, xt)) -> s(len(xt))
	isort(cons(x, y)) -> insert(x, isort(y))
	x <= y = true => insert(x, cons(y, z)) -> cons(x, cons(y, z))
	x <= y = false => insert(x, cons(y, z)) -> cons(y, insert(x, z))
+++ inductive positions:
... for <=: 0 1
... for insert: 1
... for isort: 0
... for len: 0
+++ maximal depths of left-hand sides:
... for insert: 2
... for isort: 2
... for <=: 2
... for len: 2
+++ general maximal depth = 2
+++ sort dependence: nat < list
+++ test sets for defined functions and sorts:
... for len
... ... list
		nil
		cons(x, y)
... for isort
... ... list
		nil
		cons(x, y)
... for insert
... ... list
		nil
		cons(x, y)
... for <=
... ... nat
		0
		s(x)

+++ conjecture(s)
	len(isort(x)) = len(x)

+++ inference system initiated
+++ treating clause
	len(isort(x)) = len(x)
+++ inductive narrowing on conjecture
	len(isort(x)) = len(x)
... induction variables of
	len(isort(x)) = len(x)
... are:
	x:list
+++ perform INDUCTIVE NARROWING on conjecture 
	len(isort(x)) = len(x)
... with variable x
+++ creating new conjecture
	len(isort(nil)) = len(nil)
+++ creating new conjecture
	len(isort(cons(xts, yts))) = len(cons(xts, yts))
--- clause
	len(isort(nil)) = len(nil)
... reduced to tautology
	0 = 0
--- clause
	len(isort(cons(xts, yts))) = len(cons(xts, yts))
... reduced in 2 steps to
	len(insert(xts, isort(yts))) = s(len(yts))
+++ inductive narrowing succeeded
--- clause
	len(isort(x)) = len(x)
... oriented to rule
	len(isort(x)) -> len(x)
+++ added new clause(s)
	len(insert(xts, isort(yts))) = s(len(yts))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	len(insert(xts, isort(yts))) = s(len(yts))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
--- Primal Grammar:
	<empty>

+++ treating clause
	len(insert(xts, isort(yts))) = s(len(yts))
+++ inductive narrowing on conjecture
	len(insert(xts, isort(yts))) = s(len(yts))
... induction variables of
	len(insert(xts, isort(yts))) = s(len(yts))
... are:
	yts:list
+++ perform INDUCTIVE NARROWING on conjecture 
	len(insert(xts, isort(yts))) = s(len(yts))
... with variable yts
+++ creating new conjecture
	len(insert(xts, isort(nil))) = s(len(nil))
+++ creating new conjecture
	len(insert(xts2, isort(cons(xts1, yts)))) = s(len(cons(xts1, yts)))
--- clause
	len(insert(xts, isort(nil))) = s(len(nil))
... reduced to tautology
	s(0) = s(0)
--- clause
	len(insert(xts2, isort(cons(xts1, yts)))) = s(len(cons(xts1, yts)))
... reduced in 2 steps to
	len(insert(xts2, insert(xts1, isort(yts)))) = s(s(len(yts)))
+++ inductive narrowing succeeded
--- clause
	len(insert(xts, isort(yts))) = s(len(yts))
... oriented to rule
	len(insert(xts, isort(yts))) -> s(len(yts))
+++ added new clause(s)
	len(insert(xts2, insert(xts1, isort(yts)))) = s(s(len(yts)))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	len(insert(xts2, insert(xts1, isort(yts)))) = s(s(len(yts)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
--- Primal Grammar:
	<empty>

+++ treating clause
	len(insert(xts2, insert(xts1, isort(yts)))) = s(s(len(yts)))
+++ inductive narrowing on conjecture
	len(insert(xts2, insert(xts1, isort(yts)))) = s(s(len(yts)))
... induction variables of
	len(insert(xts2, insert(xts1, isort(yts)))) = s(s(len(yts)))
... are:
	yts:list
+++ perform INDUCTIVE NARROWING on conjecture 
	len(insert(xts2, insert(xts1, isort(yts)))) = s(s(len(yts)))
... with variable yts
+++ creating new conjecture
	len(insert(xts2, insert(xts1, isort(nil)))) = s(s(len(nil)))
+++ creating new conjecture
	len(insert(xts3, insert(xts2, isort(cons(xts1, yts))))) = s(s(len(cons(xts1, yts))))
--- clause
	len(insert(xts2, insert(xts1, isort(nil)))) = s(s(len(nil)))
... reduced in 3 steps to
	len(insert(xts2, cons(xts1, nil))) = s(s(0))
--- clause
	len(insert(xts3, insert(xts2, isort(cons(xts1, yts))))) = s(s(len(cons(xts1, yts))))
... reduced in 2 steps to
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) = s(s(s(len(yts))))
+++ inductive narrowing succeeded
--- clause
	len(insert(xts2, insert(xts1, isort(yts)))) = s(s(len(yts)))
... oriented to rule
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
+++ added new clause(s)
	len(insert(xts2, cons(xts1, nil))) = s(s(0))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) = s(s(s(len(yts))))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	len(insert(xts2, cons(xts1, nil))) = s(s(0))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) = s(s(s(len(yts))))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
--- Primal Grammar:
	<empty>

+++ treating clause
	len(insert(xts2, cons(xts1, nil))) = s(s(0))
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	xts2 <= xts1 = false => len(cons(xts1, cons(xts2, nil))) = s(s(0))
	xts2 <= xts1 = true => len(cons(xts2, cons(xts1, nil))) = s(s(0))
+++ added new clause(s)
	xts2 <= xts1 = false => len(cons(xts1, cons(xts2, nil))) = s(s(0))
	xts2 <= xts1 = true => len(cons(xts2, cons(xts1, nil))) = s(s(0))
... to conjectures
--- clause
	xts2 <= xts1 = false => len(cons(xts1, cons(xts2, nil))) = s(s(0))
... reduced to tautology
	xts2 <= xts1 = false => s(s(0)) = s(s(0))
--- clause
	xts2 <= xts1 = true => len(cons(xts2, cons(xts1, nil))) = s(s(0))
... reduced to tautology
	xts2 <= xts1 = true => s(s(0)) = s(s(0))

+++ Status of the Inference System
--- Conjectures:
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) = s(s(s(len(yts))))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
--- Primal Grammar:
	<empty>

+++ treating clause
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) = s(s(s(len(yts))))
+++ inductive narrowing on conjecture
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) = s(s(s(len(yts))))
... induction variables of
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) = s(s(s(len(yts))))
... are:
	yts:list
+++ perform INDUCTIVE NARROWING on conjecture 
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) = s(s(s(len(yts))))
... with variable yts
+++ creating new conjecture
	len(insert(xts3, insert(xts2, insert(xts1, isort(nil))))) = s(s(s(len(nil))))
+++ creating new conjecture
	len(insert(xts4, insert(xts3, insert(xts2, isort(cons(xts1, yts)))))) = s(s(s(len(cons(xts1, yts)))))
--- clause
	len(insert(xts3, insert(xts2, insert(xts1, isort(nil))))) = s(s(s(len(nil))))
... reduced in 3 steps to
	len(insert(xts3, insert(xts2, cons(xts1, nil)))) = s(s(s(0)))
--- clause
	len(insert(xts4, insert(xts3, insert(xts2, isort(cons(xts1, yts)))))) = s(s(s(len(cons(xts1, yts)))))
... reduced in 2 steps to
	len(insert(xts4, insert(xts3, insert(xts2, insert(xts1, isort(yts)))))) = s(s(s(s(len(yts)))))
+++ inductive narrowing succeeded
--- clause
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) = s(s(s(len(yts))))
... oriented to rule
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
+++ added new clause(s)
	len(insert(xts3, insert(xts2, cons(xts1, nil)))) = s(s(s(0)))
	len(insert(xts4, insert(xts3, insert(xts2, insert(xts1, isort(yts)))))) = s(s(s(s(len(yts)))))
... to conjectures
+++ active wrap
	len(insert(., .)) = s(.)
... with sequence
	len(insert(xts, isort(yts))) = s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) = s(s(len(yts)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) = s(s(s(len(yts))))
+++ primal grammar found for head
	{insert, isort, len, s}
... and wrap
	len(insert(., .)) = s(.)
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
--- clause
	len(insert(xts4, insert(xts3, insert(xts2, insert(xts1, isort(yts)))))) = s(s(s(s(len(yts)))))
... subsumed by lemma
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
... with substitution
	$n <- 3

+++ Status of the Inference System
--- Conjectures:
	len(insert(xts3, insert(xts2, cons(xts1, nil)))) = s(s(s(0)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))

+++ treating clause
	len(insert(xts3, insert(xts2, cons(xts1, nil)))) = s(s(s(0)))
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	xts3 <= xts2 = true => len(insert(xts1, cons(xts3, cons(xts2, nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(xts2, cons(xts3, nil)))) = s(s(s(0)))
+++ added new clause(s)
	xts3 <= xts2 = true => len(insert(xts1, cons(xts3, cons(xts2, nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(xts2, cons(xts3, nil)))) = s(s(s(0)))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 <= xts2 = true => len(insert(xts1, cons(xts3, cons(xts2, nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(xts2, cons(xts3, nil)))) = s(s(s(0)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))

+++ treating clause
	xts3 <= xts2 = true => len(insert(xts1, cons(xts3, cons(xts2, nil)))) = s(s(s(0)))
+++ inductive narrowing on conjecture
	xts3 <= xts2 = true => len(insert(xts1, cons(xts3, cons(xts2, nil)))) = s(s(s(0)))
... induction variables of
	xts3 <= xts2 = true => len(insert(xts1, cons(xts3, cons(xts2, nil)))) = s(s(s(0)))
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 <= xts2 = true => len(insert(xts1, cons(xts3, cons(xts2, nil)))) = s(s(s(0)))
... with variable xts2
+++ creating new conjecture
	xts2 <= 0 = true => len(insert(xts1, cons(xts2, cons(0, nil)))) = s(s(s(0)))
+++ creating new conjecture
	xts3 <= s(xts2) = true => len(insert(xts1, cons(xts3, cons(s(xts2), nil)))) = s(s(s(0)))
+++ inductive narrowing succeeded
--- clause
	xts3 <= xts2 = true => len(insert(xts1, cons(xts3, cons(xts2, nil)))) = s(s(s(0)))
... oriented to rule
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
+++ added new clause(s)
	xts2 <= 0 = true => len(insert(xts1, cons(xts2, cons(0, nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(xts3, cons(s(xts2), nil)))) = s(s(s(0)))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 <= xts2 = false => len(insert(xts1, cons(xts2, cons(xts3, nil)))) = s(s(s(0)))
	xts2 <= 0 = true => len(insert(xts1, cons(xts2, cons(0, nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(xts3, cons(s(xts2), nil)))) = s(s(s(0)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))

+++ treating clause
	xts3 <= xts2 = false => len(insert(xts1, cons(xts2, cons(xts3, nil)))) = s(s(s(0)))
+++ inductive narrowing on conjecture
	xts3 <= xts2 = false => len(insert(xts1, cons(xts2, cons(xts3, nil)))) = s(s(s(0)))
... induction variables of
	xts3 <= xts2 = false => len(insert(xts1, cons(xts2, cons(xts3, nil)))) = s(s(s(0)))
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 <= xts2 = false => len(insert(xts1, cons(xts2, cons(xts3, nil)))) = s(s(s(0)))
... with variable xts2
+++ creating new conjecture
	xts2 <= 0 = false => len(insert(xts1, cons(0, cons(xts2, nil)))) = s(s(s(0)))
+++ creating new conjecture
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(xts2), cons(xts3, nil)))) = s(s(s(0)))
+++ inductive narrowing succeeded
--- clause
	xts3 <= xts2 = false => len(insert(xts1, cons(xts2, cons(xts3, nil)))) = s(s(s(0)))
... oriented to rule
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
+++ added new clause(s)
	xts2 <= 0 = false => len(insert(xts1, cons(0, cons(xts2, nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(xts2), cons(xts3, nil)))) = s(s(s(0)))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= 0 = true => len(insert(xts1, cons(xts2, cons(0, nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(xts3, cons(s(xts2), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(0, cons(xts2, nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(xts2), cons(xts3, nil)))) = s(s(s(0)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))

+++ treating clause
	xts2 <= 0 = true => len(insert(xts1, cons(xts2, cons(0, nil)))) = s(s(s(0)))
+++ inductive narrowing on conjecture
	xts2 <= 0 = true => len(insert(xts1, cons(xts2, cons(0, nil)))) = s(s(s(0)))
... induction variables of
	xts2 <= 0 = true => len(insert(xts1, cons(xts2, cons(0, nil)))) = s(s(s(0)))
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= 0 = true => len(insert(xts1, cons(xts2, cons(0, nil)))) = s(s(s(0)))
... with variable xts2
+++ creating new conjecture
	0 <= 0 = true => len(insert(xts, cons(0, cons(0, nil)))) = s(s(s(0)))
+++ creating new conjecture
	s(xts2) <= 0 = true => len(insert(xts1, cons(s(xts2), cons(0, nil)))) = s(s(s(0)))
--- clause
	0 <= 0 = true => len(insert(xts, cons(0, cons(0, nil)))) = s(s(s(0)))
... reduced in 1 step to
	len(insert(xts, cons(0, cons(0, nil)))) = s(s(s(0)))
--- clause
	s(xts2) <= 0 = true => len(insert(xts1, cons(s(xts2), cons(0, nil)))) = s(s(s(0)))
... reduced in 1 step to
	false = true => len(insert(xts2, cons(s(xts1), cons(0, nil)))) = s(s(s(0)))
--- clause
	false = true => len(insert(xts2, cons(s(xts1), cons(0, nil)))) = s(s(s(0)))
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 <= 0 = true => len(insert(xts1, cons(xts2, cons(0, nil)))) = s(s(s(0)))
... oriented to rule
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
+++ added new clause(s)
	len(insert(xts, cons(0, cons(0, nil)))) = s(s(s(0)))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 <= s(xts2) = true => len(insert(xts1, cons(xts3, cons(s(xts2), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(0, cons(xts2, nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(xts2), cons(xts3, nil)))) = s(s(s(0)))
	len(insert(xts, cons(0, cons(0, nil)))) = s(s(s(0)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))

+++ treating clause
	xts3 <= s(xts2) = true => len(insert(xts1, cons(xts3, cons(s(xts2), nil)))) = s(s(s(0)))
+++ inductive narrowing on conjecture
	xts3 <= s(xts2) = true => len(insert(xts1, cons(xts3, cons(s(xts2), nil)))) = s(s(s(0)))
... induction variables of
	xts3 <= s(xts2) = true => len(insert(xts1, cons(xts3, cons(s(xts2), nil)))) = s(s(s(0)))
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 <= s(xts2) = true => len(insert(xts1, cons(xts3, cons(s(xts2), nil)))) = s(s(s(0)))
... with variable xts3
+++ creating new conjecture
	0 <= s(xts2) = true => len(insert(xts1, cons(0, cons(s(xts2), nil)))) = s(s(s(0)))
+++ creating new conjecture
	s(xts3) <= s(xts2) = true => len(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = s(s(s(0)))
--- clause
	0 <= s(xts2) = true => len(insert(xts1, cons(0, cons(s(xts2), nil)))) = s(s(s(0)))
... reduced in 1 step to
	len(insert(xts2, cons(0, cons(s(xts1), nil)))) = s(s(s(0)))
--- clause
	s(xts3) <= s(xts2) = true => len(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = s(s(s(0)))
... reduced in 1 step to
	xts3 <= xts2 = true => len(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = s(s(s(0)))
+++ inductive narrowing succeeded
--- clause
	xts3 <= s(xts2) = true => len(insert(xts1, cons(xts3, cons(s(xts2), nil)))) = s(s(s(0)))
... oriented to rule
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
+++ added new clause(s)
	len(insert(xts2, cons(0, cons(s(xts1), nil)))) = s(s(s(0)))
	xts3 <= xts2 = true => len(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = s(s(s(0)))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= 0 = false => len(insert(xts1, cons(0, cons(xts2, nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(xts2), cons(xts3, nil)))) = s(s(s(0)))
	len(insert(xts, cons(0, cons(0, nil)))) = s(s(s(0)))
	len(insert(xts2, cons(0, cons(s(xts1), nil)))) = s(s(s(0)))
	xts3 <= xts2 = true => len(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = s(s(s(0)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))

+++ treating clause
	xts2 <= 0 = false => len(insert(xts1, cons(0, cons(xts2, nil)))) = s(s(s(0)))
+++ inductive narrowing on conjecture
	xts2 <= 0 = false => len(insert(xts1, cons(0, cons(xts2, nil)))) = s(s(s(0)))
... induction variables of
	xts2 <= 0 = false => len(insert(xts1, cons(0, cons(xts2, nil)))) = s(s(s(0)))
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= 0 = false => len(insert(xts1, cons(0, cons(xts2, nil)))) = s(s(s(0)))
... with variable xts2
+++ creating new conjecture
	0 <= 0 = false => len(insert(xts, cons(0, cons(0, nil)))) = s(s(s(0)))
+++ creating new conjecture
	s(xts2) <= 0 = false => len(insert(xts1, cons(0, cons(s(xts2), nil)))) = s(s(s(0)))
--- clause
	0 <= 0 = false => len(insert(xts, cons(0, cons(0, nil)))) = s(s(s(0)))
... reduced in 1 step to
	true = false => len(insert(xts, cons(0, cons(0, nil)))) = s(s(s(0)))
--- clause
	true = false => len(insert(xts, cons(0, cons(0, nil)))) = s(s(s(0)))
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= 0 = false => len(insert(xts1, cons(0, cons(s(xts2), nil)))) = s(s(s(0)))
... reduced in 1 step to
	len(insert(xts2, cons(0, cons(s(xts1), nil)))) = s(s(s(0)))
--- clause
	len(insert(xts2, cons(0, cons(s(xts1), nil)))) = s(s(s(0)))
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	xts2 <= 0 = false => len(insert(xts1, cons(0, cons(xts2, nil)))) = s(s(s(0)))
... oriented to rule
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))

+++ Status of the Inference System
--- Conjectures:
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(xts2), cons(xts3, nil)))) = s(s(s(0)))
	len(insert(xts, cons(0, cons(0, nil)))) = s(s(s(0)))
	len(insert(xts2, cons(0, cons(s(xts1), nil)))) = s(s(s(0)))
	xts3 <= xts2 = true => len(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = s(s(s(0)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))

+++ treating clause
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(xts2), cons(xts3, nil)))) = s(s(s(0)))
+++ inductive narrowing on conjecture
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(xts2), cons(xts3, nil)))) = s(s(s(0)))
... induction variables of
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(xts2), cons(xts3, nil)))) = s(s(s(0)))
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(xts2), cons(xts3, nil)))) = s(s(s(0)))
... with variable xts3
+++ creating new conjecture
	0 <= s(xts2) = false => len(insert(xts1, cons(s(xts2), cons(0, nil)))) = s(s(s(0)))
+++ creating new conjecture
	s(xts3) <= s(xts2) = false => len(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = s(s(s(0)))
--- clause
	0 <= s(xts2) = false => len(insert(xts1, cons(s(xts2), cons(0, nil)))) = s(s(s(0)))
... reduced in 1 step to
	true = false => len(insert(xts2, cons(s(xts1), cons(0, nil)))) = s(s(s(0)))
--- clause
	true = false => len(insert(xts2, cons(s(xts1), cons(0, nil)))) = s(s(s(0)))
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts3) <= s(xts2) = false => len(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = s(s(s(0)))
... reduced in 1 step to
	xts3 <= xts2 = false => len(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = s(s(s(0)))
+++ inductive narrowing succeeded
--- clause
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(xts2), cons(xts3, nil)))) = s(s(s(0)))
... oriented to rule
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
+++ added new clause(s)
	xts3 <= xts2 = false => len(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = s(s(s(0)))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	len(insert(xts, cons(0, cons(0, nil)))) = s(s(s(0)))
	len(insert(xts2, cons(0, cons(s(xts1), nil)))) = s(s(s(0)))
	xts3 <= xts2 = true => len(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = s(s(s(0)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))

+++ treating clause
	len(insert(xts, cons(0, cons(0, nil)))) = s(s(s(0)))
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	xts <= 0 = false => len(cons(0, insert(xts, cons(0, nil)))) = s(s(s(0)))
	xts <= 0 = true => len(cons(xts, cons(0, cons(0, nil)))) = s(s(s(0)))
+++ added new clause(s)
	xts <= 0 = false => len(cons(0, insert(xts, cons(0, nil)))) = s(s(s(0)))
	xts <= 0 = true => len(cons(xts, cons(0, cons(0, nil)))) = s(s(s(0)))
... to conjectures
--- clause
	xts <= 0 = false => len(cons(0, insert(xts, cons(0, nil)))) = s(s(s(0)))
... reduced in 1 step to
	xts <= 0 = false => s(len(insert(xts, cons(0, nil)))) = s(s(s(0)))
--- clause
	xts <= 0 = true => len(cons(xts, cons(0, cons(0, nil)))) = s(s(s(0)))
... reduced to tautology
	xts <= 0 = true => s(s(s(0))) = s(s(s(0)))
... decomposed into new clause(s)
	len(insert(xts, cons(0, nil))) = s(s(0))
... decomposed into new clause(s)
	xts <= 0 = false => len(insert(xts, cons(0, nil))) = s(s(0))

+++ Status of the Inference System
--- Conjectures:
	len(insert(xts2, cons(0, cons(s(xts1), nil)))) = s(s(s(0)))
	xts3 <= xts2 = true => len(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = s(s(s(0)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) = s(s(0))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))

+++ treating clause
	len(insert(xts2, cons(0, cons(s(xts1), nil)))) = s(s(s(0)))
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	xts2 <= 0 = false => len(cons(0, insert(xts2, cons(s(xts1), nil)))) = s(s(s(0)))
	xts2 <= 0 = true => len(cons(xts2, cons(0, cons(s(xts1), nil)))) = s(s(s(0)))
+++ added new clause(s)
	xts2 <= 0 = false => len(cons(0, insert(xts2, cons(s(xts1), nil)))) = s(s(s(0)))
	xts2 <= 0 = true => len(cons(xts2, cons(0, cons(s(xts1), nil)))) = s(s(s(0)))
... to conjectures
--- clause
	xts2 <= 0 = false => len(cons(0, insert(xts2, cons(s(xts1), nil)))) = s(s(s(0)))
... reduced in 1 step to
	xts2 <= 0 = false => s(len(insert(xts2, cons(s(xts1), nil)))) = s(s(s(0)))
--- clause
	xts2 <= 0 = true => len(cons(xts2, cons(0, cons(s(xts1), nil)))) = s(s(s(0)))
... reduced to tautology
	xts <= 0 = true => s(s(s(0))) = s(s(s(0)))
... decomposed into new clause(s)
	len(insert(xts2, cons(s(xts1), nil))) = s(s(0))
... decomposed into new clause(s)
	xts2 <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) = s(s(0))

+++ Status of the Inference System
--- Conjectures:
	xts3 <= xts2 = true => len(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = s(s(s(0)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) = s(s(0))
	xts2 <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) = s(s(0))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))

+++ treating clause
	xts3 <= xts2 = true => len(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = s(s(s(0)))
+++ inductive narrowing on conjecture
	xts3 <= xts2 = true => len(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = s(s(s(0)))
... induction variables of
	xts3 <= xts2 = true => len(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = s(s(s(0)))
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 <= xts2 = true => len(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = s(s(s(0)))
... with variable xts2
+++ creating new conjecture
	xts2 <= 0 = true => len(insert(xts1, cons(s(xts2), cons(s(0), nil)))) = s(s(s(0)))
+++ creating new conjecture
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(xts3), cons(s(s(xts2)), nil)))) = s(s(s(0)))
+++ inductive narrowing succeeded
--- clause
	xts3 <= xts2 = true => len(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = s(s(s(0)))
... oriented to rule
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
+++ added new clause(s)
	xts2 <= 0 = true => len(insert(xts1, cons(s(xts2), cons(s(0), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(xts3), cons(s(s(xts2)), nil)))) = s(s(s(0)))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 <= xts2 = false => len(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = s(s(s(0)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) = s(s(0))
	xts2 <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) = s(s(0))
	xts2 <= 0 = true => len(insert(xts1, cons(s(xts2), cons(s(0), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(xts3), cons(s(s(xts2)), nil)))) = s(s(s(0)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))

+++ treating clause
	xts3 <= xts2 = false => len(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = s(s(s(0)))
+++ inductive narrowing on conjecture
	xts3 <= xts2 = false => len(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = s(s(s(0)))
... induction variables of
	xts3 <= xts2 = false => len(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = s(s(s(0)))
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 <= xts2 = false => len(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = s(s(s(0)))
... with variable xts2
+++ creating new conjecture
	xts2 <= 0 = false => len(insert(xts1, cons(s(0), cons(s(xts2), nil)))) = s(s(s(0)))
+++ creating new conjecture
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(xts2)), cons(s(xts3), nil)))) = s(s(s(0)))
+++ inductive narrowing succeeded
--- clause
	xts3 <= xts2 = false => len(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = s(s(s(0)))
... oriented to rule
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
+++ added new clause(s)
	xts2 <= 0 = false => len(insert(xts1, cons(s(0), cons(s(xts2), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(xts2)), cons(s(xts3), nil)))) = s(s(s(0)))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts <= 0 = false => len(insert(xts, cons(0, nil))) = s(s(0))
	xts2 <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) = s(s(0))
	xts2 <= 0 = true => len(insert(xts1, cons(s(xts2), cons(s(0), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(xts3), cons(s(s(xts2)), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(s(0), cons(s(xts2), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(xts2)), cons(s(xts3), nil)))) = s(s(s(0)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))

+++ treating clause
	xts <= 0 = false => len(insert(xts, cons(0, nil))) = s(s(0))
+++ inductive narrowing on conjecture
	xts <= 0 = false => len(insert(xts, cons(0, nil))) = s(s(0))
... induction variables of
	xts <= 0 = false => len(insert(xts, cons(0, nil))) = s(s(0))
... are:
	xts:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts <= 0 = false => len(insert(xts, cons(0, nil))) = s(s(0))
... with variable xts
+++ creating new conjecture
	0 <= 0 = false => len(insert(0, cons(0, nil))) = s(s(0))
+++ creating new conjecture
	s(xts) <= 0 = false => len(insert(s(xts), cons(0, nil))) = s(s(0))
--- clause
	0 <= 0 = false => len(insert(0, cons(0, nil))) = s(s(0))
... reduced in 1 step to
	true = false => len(insert(0, cons(0, nil))) = s(s(0))
--- clause
	true = false => len(insert(0, cons(0, nil))) = s(s(0))
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts) <= 0 = false => len(insert(s(xts), cons(0, nil))) = s(s(0))
... reduced in 1 step to
	len(insert(s(xts), cons(0, nil))) = s(s(0))
+++ inductive narrowing succeeded
--- clause
	xts <= 0 = false => len(insert(xts, cons(0, nil))) = s(s(0))
... oriented to rule
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
+++ added new clause(s)
	len(insert(s(xts), cons(0, nil))) = s(s(0))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) = s(s(0))
	xts2 <= 0 = true => len(insert(xts1, cons(s(xts2), cons(s(0), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(xts3), cons(s(s(xts2)), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(s(0), cons(s(xts2), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(xts2)), cons(s(xts3), nil)))) = s(s(s(0)))
	len(insert(s(xts), cons(0, nil))) = s(s(0))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))

+++ treating clause
	xts2 <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) = s(s(0))
+++ inductive narrowing on conjecture
	xts2 <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) = s(s(0))
... induction variables of
	xts2 <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) = s(s(0))
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) = s(s(0))
... with variable xts2
+++ creating new conjecture
	0 <= 0 = false => len(insert(0, cons(s(xts), nil))) = s(s(0))
+++ creating new conjecture
	s(xts2) <= 0 = false => len(insert(s(xts2), cons(s(xts1), nil))) = s(s(0))
--- clause
	0 <= 0 = false => len(insert(0, cons(s(xts), nil))) = s(s(0))
... reduced in 1 step to
	true = false => len(insert(0, cons(s(xts), nil))) = s(s(0))
--- clause
	true = false => len(insert(0, cons(s(xts), nil))) = s(s(0))
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= 0 = false => len(insert(s(xts2), cons(s(xts1), nil))) = s(s(0))
... reduced in 1 step to
	len(insert(s(xts2), cons(s(xts1), nil))) = s(s(0))
+++ inductive narrowing succeeded
--- clause
	xts2 <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) = s(s(0))
... oriented to rule
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
+++ added new clause(s)
	len(insert(s(xts2), cons(s(xts1), nil))) = s(s(0))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= 0 = true => len(insert(xts1, cons(s(xts2), cons(s(0), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(xts3), cons(s(s(xts2)), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(s(0), cons(s(xts2), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(xts2)), cons(s(xts3), nil)))) = s(s(s(0)))
	len(insert(s(xts), cons(0, nil))) = s(s(0))
	len(insert(s(xts2), cons(s(xts1), nil))) = s(s(0))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))

+++ treating clause
	xts2 <= 0 = true => len(insert(xts1, cons(s(xts2), cons(s(0), nil)))) = s(s(s(0)))
+++ inductive narrowing on conjecture
	xts2 <= 0 = true => len(insert(xts1, cons(s(xts2), cons(s(0), nil)))) = s(s(s(0)))
... induction variables of
	xts2 <= 0 = true => len(insert(xts1, cons(s(xts2), cons(s(0), nil)))) = s(s(s(0)))
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= 0 = true => len(insert(xts1, cons(s(xts2), cons(s(0), nil)))) = s(s(s(0)))
... with variable xts2
+++ creating new conjecture
	0 <= 0 = true => len(insert(xts, cons(s(0), cons(s(0), nil)))) = s(s(s(0)))
+++ creating new conjecture
	s(xts2) <= 0 = true => len(insert(xts1, cons(s(s(xts2)), cons(s(0), nil)))) = s(s(s(0)))
--- clause
	0 <= 0 = true => len(insert(xts, cons(s(0), cons(s(0), nil)))) = s(s(s(0)))
... reduced in 1 step to
	len(insert(xts, cons(s(0), cons(s(0), nil)))) = s(s(s(0)))
--- clause
	s(xts2) <= 0 = true => len(insert(xts1, cons(s(s(xts2)), cons(s(0), nil)))) = s(s(s(0)))
... reduced in 1 step to
	false = true => len(insert(xts2, cons(s(s(xts1)), cons(s(0), nil)))) = s(s(s(0)))
--- clause
	false = true => len(insert(xts2, cons(s(s(xts1)), cons(s(0), nil)))) = s(s(s(0)))
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 <= 0 = true => len(insert(xts1, cons(s(xts2), cons(s(0), nil)))) = s(s(s(0)))
... oriented to rule
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
+++ added new clause(s)
	len(insert(xts, cons(s(0), cons(s(0), nil)))) = s(s(s(0)))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(xts3), cons(s(s(xts2)), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(s(0), cons(s(xts2), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(xts2)), cons(s(xts3), nil)))) = s(s(s(0)))
	len(insert(s(xts), cons(0, nil))) = s(s(0))
	len(insert(s(xts2), cons(s(xts1), nil))) = s(s(0))
	len(insert(xts, cons(s(0), cons(s(0), nil)))) = s(s(s(0)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))

+++ treating clause
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(xts3), cons(s(s(xts2)), nil)))) = s(s(s(0)))
+++ inductive narrowing on conjecture
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(xts3), cons(s(s(xts2)), nil)))) = s(s(s(0)))
... induction variables of
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(xts3), cons(s(s(xts2)), nil)))) = s(s(s(0)))
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(xts3), cons(s(s(xts2)), nil)))) = s(s(s(0)))
... with variable xts3
+++ creating new conjecture
	0 <= s(xts2) = true => len(insert(xts1, cons(s(0), cons(s(s(xts2)), nil)))) = s(s(s(0)))
+++ creating new conjecture
	s(xts3) <= s(xts2) = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
--- clause
	0 <= s(xts2) = true => len(insert(xts1, cons(s(0), cons(s(s(xts2)), nil)))) = s(s(s(0)))
... reduced in 1 step to
	len(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = s(s(s(0)))
--- clause
	s(xts3) <= s(xts2) = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
... reduced in 1 step to
	xts3 <= xts2 = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
+++ inductive narrowing succeeded
--- clause
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(xts3), cons(s(s(xts2)), nil)))) = s(s(s(0)))
... oriented to rule
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
+++ added new clause(s)
	len(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = s(s(s(0)))
	xts3 <= xts2 = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= 0 = false => len(insert(xts1, cons(s(0), cons(s(xts2), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(xts2)), cons(s(xts3), nil)))) = s(s(s(0)))
	len(insert(s(xts), cons(0, nil))) = s(s(0))
	len(insert(s(xts2), cons(s(xts1), nil))) = s(s(0))
	len(insert(xts, cons(s(0), cons(s(0), nil)))) = s(s(s(0)))
	len(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = s(s(s(0)))
	xts3 <= xts2 = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))

+++ treating clause
	xts2 <= 0 = false => len(insert(xts1, cons(s(0), cons(s(xts2), nil)))) = s(s(s(0)))
+++ inductive narrowing on conjecture
	xts2 <= 0 = false => len(insert(xts1, cons(s(0), cons(s(xts2), nil)))) = s(s(s(0)))
... induction variables of
	xts2 <= 0 = false => len(insert(xts1, cons(s(0), cons(s(xts2), nil)))) = s(s(s(0)))
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= 0 = false => len(insert(xts1, cons(s(0), cons(s(xts2), nil)))) = s(s(s(0)))
... with variable xts2
+++ creating new conjecture
	0 <= 0 = false => len(insert(xts, cons(s(0), cons(s(0), nil)))) = s(s(s(0)))
+++ creating new conjecture
	s(xts2) <= 0 = false => len(insert(xts1, cons(s(0), cons(s(s(xts2)), nil)))) = s(s(s(0)))
--- clause
	0 <= 0 = false => len(insert(xts, cons(s(0), cons(s(0), nil)))) = s(s(s(0)))
... reduced in 1 step to
	true = false => len(insert(xts, cons(s(0), cons(s(0), nil)))) = s(s(s(0)))
--- clause
	true = false => len(insert(xts, cons(s(0), cons(s(0), nil)))) = s(s(s(0)))
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= 0 = false => len(insert(xts1, cons(s(0), cons(s(s(xts2)), nil)))) = s(s(s(0)))
... reduced in 1 step to
	len(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = s(s(s(0)))
--- clause
	len(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = s(s(s(0)))
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	xts2 <= 0 = false => len(insert(xts1, cons(s(0), cons(s(xts2), nil)))) = s(s(s(0)))
... oriented to rule
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))

+++ Status of the Inference System
--- Conjectures:
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(xts2)), cons(s(xts3), nil)))) = s(s(s(0)))
	len(insert(s(xts), cons(0, nil))) = s(s(0))
	len(insert(s(xts2), cons(s(xts1), nil))) = s(s(0))
	len(insert(xts, cons(s(0), cons(s(0), nil)))) = s(s(s(0)))
	len(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = s(s(s(0)))
	xts3 <= xts2 = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))

+++ treating clause
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(xts2)), cons(s(xts3), nil)))) = s(s(s(0)))
+++ inductive narrowing on conjecture
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(xts2)), cons(s(xts3), nil)))) = s(s(s(0)))
... induction variables of
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(xts2)), cons(s(xts3), nil)))) = s(s(s(0)))
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(xts2)), cons(s(xts3), nil)))) = s(s(s(0)))
... with variable xts3
+++ creating new conjecture
	0 <= s(xts2) = false => len(insert(xts1, cons(s(s(xts2)), cons(s(0), nil)))) = s(s(s(0)))
+++ creating new conjecture
	s(xts3) <= s(xts2) = false => len(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = s(s(s(0)))
--- clause
	0 <= s(xts2) = false => len(insert(xts1, cons(s(s(xts2)), cons(s(0), nil)))) = s(s(s(0)))
... reduced in 1 step to
	true = false => len(insert(xts2, cons(s(s(xts1)), cons(s(0), nil)))) = s(s(s(0)))
--- clause
	true = false => len(insert(xts2, cons(s(s(xts1)), cons(s(0), nil)))) = s(s(s(0)))
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts3) <= s(xts2) = false => len(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = s(s(s(0)))
... reduced in 1 step to
	xts3 <= xts2 = false => len(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = s(s(s(0)))
+++ inductive narrowing succeeded
--- clause
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(xts2)), cons(s(xts3), nil)))) = s(s(s(0)))
... oriented to rule
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
+++ added new clause(s)
	xts3 <= xts2 = false => len(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = s(s(s(0)))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	len(insert(s(xts), cons(0, nil))) = s(s(0))
	len(insert(s(xts2), cons(s(xts1), nil))) = s(s(0))
	len(insert(xts, cons(s(0), cons(s(0), nil)))) = s(s(s(0)))
	len(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = s(s(s(0)))
	xts3 <= xts2 = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = s(s(s(0)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))

+++ treating clause
	len(insert(s(xts), cons(0, nil))) = s(s(0))
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	len(cons(0, cons(s(xts), nil))) = s(s(0))
	false = true => len(cons(s(xts), cons(0, nil))) = s(s(0))
+++ added new clause(s)
	len(cons(0, cons(s(xts), nil))) = s(s(0))
	false = true => len(cons(s(xts), cons(0, nil))) = s(s(0))
... to conjectures
--- clause
	len(cons(0, cons(s(xts), nil))) = s(s(0))
... reduced to tautology
	s(s(0)) = s(s(0))
--- clause
	false = true => len(cons(s(xts), cons(0, nil))) = s(s(0))
... reduced to tautology
	false = true => s(s(0)) = s(s(0))

+++ Status of the Inference System
--- Conjectures:
	len(insert(s(xts2), cons(s(xts1), nil))) = s(s(0))
	len(insert(xts, cons(s(0), cons(s(0), nil)))) = s(s(s(0)))
	len(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = s(s(s(0)))
	xts3 <= xts2 = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = s(s(s(0)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))

+++ treating clause
	len(insert(s(xts2), cons(s(xts1), nil))) = s(s(0))
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	xts2 <= xts1 = false => len(cons(s(xts1), cons(s(xts2), nil))) = s(s(0))
	xts2 <= xts1 = true => len(cons(s(xts2), cons(s(xts1), nil))) = s(s(0))
+++ added new clause(s)
	xts2 <= xts1 = false => len(cons(s(xts1), cons(s(xts2), nil))) = s(s(0))
	xts2 <= xts1 = true => len(cons(s(xts2), cons(s(xts1), nil))) = s(s(0))
... to conjectures
--- clause
	xts2 <= xts1 = false => len(cons(s(xts1), cons(s(xts2), nil))) = s(s(0))
... reduced to tautology
	xts2 <= xts1 = false => s(s(0)) = s(s(0))
--- clause
	xts2 <= xts1 = true => len(cons(s(xts2), cons(s(xts1), nil))) = s(s(0))
... reduced to tautology
	xts2 <= xts1 = true => s(s(0)) = s(s(0))

+++ Status of the Inference System
--- Conjectures:
	len(insert(xts, cons(s(0), cons(s(0), nil)))) = s(s(s(0)))
	len(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = s(s(s(0)))
	xts3 <= xts2 = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = s(s(s(0)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))

+++ treating clause
	len(insert(xts, cons(s(0), cons(s(0), nil)))) = s(s(s(0)))
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	xts <= s(0) = false => len(cons(s(0), insert(xts, cons(s(0), nil)))) = s(s(s(0)))
	xts <= s(0) = true => len(cons(xts, cons(s(0), cons(s(0), nil)))) = s(s(s(0)))
+++ added new clause(s)
	xts <= s(0) = false => len(cons(s(0), insert(xts, cons(s(0), nil)))) = s(s(s(0)))
	xts <= s(0) = true => len(cons(xts, cons(s(0), cons(s(0), nil)))) = s(s(s(0)))
... to conjectures
--- clause
	xts <= s(0) = false => len(cons(s(0), insert(xts, cons(s(0), nil)))) = s(s(s(0)))
... reduced in 1 step to
	xts <= s(0) = false => s(len(insert(xts, cons(s(0), nil)))) = s(s(s(0)))
--- clause
	xts <= s(0) = true => len(cons(xts, cons(s(0), cons(s(0), nil)))) = s(s(s(0)))
... reduced to tautology
	xts <= s(0) = true => s(s(s(0))) = s(s(s(0)))
... decomposed into new clause(s)
	len(insert(xts, cons(s(0), nil))) = s(s(0))
... decomposed into new clause(s)
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) = s(s(0))

+++ Status of the Inference System
--- Conjectures:
	len(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = s(s(s(0)))
	xts3 <= xts2 = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = s(s(s(0)))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) = s(s(0))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))

+++ treating clause
	len(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = s(s(s(0)))
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	xts2 <= s(0) = false => len(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = s(s(s(0)))
	xts2 <= s(0) = true => len(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = s(s(s(0)))
+++ added new clause(s)
	xts2 <= s(0) = false => len(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = s(s(s(0)))
	xts2 <= s(0) = true => len(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = s(s(s(0)))
... to conjectures
--- clause
	xts2 <= s(0) = false => len(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = s(s(s(0)))
... reduced in 1 step to
	xts2 <= s(0) = false => s(len(insert(xts2, cons(s(s(xts1)), nil)))) = s(s(s(0)))
--- clause
	xts2 <= s(0) = true => len(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = s(s(s(0)))
... reduced to tautology
	xts <= s(0) = true => s(s(s(0))) = s(s(s(0)))
... decomposed into new clause(s)
	len(insert(xts2, cons(s(s(xts1)), nil))) = s(s(0))
... decomposed into new clause(s)
	xts2 <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) = s(s(0))

+++ Status of the Inference System
--- Conjectures:
	xts3 <= xts2 = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = s(s(s(0)))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) = s(s(0))
	xts2 <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) = s(s(0))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))

+++ treating clause
	xts3 <= xts2 = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
+++ inductive narrowing on conjecture
	xts3 <= xts2 = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
... induction variables of
	xts3 <= xts2 = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 <= xts2 = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
... with variable xts2
+++ creating new conjecture
	xts2 <= 0 = true => len(insert(xts1, cons(s(s(xts2)), cons(s(s(0)), nil)))) = s(s(s(0)))
+++ creating new conjecture
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(s(xts2))), nil)))) = s(s(s(0)))
+++ inductive narrowing succeeded
--- clause
	xts3 <= xts2 = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
... oriented to rule
	xts2 <= xts1 = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
+++ added new clause(s)
	xts2 <= 0 = true => len(insert(xts1, cons(s(s(xts2)), cons(s(s(0)), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(s(xts2))), nil)))) = s(s(s(0)))
... to conjectures
+++ active wrap
	xts3 <= xts2 = true => len(insert(xts1, cons(., cons(., nil)))) = s(s(s(0)))
... with sequence
	xts3 <= xts2 = true => len(insert(xts1, cons(xts3, cons(xts2, nil)))) = s(s(s(0)))
	xts3 <= xts2 = true => len(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
+++ primal grammar found for head
	{0, <=, cons, insert, len, nil, s, true}
... and wrap
	xts3 <= xts2 = true => len(insert(xts1, cons(., cons(., nil)))) = s(s(s(0)))
+++ Presburger system  = {
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
+++ }
+++ Lemma(s)           = 
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))

+++ Status of the Inference System
--- Conjectures:
	xts3 <= xts2 = false => len(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = s(s(s(0)))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) = s(s(0))
	xts2 <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) = s(s(0))
	xts2 <= 0 = true => len(insert(xts1, cons(s(s(xts2)), cons(s(s(0)), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(s(xts2))), nil)))) = s(s(s(0)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))

+++ treating clause
	xts3 <= xts2 = false => len(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = s(s(s(0)))
+++ inductive narrowing on conjecture
	xts3 <= xts2 = false => len(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = s(s(s(0)))
... induction variables of
	xts3 <= xts2 = false => len(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = s(s(s(0)))
... are:
	xts2:nat
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 <= xts2 = false => len(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = s(s(s(0)))
... with variable xts2
+++ creating new conjecture
	xts2 <= 0 = false => len(insert(xts1, cons(s(s(0)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
+++ creating new conjecture
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(s(xts2))), cons(s(s(xts3)), nil)))) = s(s(s(0)))
+++ inductive narrowing succeeded
--- clause
	xts3 <= xts2 = false => len(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = s(s(s(0)))
... oriented to rule
	xts2 <= xts1 = false => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
+++ added new clause(s)
	xts2 <= 0 = false => len(insert(xts1, cons(s(s(0)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(s(xts2))), cons(s(s(xts3)), nil)))) = s(s(s(0)))
... to conjectures
+++ active wrap
	xts3 <= xts2 = false => len(insert(xts1, cons(., cons(., nil)))) = s(s(s(0)))
... with sequence
	xts3 <= xts2 = false => len(insert(xts1, cons(xts2, cons(xts3, nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = s(s(s(0)))
+++ primal grammar found for head
	{0, <=, cons, false, insert, len, nil, s}
... and wrap
	xts3 <= xts2 = false => len(insert(xts1, cons(., cons(., nil)))) = s(s(s(0)))
+++ Presburger system  = {
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
+++ }
+++ Lemma(s)           = 
	xts3 <= xts2 = false => len(insert(xts1, cons(^f5($n; xts2), cons(^f5($n; xts3), nil)))) = s(s(s(0)))

+++ Status of the Inference System
--- Conjectures:
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) = s(s(0))
	xts2 <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) = s(s(0))
	xts2 <= 0 = true => len(insert(xts1, cons(s(s(xts2)), cons(s(s(0)), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(s(xts2))), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(s(s(0)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(s(xts2))), cons(s(s(xts3)), nil)))) = s(s(s(0)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(^f5($n; xts2), cons(^f5($n; xts3), nil)))) = s(s(s(0)))

+++ treating clause
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) = s(s(0))
+++ inductive narrowing on conjecture
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) = s(s(0))
... induction variables of
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) = s(s(0))
... are:
	xts:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) = s(s(0))
... with variable xts
+++ creating new conjecture
	0 <= s(0) = false => len(insert(0, cons(s(0), nil))) = s(s(0))
+++ creating new conjecture
	s(xts) <= s(0) = false => len(insert(s(xts), cons(s(0), nil))) = s(s(0))
--- clause
	0 <= s(0) = false => len(insert(0, cons(s(0), nil))) = s(s(0))
... reduced in 1 step to
	true = false => len(insert(0, cons(s(0), nil))) = s(s(0))
--- clause
	true = false => len(insert(0, cons(s(0), nil))) = s(s(0))
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts) <= s(0) = false => len(insert(s(xts), cons(s(0), nil))) = s(s(0))
... reduced in 1 step to
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) = s(s(0))
+++ inductive narrowing succeeded
--- clause
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) = s(s(0))
... oriented to rule
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) -> s(s(0))
+++ added new clause(s)
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) = s(s(0))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) = s(s(0))
	xts2 <= 0 = true => len(insert(xts1, cons(s(s(xts2)), cons(s(s(0)), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(s(xts2))), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(s(s(0)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(s(xts2))), cons(s(s(xts3)), nil)))) = s(s(s(0)))
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) = s(s(0))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(^f5($n; xts2), cons(^f5($n; xts3), nil)))) = s(s(s(0)))

+++ treating clause
	xts2 <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) = s(s(0))
+++ inductive narrowing on conjecture
	xts2 <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) = s(s(0))
... induction variables of
	xts2 <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) = s(s(0))
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) = s(s(0))
... with variable xts2
+++ creating new conjecture
	0 <= s(0) = false => len(insert(0, cons(s(s(xts)), nil))) = s(s(0))
+++ creating new conjecture
	s(xts2) <= s(0) = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) = s(s(0))
--- clause
	0 <= s(0) = false => len(insert(0, cons(s(s(xts)), nil))) = s(s(0))
... reduced in 1 step to
	true = false => len(insert(0, cons(s(s(xts)), nil))) = s(s(0))
--- clause
	true = false => len(insert(0, cons(s(s(xts)), nil))) = s(s(0))
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(0) = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) = s(s(0))
... reduced in 1 step to
	xts2 <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) = s(s(0))
+++ inductive narrowing succeeded
--- clause
	xts2 <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) = s(s(0))
... oriented to rule
	xts <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) -> s(s(0))
+++ added new clause(s)
	xts2 <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) = s(s(0))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= 0 = true => len(insert(xts1, cons(s(s(xts2)), cons(s(s(0)), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(s(xts2))), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(s(s(0)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(s(xts2))), cons(s(s(xts3)), nil)))) = s(s(s(0)))
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) = s(s(0))
	xts2 <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) = s(s(0))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(^f5($n; xts2), cons(^f5($n; xts3), nil)))) = s(s(s(0)))

+++ treating clause
	xts2 <= 0 = true => len(insert(xts1, cons(s(s(xts2)), cons(s(s(0)), nil)))) = s(s(s(0)))
+++ inductive narrowing on conjecture
	xts2 <= 0 = true => len(insert(xts1, cons(s(s(xts2)), cons(s(s(0)), nil)))) = s(s(s(0)))
... induction variables of
	xts2 <= 0 = true => len(insert(xts1, cons(s(s(xts2)), cons(s(s(0)), nil)))) = s(s(s(0)))
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= 0 = true => len(insert(xts1, cons(s(s(xts2)), cons(s(s(0)), nil)))) = s(s(s(0)))
... with variable xts2
+++ creating new conjecture
	0 <= 0 = true => len(insert(xts, cons(s(s(0)), cons(s(s(0)), nil)))) = s(s(s(0)))
+++ creating new conjecture
	s(xts2) <= 0 = true => len(insert(xts1, cons(s(s(s(xts2))), cons(s(s(0)), nil)))) = s(s(s(0)))
--- clause
	0 <= 0 = true => len(insert(xts, cons(s(s(0)), cons(s(s(0)), nil)))) = s(s(s(0)))
... reduced in 1 step to
	len(insert(xts, cons(s(s(0)), cons(s(s(0)), nil)))) = s(s(s(0)))
--- clause
	s(xts2) <= 0 = true => len(insert(xts1, cons(s(s(s(xts2))), cons(s(s(0)), nil)))) = s(s(s(0)))
... reduced in 1 step to
	false = true => len(insert(xts2, cons(s(s(s(xts1))), cons(s(s(0)), nil)))) = s(s(s(0)))
--- clause
	false = true => len(insert(xts2, cons(s(s(s(xts1))), cons(s(s(0)), nil)))) = s(s(s(0)))
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 <= 0 = true => len(insert(xts1, cons(s(s(xts2)), cons(s(s(0)), nil)))) = s(s(s(0)))
... oriented to rule
	xts <= 0 = true => len(insert(xts2, cons(s(s(xts1)), cons(s(s(0)), nil)))) -> s(s(s(0)))
+++ added new clause(s)
	len(insert(xts, cons(s(s(0)), cons(s(s(0)), nil)))) = s(s(s(0)))
... to conjectures
+++ active wrap
	xts2 <= 0 = true => len(insert(xts1, cons(., cons(., nil)))) = s(s(s(0)))
... with sequence
	xts2 <= 0 = true => len(insert(xts1, cons(xts2, cons(0, nil)))) = s(s(s(0)))
	xts2 <= 0 = true => len(insert(xts1, cons(s(xts2), cons(s(0), nil)))) = s(s(s(0)))
	xts2 <= 0 = true => len(insert(xts1, cons(s(s(xts2)), cons(s(s(0)), nil)))) = s(s(s(0)))
+++ primal grammar found for head
	{0, <=, cons, insert, len, nil, s, true}
... and wrap
	xts2 <= 0 = true => len(insert(xts1, cons(., cons(., nil)))) = s(s(s(0)))
+++ Presburger system  = {
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
	^f9(0) -> 0
	^f9($n9 + 1) -> s(^f9($n9))
+++ }
+++ Lemma(s)           = 
	xts2 <= 0 = true => len(insert(xts1, cons(^f5($n; xts2), cons(^f9($n), nil)))) = s(s(s(0)))

+++ Status of the Inference System
--- Conjectures:
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(s(xts2))), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(s(s(0)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(s(xts2))), cons(s(s(xts3)), nil)))) = s(s(s(0)))
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) = s(s(0))
	xts2 <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) = s(s(0))
	len(insert(xts, cons(s(s(0)), cons(s(s(0)), nil)))) = s(s(s(0)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts <= 0 = true => len(insert(xts2, cons(s(s(xts1)), cons(s(s(0)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
	^f9(0) -> 0
	^f9($n9 + 1) -> s(^f9($n9))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(^f5($n; xts2), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts2 <= 0 = true => len(insert(xts1, cons(^f5($n; xts2), cons(^f9($n), nil)))) = s(s(s(0)))

+++ treating clause
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(s(xts2))), nil)))) = s(s(s(0)))
+++ inductive narrowing on conjecture
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(s(xts2))), nil)))) = s(s(s(0)))
... induction variables of
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(s(xts2))), nil)))) = s(s(s(0)))
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(s(xts2))), nil)))) = s(s(s(0)))
... with variable xts3
+++ creating new conjecture
	0 <= s(xts2) = true => len(insert(xts1, cons(s(s(0)), cons(s(s(s(xts2))), nil)))) = s(s(s(0)))
+++ creating new conjecture
	s(xts3) <= s(xts2) = true => len(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = s(s(s(0)))
--- clause
	0 <= s(xts2) = true => len(insert(xts1, cons(s(s(0)), cons(s(s(s(xts2))), nil)))) = s(s(s(0)))
... reduced in 1 step to
	len(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = s(s(s(0)))
--- clause
	s(xts3) <= s(xts2) = true => len(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = s(s(s(0)))
... reduced in 1 step to
	xts3 <= xts2 = true => len(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = s(s(s(0)))
--- clause
	xts3 <= xts2 = true => len(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = s(s(s(0)))
... subsumed by lemma
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
... with substitution
	$n <- 3
+++ inductive narrowing succeeded
--- clause
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(s(xts2))), nil)))) = s(s(s(0)))
... oriented to rule
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> s(s(s(0)))
+++ added new clause(s)
	len(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = s(s(s(0)))
... to conjectures
+++ active wrap
	xts3 <= s(xts2) = true => len(insert(xts1, cons(., cons(s(.), nil)))) = s(s(s(0)))
... with sequence
	xts3 <= s(xts2) = true => len(insert(xts1, cons(xts3, cons(s(xts2), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(xts3), cons(s(s(xts2)), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(s(s(xts3)), cons(s(s(s(xts2))), nil)))) = s(s(s(0)))
+++ primal grammar found for head
	{0, <=, cons, insert, len, nil, s, true}
... and wrap
	xts3 <= s(xts2) = true => len(insert(xts1, cons(., cons(s(.), nil)))) = s(s(s(0)))
+++ Presburger system  = {
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
+++ }
+++ Lemma(s)           = 
	xts3 <= s(xts2) = true => len(insert(xts1, cons(^f5($n; xts3), cons(s(^f5($n; xts2)), nil)))) = s(s(s(0)))

+++ Status of the Inference System
--- Conjectures:
	xts2 <= 0 = false => len(insert(xts1, cons(s(s(0)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(s(xts2))), cons(s(s(xts3)), nil)))) = s(s(s(0)))
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) = s(s(0))
	xts2 <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) = s(s(0))
	len(insert(xts, cons(s(s(0)), cons(s(s(0)), nil)))) = s(s(s(0)))
	len(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = s(s(s(0)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts <= 0 = true => len(insert(xts2, cons(s(s(xts1)), cons(s(s(0)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
	^f9(0) -> 0
	^f9($n9 + 1) -> s(^f9($n9))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(^f5($n; xts2), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts2 <= 0 = true => len(insert(xts1, cons(^f5($n; xts2), cons(^f9($n), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(^f5($n; xts3), cons(s(^f5($n; xts2)), nil)))) = s(s(s(0)))

+++ treating clause
	xts2 <= 0 = false => len(insert(xts1, cons(s(s(0)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
+++ inductive narrowing on conjecture
	xts2 <= 0 = false => len(insert(xts1, cons(s(s(0)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
... induction variables of
	xts2 <= 0 = false => len(insert(xts1, cons(s(s(0)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= 0 = false => len(insert(xts1, cons(s(s(0)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
... with variable xts2
+++ creating new conjecture
	0 <= 0 = false => len(insert(xts, cons(s(s(0)), cons(s(s(0)), nil)))) = s(s(s(0)))
+++ creating new conjecture
	s(xts2) <= 0 = false => len(insert(xts1, cons(s(s(0)), cons(s(s(s(xts2))), nil)))) = s(s(s(0)))
--- clause
	0 <= 0 = false => len(insert(xts, cons(s(s(0)), cons(s(s(0)), nil)))) = s(s(s(0)))
... reduced in 1 step to
	true = false => len(insert(xts, cons(s(s(0)), cons(s(s(0)), nil)))) = s(s(s(0)))
--- clause
	true = false => len(insert(xts, cons(s(s(0)), cons(s(s(0)), nil)))) = s(s(s(0)))
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= 0 = false => len(insert(xts1, cons(s(s(0)), cons(s(s(s(xts2))), nil)))) = s(s(s(0)))
... reduced in 1 step to
	len(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = s(s(s(0)))
--- clause
	len(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = s(s(s(0)))
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	xts2 <= 0 = false => len(insert(xts1, cons(s(s(0)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
... oriented to rule
	xts <= 0 = false => len(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
+++ active wrap
	xts2 <= 0 = false => len(insert(xts1, cons(., cons(., nil)))) = s(s(s(0)))
... with sequence
	xts2 <= 0 = false => len(insert(xts1, cons(0, cons(xts2, nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(s(0), cons(s(xts2), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(s(s(0)), cons(s(s(xts2)), nil)))) = s(s(s(0)))
+++ primal grammar found for head
	{0, <=, cons, false, insert, len, nil, s}
... and wrap
	xts2 <= 0 = false => len(insert(xts1, cons(., cons(., nil)))) = s(s(s(0)))
+++ Presburger system  = {
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
	^f9(0) -> 0
	^f9($n9 + 1) -> s(^f9($n9))
+++ }
+++ Lemma(s)           = 
	xts2 <= 0 = false => len(insert(xts1, cons(^f9($n), cons(^f5($n; xts2), nil)))) = s(s(s(0)))

+++ Status of the Inference System
--- Conjectures:
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(s(xts2))), cons(s(s(xts3)), nil)))) = s(s(s(0)))
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) = s(s(0))
	xts2 <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) = s(s(0))
	len(insert(xts, cons(s(s(0)), cons(s(s(0)), nil)))) = s(s(s(0)))
	len(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = s(s(s(0)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts <= 0 = true => len(insert(xts2, cons(s(s(xts1)), cons(s(s(0)), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
	^f9(0) -> 0
	^f9($n9 + 1) -> s(^f9($n9))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(^f5($n; xts2), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts2 <= 0 = true => len(insert(xts1, cons(^f5($n; xts2), cons(^f9($n), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(^f5($n; xts3), cons(s(^f5($n; xts2)), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(^f9($n), cons(^f5($n; xts2), nil)))) = s(s(s(0)))

+++ treating clause
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(s(xts2))), cons(s(s(xts3)), nil)))) = s(s(s(0)))
+++ inductive narrowing on conjecture
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(s(xts2))), cons(s(s(xts3)), nil)))) = s(s(s(0)))
... induction variables of
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(s(xts2))), cons(s(s(xts3)), nil)))) = s(s(s(0)))
... are:
	xts3:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(s(xts2))), cons(s(s(xts3)), nil)))) = s(s(s(0)))
... with variable xts3
+++ creating new conjecture
	0 <= s(xts2) = false => len(insert(xts1, cons(s(s(s(xts2))), cons(s(s(0)), nil)))) = s(s(s(0)))
+++ creating new conjecture
	s(xts3) <= s(xts2) = false => len(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = s(s(s(0)))
--- clause
	0 <= s(xts2) = false => len(insert(xts1, cons(s(s(s(xts2))), cons(s(s(0)), nil)))) = s(s(s(0)))
... reduced in 1 step to
	true = false => len(insert(xts2, cons(s(s(s(xts1))), cons(s(s(0)), nil)))) = s(s(s(0)))
--- clause
	true = false => len(insert(xts2, cons(s(s(s(xts1))), cons(s(s(0)), nil)))) = s(s(s(0)))
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts3) <= s(xts2) = false => len(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = s(s(s(0)))
... reduced in 1 step to
	xts3 <= xts2 = false => len(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = s(s(s(0)))
--- clause
	xts3 <= xts2 = false => len(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = s(s(s(0)))
... subsumed by lemma
	xts3 <= xts2 = false => len(insert(xts1, cons(^f5($n; xts2), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
... with substitution
	$n <- 3
+++ inductive narrowing succeeded
--- clause
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(s(xts2))), cons(s(s(xts3)), nil)))) = s(s(s(0)))
... oriented to rule
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
+++ active wrap
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(.), cons(., nil)))) = s(s(s(0)))
... with sequence
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(xts2), cons(xts3, nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(xts2)), cons(s(xts3), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(s(s(xts2))), cons(s(s(xts3)), nil)))) = s(s(s(0)))
+++ primal grammar found for head
	{0, <=, cons, false, insert, len, nil, s}
... and wrap
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(.), cons(., nil)))) = s(s(s(0)))
+++ Presburger system  = {
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
+++ }
+++ Lemma(s)           = 
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(^f5($n; xts2)), cons(^f5($n; xts3), nil)))) = s(s(s(0)))

+++ Status of the Inference System
--- Conjectures:
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) = s(s(0))
	xts2 <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) = s(s(0))
	len(insert(xts, cons(s(s(0)), cons(s(s(0)), nil)))) = s(s(s(0)))
	len(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = s(s(s(0)))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts <= 0 = true => len(insert(xts2, cons(s(s(xts1)), cons(s(s(0)), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
	^f9(0) -> 0
	^f9($n9 + 1) -> s(^f9($n9))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(^f5($n; xts2), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts2 <= 0 = true => len(insert(xts1, cons(^f5($n; xts2), cons(^f9($n), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(^f5($n; xts3), cons(s(^f5($n; xts2)), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(^f9($n), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(^f5($n; xts2)), cons(^f5($n; xts3), nil)))) = s(s(s(0)))

+++ treating clause
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) = s(s(0))
+++ inductive narrowing on conjecture
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) = s(s(0))
... induction variables of
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) = s(s(0))
... are:
	xts:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) = s(s(0))
... with variable xts
+++ creating new conjecture
	0 <= 0 = false => len(insert(s(0), cons(s(0), nil))) = s(s(0))
+++ creating new conjecture
	s(xts) <= 0 = false => len(insert(s(s(xts)), cons(s(0), nil))) = s(s(0))
--- clause
	0 <= 0 = false => len(insert(s(0), cons(s(0), nil))) = s(s(0))
... reduced in 1 step to
	true = false => len(insert(s(0), cons(s(0), nil))) = s(s(0))
--- clause
	true = false => len(insert(s(0), cons(s(0), nil))) = s(s(0))
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts) <= 0 = false => len(insert(s(s(xts)), cons(s(0), nil))) = s(s(0))
... reduced in 1 step to
	len(insert(s(s(xts)), cons(s(0), nil))) = s(s(0))
+++ inductive narrowing succeeded
--- clause
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) = s(s(0))
... oriented to rule
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) -> s(s(0))
+++ added new clause(s)
	len(insert(s(s(xts)), cons(s(0), nil))) = s(s(0))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) = s(s(0))
	len(insert(xts, cons(s(s(0)), cons(s(s(0)), nil)))) = s(s(s(0)))
	len(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = s(s(s(0)))
	len(insert(s(s(xts)), cons(s(0), nil))) = s(s(0))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts <= 0 = true => len(insert(xts2, cons(s(s(xts1)), cons(s(s(0)), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
	^f9(0) -> 0
	^f9($n9 + 1) -> s(^f9($n9))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(^f5($n; xts2), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts2 <= 0 = true => len(insert(xts1, cons(^f5($n; xts2), cons(^f9($n), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(^f5($n; xts3), cons(s(^f5($n; xts2)), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(^f9($n), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(^f5($n; xts2)), cons(^f5($n; xts3), nil)))) = s(s(s(0)))

+++ treating clause
	xts2 <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) = s(s(0))
+++ inductive narrowing on conjecture
	xts2 <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) = s(s(0))
... induction variables of
	xts2 <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) = s(s(0))
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) = s(s(0))
... with variable xts2
+++ creating new conjecture
	0 <= 0 = false => len(insert(s(0), cons(s(s(xts)), nil))) = s(s(0))
+++ creating new conjecture
	s(xts2) <= 0 = false => len(insert(s(s(xts2)), cons(s(s(xts1)), nil))) = s(s(0))
--- clause
	0 <= 0 = false => len(insert(s(0), cons(s(s(xts)), nil))) = s(s(0))
... reduced in 1 step to
	true = false => len(insert(s(0), cons(s(s(xts)), nil))) = s(s(0))
--- clause
	true = false => len(insert(s(0), cons(s(s(xts)), nil))) = s(s(0))
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= 0 = false => len(insert(s(s(xts2)), cons(s(s(xts1)), nil))) = s(s(0))
... reduced in 1 step to
	len(insert(s(s(xts2)), cons(s(s(xts1)), nil))) = s(s(0))
+++ inductive narrowing succeeded
--- clause
	xts2 <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) = s(s(0))
... oriented to rule
	xts <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) -> s(s(0))
+++ added new clause(s)
	len(insert(s(s(xts2)), cons(s(s(xts1)), nil))) = s(s(0))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	len(insert(xts, cons(s(s(0)), cons(s(s(0)), nil)))) = s(s(s(0)))
	len(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = s(s(s(0)))
	len(insert(s(s(xts)), cons(s(0), nil))) = s(s(0))
	len(insert(s(s(xts2)), cons(s(s(xts1)), nil))) = s(s(0))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts <= 0 = true => len(insert(xts2, cons(s(s(xts1)), cons(s(s(0)), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
	^f9(0) -> 0
	^f9($n9 + 1) -> s(^f9($n9))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(^f5($n; xts2), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts2 <= 0 = true => len(insert(xts1, cons(^f5($n; xts2), cons(^f9($n), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(^f5($n; xts3), cons(s(^f5($n; xts2)), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(^f9($n), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(^f5($n; xts2)), cons(^f5($n; xts3), nil)))) = s(s(s(0)))

+++ treating clause
	len(insert(xts, cons(s(s(0)), cons(s(s(0)), nil)))) = s(s(s(0)))
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	xts <= s(s(0)) = false => len(cons(s(s(0)), insert(xts, cons(s(s(0)), nil)))) = s(s(s(0)))
	xts <= s(s(0)) = true => len(cons(xts, cons(s(s(0)), cons(s(s(0)), nil)))) = s(s(s(0)))
+++ added new clause(s)
	xts <= s(s(0)) = false => len(cons(s(s(0)), insert(xts, cons(s(s(0)), nil)))) = s(s(s(0)))
	xts <= s(s(0)) = true => len(cons(xts, cons(s(s(0)), cons(s(s(0)), nil)))) = s(s(s(0)))
... to conjectures
--- clause
	xts <= s(s(0)) = false => len(cons(s(s(0)), insert(xts, cons(s(s(0)), nil)))) = s(s(s(0)))
... reduced in 1 step to
	xts <= s(s(0)) = false => s(len(insert(xts, cons(s(s(0)), nil)))) = s(s(s(0)))
--- clause
	xts <= s(s(0)) = true => len(cons(xts, cons(s(s(0)), cons(s(s(0)), nil)))) = s(s(s(0)))
... reduced to tautology
	xts <= s(s(0)) = true => s(s(s(0))) = s(s(s(0)))
... decomposed into new clause(s)
	len(insert(xts, cons(s(s(0)), nil))) = s(s(0))
... decomposed into new clause(s)
	xts <= s(s(0)) = false => len(insert(xts, cons(s(s(0)), nil))) = s(s(0))

+++ Status of the Inference System
--- Conjectures:
	len(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = s(s(s(0)))
	len(insert(s(s(xts)), cons(s(0), nil))) = s(s(0))
	len(insert(s(s(xts2)), cons(s(s(xts1)), nil))) = s(s(0))
	xts <= s(s(0)) = false => len(insert(xts, cons(s(s(0)), nil))) = s(s(0))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts <= 0 = true => len(insert(xts2, cons(s(s(xts1)), cons(s(s(0)), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
	^f9(0) -> 0
	^f9($n9 + 1) -> s(^f9($n9))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(^f5($n; xts2), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts2 <= 0 = true => len(insert(xts1, cons(^f5($n; xts2), cons(^f9($n), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(^f5($n; xts3), cons(s(^f5($n; xts2)), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(^f9($n), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(^f5($n; xts2)), cons(^f5($n; xts3), nil)))) = s(s(s(0)))

+++ treating clause
	len(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = s(s(s(0)))
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	xts2 <= s(s(0)) = false => len(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = s(s(s(0)))
	xts2 <= s(s(0)) = true => len(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = s(s(s(0)))
+++ added new clause(s)
	xts2 <= s(s(0)) = false => len(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = s(s(s(0)))
	xts2 <= s(s(0)) = true => len(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = s(s(s(0)))
... to conjectures
--- clause
	xts2 <= s(s(0)) = false => len(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = s(s(s(0)))
... reduced in 1 step to
	xts2 <= s(s(0)) = false => s(len(insert(xts2, cons(s(s(s(xts1))), nil)))) = s(s(s(0)))
--- clause
	xts2 <= s(s(0)) = true => len(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = s(s(s(0)))
... reduced to tautology
	xts <= s(s(0)) = true => s(s(s(0))) = s(s(s(0)))
... decomposed into new clause(s)
	len(insert(xts2, cons(s(s(s(xts1))), nil))) = s(s(0))
... decomposed into new clause(s)
	xts2 <= s(s(0)) = false => len(insert(xts2, cons(s(s(s(xts1))), nil))) = s(s(0))

+++ Status of the Inference System
--- Conjectures:
	len(insert(s(s(xts)), cons(s(0), nil))) = s(s(0))
	len(insert(s(s(xts2)), cons(s(s(xts1)), nil))) = s(s(0))
	xts <= s(s(0)) = false => len(insert(xts, cons(s(s(0)), nil))) = s(s(0))
	xts2 <= s(s(0)) = false => len(insert(xts2, cons(s(s(s(xts1))), nil))) = s(s(0))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts <= 0 = true => len(insert(xts2, cons(s(s(xts1)), cons(s(s(0)), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
	^f9(0) -> 0
	^f9($n9 + 1) -> s(^f9($n9))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(^f5($n; xts2), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts2 <= 0 = true => len(insert(xts1, cons(^f5($n; xts2), cons(^f9($n), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(^f5($n; xts3), cons(s(^f5($n; xts2)), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(^f9($n), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(^f5($n; xts2)), cons(^f5($n; xts3), nil)))) = s(s(s(0)))

+++ treating clause
	len(insert(s(s(xts)), cons(s(0), nil))) = s(s(0))
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	len(cons(s(0), cons(s(s(xts)), nil))) = s(s(0))
	false = true => len(cons(s(s(xts)), cons(s(0), nil))) = s(s(0))
+++ added new clause(s)
	len(cons(s(0), cons(s(s(xts)), nil))) = s(s(0))
	false = true => len(cons(s(s(xts)), cons(s(0), nil))) = s(s(0))
... to conjectures
--- clause
	len(cons(s(0), cons(s(s(xts)), nil))) = s(s(0))
... reduced to tautology
	s(s(0)) = s(s(0))
--- clause
	false = true => len(cons(s(s(xts)), cons(s(0), nil))) = s(s(0))
... reduced to tautology
	false = true => s(s(0)) = s(s(0))

+++ Status of the Inference System
--- Conjectures:
	len(insert(s(s(xts2)), cons(s(s(xts1)), nil))) = s(s(0))
	xts <= s(s(0)) = false => len(insert(xts, cons(s(s(0)), nil))) = s(s(0))
	xts2 <= s(s(0)) = false => len(insert(xts2, cons(s(s(s(xts1))), nil))) = s(s(0))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts <= 0 = true => len(insert(xts2, cons(s(s(xts1)), cons(s(s(0)), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
	^f9(0) -> 0
	^f9($n9 + 1) -> s(^f9($n9))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(^f5($n; xts2), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts2 <= 0 = true => len(insert(xts1, cons(^f5($n; xts2), cons(^f9($n), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(^f5($n; xts3), cons(s(^f5($n; xts2)), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(^f9($n), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(^f5($n; xts2)), cons(^f5($n; xts3), nil)))) = s(s(s(0)))

+++ treating clause
	len(insert(s(s(xts2)), cons(s(s(xts1)), nil))) = s(s(0))
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	xts2 <= xts1 = false => len(cons(s(s(xts1)), cons(s(s(xts2)), nil))) = s(s(0))
	xts2 <= xts1 = true => len(cons(s(s(xts2)), cons(s(s(xts1)), nil))) = s(s(0))
+++ added new clause(s)
	xts2 <= xts1 = false => len(cons(s(s(xts1)), cons(s(s(xts2)), nil))) = s(s(0))
	xts2 <= xts1 = true => len(cons(s(s(xts2)), cons(s(s(xts1)), nil))) = s(s(0))
... to conjectures
--- clause
	xts2 <= xts1 = false => len(cons(s(s(xts1)), cons(s(s(xts2)), nil))) = s(s(0))
... reduced to tautology
	xts2 <= xts1 = false => s(s(0)) = s(s(0))
--- clause
	xts2 <= xts1 = true => len(cons(s(s(xts2)), cons(s(s(xts1)), nil))) = s(s(0))
... reduced to tautology
	xts2 <= xts1 = true => s(s(0)) = s(s(0))

+++ Status of the Inference System
--- Conjectures:
	xts <= s(s(0)) = false => len(insert(xts, cons(s(s(0)), nil))) = s(s(0))
	xts2 <= s(s(0)) = false => len(insert(xts2, cons(s(s(s(xts1))), nil))) = s(s(0))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts <= 0 = true => len(insert(xts2, cons(s(s(xts1)), cons(s(s(0)), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
	^f9(0) -> 0
	^f9($n9 + 1) -> s(^f9($n9))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(^f5($n; xts2), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts2 <= 0 = true => len(insert(xts1, cons(^f5($n; xts2), cons(^f9($n), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(^f5($n; xts3), cons(s(^f5($n; xts2)), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(^f9($n), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(^f5($n; xts2)), cons(^f5($n; xts3), nil)))) = s(s(s(0)))

+++ treating clause
	xts <= s(s(0)) = false => len(insert(xts, cons(s(s(0)), nil))) = s(s(0))
+++ inductive narrowing on conjecture
	xts <= s(s(0)) = false => len(insert(xts, cons(s(s(0)), nil))) = s(s(0))
... induction variables of
	xts <= s(s(0)) = false => len(insert(xts, cons(s(s(0)), nil))) = s(s(0))
... are:
	xts:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts <= s(s(0)) = false => len(insert(xts, cons(s(s(0)), nil))) = s(s(0))
... with variable xts
+++ creating new conjecture
	0 <= s(s(0)) = false => len(insert(0, cons(s(s(0)), nil))) = s(s(0))
+++ creating new conjecture
	s(xts) <= s(s(0)) = false => len(insert(s(xts), cons(s(s(0)), nil))) = s(s(0))
--- clause
	0 <= s(s(0)) = false => len(insert(0, cons(s(s(0)), nil))) = s(s(0))
... reduced in 1 step to
	true = false => len(insert(0, cons(s(s(0)), nil))) = s(s(0))
--- clause
	true = false => len(insert(0, cons(s(s(0)), nil))) = s(s(0))
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts) <= s(s(0)) = false => len(insert(s(xts), cons(s(s(0)), nil))) = s(s(0))
... reduced in 1 step to
	xts <= s(0) = false => len(insert(s(xts), cons(s(s(0)), nil))) = s(s(0))
+++ inductive narrowing succeeded
--- clause
	xts <= s(s(0)) = false => len(insert(xts, cons(s(s(0)), nil))) = s(s(0))
... oriented to rule
	xts <= s(s(0)) = false => len(insert(xts, cons(s(s(0)), nil))) -> s(s(0))
+++ added new clause(s)
	xts <= s(0) = false => len(insert(s(xts), cons(s(s(0)), nil))) = s(s(0))
... to conjectures
+++ active wrap
	xts <= . = false => len(insert(xts, cons(., nil))) = s(s(0))
... with sequence
	xts <= 0 = false => len(insert(xts, cons(0, nil))) = s(s(0))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) = s(s(0))
	xts <= s(s(0)) = false => len(insert(xts, cons(s(s(0)), nil))) = s(s(0))
+++ primal grammar found for head
	{0, <=, cons, false, insert, len, nil, s}
... and wrap
	xts <= . = false => len(insert(xts, cons(., nil))) = s(s(0))
+++ Presburger system  = {
	^f9(0) -> 0
	^f9($n9 + 1) -> s(^f9($n9))
+++ }
+++ Lemma(s)           = 
	xts <= ^f9($n) = false => len(insert(xts, cons(^f9($n), nil))) = s(s(0))

+++ Status of the Inference System
--- Conjectures:
	xts2 <= s(s(0)) = false => len(insert(xts2, cons(s(s(s(xts1))), nil))) = s(s(0))
	xts <= s(0) = false => len(insert(s(xts), cons(s(s(0)), nil))) = s(s(0))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= s(s(0)) = false => len(insert(xts, cons(s(s(0)), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts <= 0 = true => len(insert(xts2, cons(s(s(xts1)), cons(s(s(0)), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
	^f9(0) -> 0
	^f9($n9 + 1) -> s(^f9($n9))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(^f5($n; xts2), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts2 <= 0 = true => len(insert(xts1, cons(^f5($n; xts2), cons(^f9($n), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(^f5($n; xts3), cons(s(^f5($n; xts2)), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(^f9($n), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(^f5($n; xts2)), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts <= ^f9($n) = false => len(insert(xts, cons(^f9($n), nil))) = s(s(0))

+++ treating clause
	xts2 <= s(s(0)) = false => len(insert(xts2, cons(s(s(s(xts1))), nil))) = s(s(0))
+++ inductive narrowing on conjecture
	xts2 <= s(s(0)) = false => len(insert(xts2, cons(s(s(s(xts1))), nil))) = s(s(0))
... induction variables of
	xts2 <= s(s(0)) = false => len(insert(xts2, cons(s(s(s(xts1))), nil))) = s(s(0))
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= s(s(0)) = false => len(insert(xts2, cons(s(s(s(xts1))), nil))) = s(s(0))
... with variable xts2
+++ creating new conjecture
	0 <= s(s(0)) = false => len(insert(0, cons(s(s(s(xts))), nil))) = s(s(0))
+++ creating new conjecture
	s(xts2) <= s(s(0)) = false => len(insert(s(xts2), cons(s(s(s(xts1))), nil))) = s(s(0))
--- clause
	0 <= s(s(0)) = false => len(insert(0, cons(s(s(s(xts))), nil))) = s(s(0))
... reduced in 1 step to
	true = false => len(insert(0, cons(s(s(s(xts))), nil))) = s(s(0))
--- clause
	true = false => len(insert(0, cons(s(s(s(xts))), nil))) = s(s(0))
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(s(0)) = false => len(insert(s(xts2), cons(s(s(s(xts1))), nil))) = s(s(0))
... reduced in 1 step to
	xts2 <= s(0) = false => len(insert(s(xts2), cons(s(s(s(xts1))), nil))) = s(s(0))
+++ inductive narrowing succeeded
--- clause
	xts2 <= s(s(0)) = false => len(insert(xts2, cons(s(s(s(xts1))), nil))) = s(s(0))
... oriented to rule
	xts <= s(s(0)) = false => len(insert(xts2, cons(s(s(s(xts1))), nil))) -> s(s(0))
+++ added new clause(s)
	xts2 <= s(0) = false => len(insert(s(xts2), cons(s(s(s(xts1))), nil))) = s(s(0))
... to conjectures
+++ active wrap
	xts <= . = false => len(insert(xts, cons(s(.), nil))) = s(s(0))
... with sequence
	xts2 <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) = s(s(0))
	xts2 <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) = s(s(0))
	xts2 <= s(s(0)) = false => len(insert(xts2, cons(s(s(s(xts1))), nil))) = s(s(0))
+++ primal grammar found for head
	{0, <=, cons, false, insert, len, nil, s}
... and wrap
	xts <= . = false => len(insert(xts, cons(s(.), nil))) = s(s(0))
+++ Presburger system  = {
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
	^f9(0) -> 0
	^f9($n9 + 1) -> s(^f9($n9))
+++ }
+++ Lemma(s)           = 
	xts2 <= ^f9($n) = false => len(insert(xts2, cons(s(^f5($n; xts1)), nil))) = s(s(0))

+++ Status of the Inference System
--- Conjectures:
	xts <= s(0) = false => len(insert(s(xts), cons(s(s(0)), nil))) = s(s(0))
	xts2 <= s(0) = false => len(insert(s(xts2), cons(s(s(s(xts1))), nil))) = s(s(0))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= s(s(0)) = false => len(insert(xts, cons(s(s(0)), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= s(s(0)) = false => len(insert(xts2, cons(s(s(s(xts1))), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts <= 0 = true => len(insert(xts2, cons(s(s(xts1)), cons(s(s(0)), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
	^f9(0) -> 0
	^f9($n9 + 1) -> s(^f9($n9))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(^f5($n; xts2), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts2 <= 0 = true => len(insert(xts1, cons(^f5($n; xts2), cons(^f9($n), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(^f5($n; xts3), cons(s(^f5($n; xts2)), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(^f9($n), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(^f5($n; xts2)), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts <= ^f9($n) = false => len(insert(xts, cons(^f9($n), nil))) = s(s(0))
	xts2 <= ^f9($n) = false => len(insert(xts2, cons(s(^f5($n; xts1)), nil))) = s(s(0))

+++ treating clause
	xts <= s(0) = false => len(insert(s(xts), cons(s(s(0)), nil))) = s(s(0))
+++ inductive narrowing on conjecture
	xts <= s(0) = false => len(insert(s(xts), cons(s(s(0)), nil))) = s(s(0))
... induction variables of
	xts <= s(0) = false => len(insert(s(xts), cons(s(s(0)), nil))) = s(s(0))
... are:
	xts:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts <= s(0) = false => len(insert(s(xts), cons(s(s(0)), nil))) = s(s(0))
... with variable xts
+++ creating new conjecture
	0 <= s(0) = false => len(insert(s(0), cons(s(s(0)), nil))) = s(s(0))
+++ creating new conjecture
	s(xts) <= s(0) = false => len(insert(s(s(xts)), cons(s(s(0)), nil))) = s(s(0))
--- clause
	0 <= s(0) = false => len(insert(s(0), cons(s(s(0)), nil))) = s(s(0))
... reduced in 1 step to
	true = false => len(insert(s(0), cons(s(s(0)), nil))) = s(s(0))
--- clause
	true = false => len(insert(s(0), cons(s(s(0)), nil))) = s(s(0))
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts) <= s(0) = false => len(insert(s(s(xts)), cons(s(s(0)), nil))) = s(s(0))
... reduced in 1 step to
	xts <= 0 = false => len(insert(s(s(xts)), cons(s(s(0)), nil))) = s(s(0))
+++ inductive narrowing succeeded
--- clause
	xts <= s(0) = false => len(insert(s(xts), cons(s(s(0)), nil))) = s(s(0))
... oriented to rule
	xts <= s(0) = false => len(insert(s(xts), cons(s(s(0)), nil))) -> s(s(0))
+++ added new clause(s)
	xts <= 0 = false => len(insert(s(s(xts)), cons(s(s(0)), nil))) = s(s(0))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= s(0) = false => len(insert(s(xts2), cons(s(s(s(xts1))), nil))) = s(s(0))
	xts <= 0 = false => len(insert(s(s(xts)), cons(s(s(0)), nil))) = s(s(0))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(s(xts), cons(s(s(0)), nil))) -> s(s(0))
	xts <= s(s(0)) = false => len(insert(xts, cons(s(s(0)), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= s(s(0)) = false => len(insert(xts2, cons(s(s(s(xts1))), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts <= 0 = true => len(insert(xts2, cons(s(s(xts1)), cons(s(s(0)), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
	^f9(0) -> 0
	^f9($n9 + 1) -> s(^f9($n9))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(^f5($n; xts2), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts2 <= 0 = true => len(insert(xts1, cons(^f5($n; xts2), cons(^f9($n), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(^f5($n; xts3), cons(s(^f5($n; xts2)), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(^f9($n), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(^f5($n; xts2)), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts <= ^f9($n) = false => len(insert(xts, cons(^f9($n), nil))) = s(s(0))
	xts2 <= ^f9($n) = false => len(insert(xts2, cons(s(^f5($n; xts1)), nil))) = s(s(0))

+++ treating clause
	xts2 <= s(0) = false => len(insert(s(xts2), cons(s(s(s(xts1))), nil))) = s(s(0))
+++ inductive narrowing on conjecture
	xts2 <= s(0) = false => len(insert(s(xts2), cons(s(s(s(xts1))), nil))) = s(s(0))
... induction variables of
	xts2 <= s(0) = false => len(insert(s(xts2), cons(s(s(s(xts1))), nil))) = s(s(0))
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= s(0) = false => len(insert(s(xts2), cons(s(s(s(xts1))), nil))) = s(s(0))
... with variable xts2
+++ creating new conjecture
	0 <= s(0) = false => len(insert(s(0), cons(s(s(s(xts))), nil))) = s(s(0))
+++ creating new conjecture
	s(xts2) <= s(0) = false => len(insert(s(s(xts2)), cons(s(s(s(xts1))), nil))) = s(s(0))
--- clause
	0 <= s(0) = false => len(insert(s(0), cons(s(s(s(xts))), nil))) = s(s(0))
... reduced in 1 step to
	true = false => len(insert(s(0), cons(s(s(s(xts))), nil))) = s(s(0))
--- clause
	true = false => len(insert(s(0), cons(s(s(s(xts))), nil))) = s(s(0))
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(0) = false => len(insert(s(s(xts2)), cons(s(s(s(xts1))), nil))) = s(s(0))
... reduced in 1 step to
	xts2 <= 0 = false => len(insert(s(s(xts2)), cons(s(s(s(xts1))), nil))) = s(s(0))
+++ inductive narrowing succeeded
--- clause
	xts2 <= s(0) = false => len(insert(s(xts2), cons(s(s(s(xts1))), nil))) = s(s(0))
... oriented to rule
	xts <= s(0) = false => len(insert(s(xts2), cons(s(s(s(xts1))), nil))) -> s(s(0))
+++ added new clause(s)
	xts2 <= 0 = false => len(insert(s(s(xts2)), cons(s(s(s(xts1))), nil))) = s(s(0))
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts <= 0 = false => len(insert(s(s(xts)), cons(s(s(0)), nil))) = s(s(0))
	xts2 <= 0 = false => len(insert(s(s(xts2)), cons(s(s(s(xts1))), nil))) = s(s(0))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(s(xts), cons(s(s(0)), nil))) -> s(s(0))
	xts <= s(s(0)) = false => len(insert(xts, cons(s(s(0)), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= s(0) = false => len(insert(s(xts2), cons(s(s(s(xts1))), nil))) -> s(s(0))
	xts <= s(s(0)) = false => len(insert(xts2, cons(s(s(s(xts1))), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts <= 0 = true => len(insert(xts2, cons(s(s(xts1)), cons(s(s(0)), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
	^f9(0) -> 0
	^f9($n9 + 1) -> s(^f9($n9))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(^f5($n; xts2), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts2 <= 0 = true => len(insert(xts1, cons(^f5($n; xts2), cons(^f9($n), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(^f5($n; xts3), cons(s(^f5($n; xts2)), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(^f9($n), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(^f5($n; xts2)), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts <= ^f9($n) = false => len(insert(xts, cons(^f9($n), nil))) = s(s(0))
	xts2 <= ^f9($n) = false => len(insert(xts2, cons(s(^f5($n; xts1)), nil))) = s(s(0))

+++ treating clause
	xts <= 0 = false => len(insert(s(s(xts)), cons(s(s(0)), nil))) = s(s(0))
+++ inductive narrowing on conjecture
	xts <= 0 = false => len(insert(s(s(xts)), cons(s(s(0)), nil))) = s(s(0))
... induction variables of
	xts <= 0 = false => len(insert(s(s(xts)), cons(s(s(0)), nil))) = s(s(0))
... are:
	xts:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts <= 0 = false => len(insert(s(s(xts)), cons(s(s(0)), nil))) = s(s(0))
... with variable xts
+++ creating new conjecture
	0 <= 0 = false => len(insert(s(s(0)), cons(s(s(0)), nil))) = s(s(0))
+++ creating new conjecture
	s(xts) <= 0 = false => len(insert(s(s(s(xts))), cons(s(s(0)), nil))) = s(s(0))
--- clause
	0 <= 0 = false => len(insert(s(s(0)), cons(s(s(0)), nil))) = s(s(0))
... reduced in 1 step to
	true = false => len(insert(s(s(0)), cons(s(s(0)), nil))) = s(s(0))
--- clause
	true = false => len(insert(s(s(0)), cons(s(s(0)), nil))) = s(s(0))
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts) <= 0 = false => len(insert(s(s(s(xts))), cons(s(s(0)), nil))) = s(s(0))
... reduced in 1 step to
	len(insert(s(s(s(xts))), cons(s(s(0)), nil))) = s(s(0))
+++ inductive narrowing succeeded
--- clause
	xts <= 0 = false => len(insert(s(s(xts)), cons(s(s(0)), nil))) = s(s(0))
... oriented to rule
	xts <= 0 = false => len(insert(s(s(xts)), cons(s(s(0)), nil))) -> s(s(0))
+++ added new clause(s)
	len(insert(s(s(s(xts))), cons(s(s(0)), nil))) = s(s(0))
... to conjectures
+++ active wrap
	xts <= 0 = false => len(insert(., cons(., nil))) = s(s(0))
... with sequence
	xts <= 0 = false => len(insert(xts, cons(0, nil))) = s(s(0))
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) = s(s(0))
	xts <= 0 = false => len(insert(s(s(xts)), cons(s(s(0)), nil))) = s(s(0))
+++ primal grammar found for head
	{0, <=, cons, false, insert, len, nil, s}
... and wrap
	xts <= 0 = false => len(insert(., cons(., nil))) = s(s(0))
+++ Presburger system  = {
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
	^f9(0) -> 0
	^f9($n9 + 1) -> s(^f9($n9))
+++ }
+++ Lemma(s)           = 
	xts <= 0 = false => len(insert(^f5($n; xts), cons(^f9($n), nil))) = s(s(0))

+++ Status of the Inference System
--- Conjectures:
	xts2 <= 0 = false => len(insert(s(s(xts2)), cons(s(s(s(xts1))), nil))) = s(s(0))
	len(insert(s(s(s(xts))), cons(s(s(0)), nil))) = s(s(0))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(s(xts)), cons(s(s(0)), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(s(xts), cons(s(s(0)), nil))) -> s(s(0))
	xts <= s(s(0)) = false => len(insert(xts, cons(s(s(0)), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= s(0) = false => len(insert(s(xts2), cons(s(s(s(xts1))), nil))) -> s(s(0))
	xts <= s(s(0)) = false => len(insert(xts2, cons(s(s(s(xts1))), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts <= 0 = true => len(insert(xts2, cons(s(s(xts1)), cons(s(s(0)), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
	^f9(0) -> 0
	^f9($n9 + 1) -> s(^f9($n9))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(^f5($n; xts2), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts2 <= 0 = true => len(insert(xts1, cons(^f5($n; xts2), cons(^f9($n), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(^f5($n; xts3), cons(s(^f5($n; xts2)), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(^f9($n), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(^f5($n; xts2)), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts <= ^f9($n) = false => len(insert(xts, cons(^f9($n), nil))) = s(s(0))
	xts2 <= ^f9($n) = false => len(insert(xts2, cons(s(^f5($n; xts1)), nil))) = s(s(0))
	xts <= 0 = false => len(insert(^f5($n; xts), cons(^f9($n), nil))) = s(s(0))

+++ treating clause
	xts2 <= 0 = false => len(insert(s(s(xts2)), cons(s(s(s(xts1))), nil))) = s(s(0))
+++ inductive narrowing on conjecture
	xts2 <= 0 = false => len(insert(s(s(xts2)), cons(s(s(s(xts1))), nil))) = s(s(0))
... induction variables of
	xts2 <= 0 = false => len(insert(s(s(xts2)), cons(s(s(s(xts1))), nil))) = s(s(0))
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= 0 = false => len(insert(s(s(xts2)), cons(s(s(s(xts1))), nil))) = s(s(0))
... with variable xts2
+++ creating new conjecture
	0 <= 0 = false => len(insert(s(s(0)), cons(s(s(s(xts))), nil))) = s(s(0))
+++ creating new conjecture
	s(xts2) <= 0 = false => len(insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = s(s(0))
--- clause
	0 <= 0 = false => len(insert(s(s(0)), cons(s(s(s(xts))), nil))) = s(s(0))
... reduced in 1 step to
	true = false => len(insert(s(s(0)), cons(s(s(s(xts))), nil))) = s(s(0))
--- clause
	true = false => len(insert(s(s(0)), cons(s(s(s(xts))), nil))) = s(s(0))
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= 0 = false => len(insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = s(s(0))
... reduced in 1 step to
	len(insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = s(s(0))
+++ inductive narrowing succeeded
--- clause
	xts2 <= 0 = false => len(insert(s(s(xts2)), cons(s(s(s(xts1))), nil))) = s(s(0))
... oriented to rule
	xts <= 0 = false => len(insert(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> s(s(0))
+++ added new clause(s)
	len(insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = s(s(0))
... to conjectures
+++ active wrap
	xts <= 0 = false => len(insert(., cons(s(.), nil))) = s(s(0))
... with sequence
	xts2 <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) = s(s(0))
	xts2 <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) = s(s(0))
	xts2 <= 0 = false => len(insert(s(s(xts2)), cons(s(s(s(xts1))), nil))) = s(s(0))
+++ primal grammar found for head
	{0, <=, cons, false, insert, len, nil, s}
... and wrap
	xts <= 0 = false => len(insert(., cons(s(.), nil))) = s(s(0))
+++ Presburger system  = {
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
+++ }
+++ Lemma(s)           = 
	xts2 <= 0 = false => len(insert(^f5($n; xts2), cons(s(^f5($n; xts1)), nil))) = s(s(0))

+++ Status of the Inference System
--- Conjectures:
	len(insert(s(s(s(xts))), cons(s(s(0)), nil))) = s(s(0))
	len(insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = s(s(0))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(s(xts)), cons(s(s(0)), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(s(xts), cons(s(s(0)), nil))) -> s(s(0))
	xts <= s(s(0)) = false => len(insert(xts, cons(s(s(0)), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = false => len(insert(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(s(xts2), cons(s(s(s(xts1))), nil))) -> s(s(0))
	xts <= s(s(0)) = false => len(insert(xts2, cons(s(s(s(xts1))), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts <= 0 = true => len(insert(xts2, cons(s(s(xts1)), cons(s(s(0)), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
	^f9(0) -> 0
	^f9($n9 + 1) -> s(^f9($n9))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(^f5($n; xts2), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts2 <= 0 = true => len(insert(xts1, cons(^f5($n; xts2), cons(^f9($n), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(^f5($n; xts3), cons(s(^f5($n; xts2)), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(^f9($n), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(^f5($n; xts2)), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts <= ^f9($n) = false => len(insert(xts, cons(^f9($n), nil))) = s(s(0))
	xts2 <= ^f9($n) = false => len(insert(xts2, cons(s(^f5($n; xts1)), nil))) = s(s(0))
	xts <= 0 = false => len(insert(^f5($n; xts), cons(^f9($n), nil))) = s(s(0))
	xts2 <= 0 = false => len(insert(^f5($n; xts2), cons(s(^f5($n; xts1)), nil))) = s(s(0))

+++ treating clause
	len(insert(s(s(s(xts))), cons(s(s(0)), nil))) = s(s(0))
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	len(cons(s(s(0)), cons(s(s(s(xts))), nil))) = s(s(0))
	false = true => len(cons(s(s(s(xts))), cons(s(s(0)), nil))) = s(s(0))
+++ added new clause(s)
	len(cons(s(s(0)), cons(s(s(s(xts))), nil))) = s(s(0))
	false = true => len(cons(s(s(s(xts))), cons(s(s(0)), nil))) = s(s(0))
... to conjectures
--- clause
	len(cons(s(s(0)), cons(s(s(s(xts))), nil))) = s(s(0))
... reduced to tautology
	s(s(0)) = s(s(0))
--- clause
	false = true => len(cons(s(s(s(xts))), cons(s(s(0)), nil))) = s(s(0))
... reduced to tautology
	false = true => s(s(0)) = s(s(0))

+++ Status of the Inference System
--- Conjectures:
	len(insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = s(s(0))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(s(xts)), cons(s(s(0)), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(s(xts), cons(s(s(0)), nil))) -> s(s(0))
	xts <= s(s(0)) = false => len(insert(xts, cons(s(s(0)), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = false => len(insert(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(s(xts2), cons(s(s(s(xts1))), nil))) -> s(s(0))
	xts <= s(s(0)) = false => len(insert(xts2, cons(s(s(s(xts1))), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts <= 0 = true => len(insert(xts2, cons(s(s(xts1)), cons(s(s(0)), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
	^f9(0) -> 0
	^f9($n9 + 1) -> s(^f9($n9))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(^f5($n; xts2), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts2 <= 0 = true => len(insert(xts1, cons(^f5($n; xts2), cons(^f9($n), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(^f5($n; xts3), cons(s(^f5($n; xts2)), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(^f9($n), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(^f5($n; xts2)), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts <= ^f9($n) = false => len(insert(xts, cons(^f9($n), nil))) = s(s(0))
	xts2 <= ^f9($n) = false => len(insert(xts2, cons(s(^f5($n; xts1)), nil))) = s(s(0))
	xts <= 0 = false => len(insert(^f5($n; xts), cons(^f9($n), nil))) = s(s(0))
	xts2 <= 0 = false => len(insert(^f5($n; xts2), cons(s(^f5($n; xts1)), nil))) = s(s(0))

+++ treating clause
	len(insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = s(s(0))
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	xts2 <= xts1 = false => len(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = s(s(0))
	xts2 <= xts1 = true => len(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = s(s(0))
+++ added new clause(s)
	xts2 <= xts1 = false => len(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = s(s(0))
	xts2 <= xts1 = true => len(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = s(s(0))
... to conjectures
--- clause
	xts2 <= xts1 = false => len(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = s(s(0))
... reduced to tautology
	xts2 <= xts1 = false => s(s(0)) = s(s(0))
--- clause
	xts2 <= xts1 = true => len(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = s(s(0))
... reduced to tautology
	xts2 <= xts1 = true => s(s(0)) = s(s(0))

+++ Status of the Inference System
--- Conjectures:
	<empty>
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(isort(x)) -> len(x)
	len(insert(xts, isort(yts))) -> s(len(yts))
	len(insert(xts2, insert(xts1, isort(yts)))) -> s(s(len(yts)))
	xts <= 0 = false => len(insert(xts, cons(0, nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts), cons(s(0), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts, cons(s(0), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(xts2, cons(s(xts1), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(s(xts)), cons(s(s(0)), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(s(xts), cons(s(s(0)), nil))) -> s(s(0))
	xts <= s(s(0)) = false => len(insert(xts, cons(s(s(0)), nil))) -> s(s(0))
	xts <= 0 = false => len(insert(s(xts2), cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(xts2, cons(s(s(xts1)), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(xts1, cons(0, nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(0, cons(xts1, nil)))) -> s(s(s(0)))
	len(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> s(s(s(len(yts))))
	xts <= 0 = false => len(insert(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> s(s(0))
	xts <= s(0) = false => len(insert(s(xts2), cons(s(s(s(xts1))), nil))) -> s(s(0))
	xts <= s(s(0)) = false => len(insert(xts2, cons(s(s(s(xts1))), nil))) -> s(s(0))
	xts <= 0 = true => len(insert(xts2, cons(s(xts1), cons(s(0), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(0), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(xts2, cons(xts1, nil)))) -> s(s(s(0)))
	xts <= 0 = true => len(insert(xts2, cons(s(s(xts1)), cons(s(s(0)), nil)))) -> s(s(s(0)))
	xts <= 0 = false => len(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> s(s(s(0)))
	xts2 <= xts1 = false => len(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = true => len(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> s(s(s(0)))
	xts2 <= s(xts1) = false => len(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> s(s(s(0)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; yts) -> len(yts)
	^f1($n1 + 1; yts) -> s(^f1($n1; yts))
	^f5(0; xts) -> xts
	^f5($n5 + 1; xts) -> s(^f5($n5; xts))
	^f9(0) -> 0
	^f9($n9 + 1) -> s(^f9($n9))
+++ }
+++ Lemma(s)           = 
	len(insert(xts$n, ^f0($n; yts, xts@))) = s(^f1($n; yts))
	xts3 <= xts2 = true => len(insert(xts1, cons(^f5($n; xts3), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= xts2 = false => len(insert(xts1, cons(^f5($n; xts2), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts2 <= 0 = true => len(insert(xts1, cons(^f5($n; xts2), cons(^f9($n), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = true => len(insert(xts1, cons(^f5($n; xts3), cons(s(^f5($n; xts2)), nil)))) = s(s(s(0)))
	xts2 <= 0 = false => len(insert(xts1, cons(^f9($n), cons(^f5($n; xts2), nil)))) = s(s(s(0)))
	xts3 <= s(xts2) = false => len(insert(xts1, cons(s(^f5($n; xts2)), cons(^f5($n; xts3), nil)))) = s(s(s(0)))
	xts <= ^f9($n) = false => len(insert(xts, cons(^f9($n), nil))) = s(s(0))
	xts2 <= ^f9($n) = false => len(insert(xts2, cons(s(^f5($n; xts1)), nil))) = s(s(0))
	xts <= 0 = false => len(insert(^f5($n; xts), cons(^f9($n), nil))) = s(s(0))
	xts2 <= 0 = false => len(insert(^f5($n; xts2), cons(s(^f5($n; xts1)), nil))) = s(s(0))

+++ SUCCESS: all conjectures proved
+++ Statistics:
... Number of proof steps          = 48
... Number of induction steps      = 34
... Number of equational steps     = 0
... Number of case rewriting steps = 14
... Number of PG defined symbols   = 4
... Number of PG lemmas            = 11
... Elapsed time (seconds)         = 0.333
