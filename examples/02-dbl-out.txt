+++ SPECIFICATION --- bidirectional branch, version 0.99
+++ Parameters:
    ===========
+++ input       = 02-dbl-in.txt
+++ output      = 02-dbl-out.txt
+++ trace       = 3
+++ direction   = first-to-last
+++ drop        = yes
+++ verbose     = 3
+++ split       = 4
+++ loop limit  = 10
+++ stdlib      = /usr/local/lib/indy/stdlib/
-----------------------------------------------------------------------

+++ specification double from 02-dbl-in.txt successfully parsed
+++ Listing
         1: specification double
         2: sorts
         3:      nat
         4: constructors
         5:      0: -> nat
         6:      s: nat -> nat
         7: defined functions
         8:      +: nat nat -> nat
         9:      dbl: nat -> nat
        10: precedence
        11:      dbl > + > s > 0
        12: axioms
        13:      x + 0 = x;
        14:      dbl(0) = 0;
        15:      x + s(y) = s(x + y);
        16:      dbl(s(x)) = s(s(dbl(x)));
        17: conjectures
        18:      dbl(x) = x + x;
        19: end
+++ finitary sorts: <empty>
+++ Rewrite System 
	x + 0 -> x
	dbl(0) -> 0
	x + s(y) -> s(x + y)
	dbl(s(x)) -> s(s(dbl(x)))
+++ inductive positions:
... for +: 1
... for dbl: 0
+++ maximal depths of left-hand sides:
... for dbl: 2
... for +: 2
+++ general maximal depth = 2
+++ sort dependence: <empty>
+++ test sets for defined functions and sorts:
... for dbl
... ... nat
		0
		s(x)
... for +
... ... nat
		0
		s(x)

+++ conjecture(s)
	dbl(x) = x + x

+++ inference system initiated
+++ treating clause
	dbl(x) = x + x
+++ inductive narrowing on conjecture
	dbl(x) = x + x
... induction variables of
	dbl(x) = x + x
... are:
	x:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	dbl(x) = x + x
... with variable x
+++ creating new conjecture
	dbl(0) = 0 + 0
+++ creating new conjecture
	dbl(s(xts)) = s(xts) + s(xts)
--- clause
	dbl(0) = 0 + 0
... reduced to tautology
	0 = 0
--- clause
	dbl(s(xts)) = s(xts) + s(xts)
... reduced in 2 steps to
	s(s(dbl(xts))) = s(s(xts) + xts)
... decomposed into new clause(s)
	s(dbl(xts)) = s(xts) + xts
+++ inductive narrowing succeeded
--- clause
	dbl(x) = x + x
... oriented to rule
	dbl(x) -> x + x
+++ added new clause(s)
	s(dbl(xts)) = s(xts) + xts
... to conjectures
--- clause
	s(dbl(xts)) = s(xts) + xts
... reduced in 1 step to
	s(xts + xts) = s(xts) + xts

+++ Status of the Inference System
--- Conjectures:
	s(xts + xts) = s(xts) + xts
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	dbl(x) -> x + x
--- Primal Grammar:
	<empty>

+++ treating clause
	s(xts + xts) = s(xts) + xts
+++ inductive narrowing on conjecture
	s(xts + xts) = s(xts) + xts
... induction variables of
	s(xts + xts) = s(xts) + xts
... are:
	xts:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts + xts) = s(xts) + xts
... with variable xts
+++ creating new conjecture
	s(0 + 0) = s(0) + 0
+++ creating new conjecture
	s(s(xts) + s(xts)) = s(s(xts)) + s(xts)
--- clause
	s(0 + 0) = s(0) + 0
... reduced to tautology
	s(0) = s(0)
--- clause
	s(s(xts) + s(xts)) = s(s(xts)) + s(xts)
... reduced in 2 steps to
	s(s(s(xts) + xts)) = s(s(s(xts)) + xts)
... decomposed into new clause(s)
	s(s(xts) + xts) = s(s(xts)) + xts
+++ inductive narrowing succeeded
--- clause
	s(xts + xts) = s(xts) + xts
... oriented to rule
	s(xts) + xts -> s(xts + xts)
+++ added new clause(s)
	s(s(xts) + xts) = s(s(xts)) + xts
... to conjectures
--- clause
	s(s(xts) + xts) = s(s(xts)) + xts
... reduced in 1 step to
	s(s(xts + xts)) = s(s(xts)) + xts

+++ Status of the Inference System
--- Conjectures:
	s(s(xts + xts)) = s(s(xts)) + xts
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	dbl(x) -> x + x
	s(xts) + xts -> s(xts + xts)
--- Primal Grammar:
	<empty>

+++ treating clause
	s(s(xts + xts)) = s(s(xts)) + xts
+++ inductive narrowing on conjecture
	s(s(xts + xts)) = s(s(xts)) + xts
... induction variables of
	s(s(xts + xts)) = s(s(xts)) + xts
... are:
	xts:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(xts + xts)) = s(s(xts)) + xts
... with variable xts
+++ creating new conjecture
	s(s(0 + 0)) = s(s(0)) + 0
+++ creating new conjecture
	s(s(s(xts) + s(xts))) = s(s(s(xts))) + s(xts)
--- clause
	s(s(0 + 0)) = s(s(0)) + 0
... reduced to tautology
	s(s(0)) = s(s(0))
--- clause
	s(s(s(xts) + s(xts))) = s(s(s(xts))) + s(xts)
... reduced in 3 steps to
	s(s(s(s(xts + xts)))) = s(s(s(s(xts))) + xts)
... decomposed into new clause(s)
	s(s(s(xts + xts))) = s(s(s(xts))) + xts
+++ inductive narrowing succeeded
--- clause
	s(s(xts + xts)) = s(s(xts)) + xts
... oriented to rule
	s(s(xts)) + xts -> s(s(xts + xts))
+++ added new clause(s)
	s(s(s(xts + xts))) = s(s(s(xts))) + xts
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(s(s(xts + xts))) = s(s(s(xts))) + xts
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	dbl(x) -> x + x
	s(xts) + xts -> s(xts + xts)
	s(s(xts)) + xts -> s(s(xts + xts))
--- Primal Grammar:
	<empty>

+++ treating clause
	s(s(s(xts + xts))) = s(s(s(xts))) + xts
+++ inductive narrowing on conjecture
	s(s(s(xts + xts))) = s(s(s(xts))) + xts
... induction variables of
	s(s(s(xts + xts))) = s(s(s(xts))) + xts
... are:
	xts:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(s(s(xts + xts))) = s(s(s(xts))) + xts
... with variable xts
+++ creating new conjecture
	s(s(s(0 + 0))) = s(s(s(0))) + 0
+++ creating new conjecture
	s(s(s(s(xts) + s(xts)))) = s(s(s(s(xts)))) + s(xts)
--- clause
	s(s(s(0 + 0))) = s(s(s(0))) + 0
... reduced to tautology
	s(s(s(0))) = s(s(s(0)))
--- clause
	s(s(s(s(xts) + s(xts)))) = s(s(s(s(xts)))) + s(xts)
... reduced in 3 steps to
	s(s(s(s(s(xts + xts))))) = s(s(s(s(s(xts)))) + xts)
... decomposed into new clause(s)
	s(s(s(s(xts + xts)))) = s(s(s(s(xts)))) + xts
+++ inductive narrowing succeeded
--- clause
	s(s(s(xts + xts))) = s(s(s(xts))) + xts
... oriented to rule
	s(s(s(xts))) + xts -> s(s(s(xts + xts)))
+++ added new clause(s)
	s(s(s(s(xts + xts)))) = s(s(s(s(xts)))) + xts
... to conjectures
+++ active wrap
	s(.) = s(.) + xts
... with sequence
	s(xts + xts) = s(xts) + xts
	s(s(xts + xts)) = s(s(xts)) + xts
	s(s(s(xts + xts))) = s(s(s(xts))) + xts
+++ primal grammar found for head
	{+, s}
... and wrap
	s(.) = s(.) + xts
+++ Presburger system  = {
	^f0(0; xts) -> xts + xts
	^f0($n0 + 1; xts) -> s(^f0($n0; xts))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	s(^f0($n; xts)) = s(^f1($n; xts)) + xts
--- clause
	s(s(s(s(xts + xts)))) = s(s(s(s(xts)))) + xts
... subsumed by lemma
	s(^f0($n; xts)) = s(^f1($n; xts)) + xts
... with substitution
	$n <- 3

+++ Status of the Inference System
--- Conjectures:
	<empty>
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	dbl(x) -> x + x
	s(xts) + xts -> s(xts + xts)
	s(s(xts)) + xts -> s(s(xts + xts))
	s(s(s(xts))) + xts -> s(s(s(xts + xts)))
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; xts) -> xts + xts
	^f0($n0 + 1; xts) -> s(^f0($n0; xts))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	s(^f0($n; xts)) = s(^f1($n; xts)) + xts

+++ SUCCESS: all conjectures proved
+++ Statistics:
... Number of proof steps          = 4
... Number of induction steps      = 4
... Number of equational steps     = 0
... Number of case rewriting steps = 0
... Number of PG defined symbols   = 2
... Number of PG lemmas            = 1
... Elapsed time (seconds)         = 0.002
