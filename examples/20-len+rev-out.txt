+++ SPECIFICATION --- bidirectional branch, version 0.99
+++ Parameters:
    ===========
+++ input       = 20-len+rev-in.txt
+++ output      = 20-len+rev-out.txt
+++ trace       = 3
+++ direction   = last-to-first
+++ drop        = yes
+++ verbose     = 3
+++ split       = 4
+++ loop limit  = 10
+++ stdlib      = /usr/local/lib/indy/stdlib/
-----------------------------------------------------------------------

+++ specification LenRev from 20-len+rev-in.txt successfully parsed
+++ Listing
         1: specification LenRev
         2: sorts
         3:      list nat
         4: constructors
         5:      0: -> nat
         6:      cons: nat list -> list
         7:      nil: -> list
         8:      s: nat -> nat
         9: defined functions
        10:      +: nat nat -> nat
        11:      app: list list -> list
        12:      len: list -> nat
        13:      rev: list -> list
        14: precedence
        15:      rev > len > app > + > cons > nil > s > 0
        16: axioms
        17:      x + 0 = x;
        18:      len(nil) = 0;
        19:      rev(nil) = nil;
        20:      app(nil, y) = y;
        21:      x + s(y) = s(x + y);
        22:      len(cons(x, y)) = s(len(y));
        23:      app(cons(x, y), z) = cons(x, app(y, z));
        24:      rev(cons(x, y)) = app(rev(y), cons(x, nil));
        25: conjectures
        26:      len(rev(app(x, y))) = len(x) + len(y);
        27: end
+++ finitary sorts: <empty>
+++ Rewrite System 
	x + 0 -> x
	len(nil) -> 0
	rev(nil) -> nil
	app(nil, y) -> y
	x + s(y) -> s(x + y)
	len(cons(x, y)) -> s(len(y))
	app(cons(x, y), z) -> cons(x, app(y, z))
	rev(cons(x, y)) -> app(rev(y), cons(x, nil))
+++ inductive positions:
... for +: 1
... for app: 0
... for len: 0
... for rev: 0
+++ maximal depths of left-hand sides:
... for app: 2
... for rev: 2
... for len: 2
... for +: 2
+++ general maximal depth = 2
+++ sort dependence: nat < list
+++ test sets for defined functions and sorts:
... for rev
... ... list
		nil
		cons(x, y)
... for app
... ... list
		nil
		cons(x, y)
... for len
... ... list
		nil
		cons(x, y)
... for +
... ... nat
		0
		s(x)

+++ conjecture(s)
	len(rev(app(x, y))) = len(x) + len(y)

+++ inference system initiated
+++ treating clause
	len(rev(app(x, y))) = len(x) + len(y)
+++ inductive narrowing on conjecture
	len(rev(app(x, y))) = len(x) + len(y)
... induction variables of
	len(rev(app(x, y))) = len(x) + len(y)
... are:
	y:list
	x:list
+++ perform INDUCTIVE NARROWING on conjecture 
	len(rev(app(x, y))) = len(x) + len(y)
... with variable y
+++ creating new conjecture
	len(rev(app(x, nil))) = len(x) + len(nil)
+++ creating new conjecture
	len(rev(app(x, cons(xts, yts)))) = len(x) + len(cons(xts, yts))
--- clause
	len(rev(app(x, nil))) = len(x) + len(nil)
... reduced in 2 steps to
	len(rev(app(x, nil))) = len(x)
--- clause
	len(rev(app(x, cons(xts, yts)))) = len(x) + len(cons(xts, yts))
... reduced in 2 steps to
	len(rev(app(x, cons(xts, yts)))) = s(len(x) + len(yts))
+++ inductive narrowing succeeded
--- clause
	len(rev(app(x, y))) = len(x) + len(y)
... oriented to rule
	len(rev(app(x, y))) -> len(x) + len(y)
+++ added new clause(s)
	len(rev(app(x, nil))) = len(x)
	len(rev(app(x, cons(xts, yts)))) = s(len(x) + len(yts))
... to conjectures
--- clause
	len(rev(app(x, nil))) = len(x)
... reduced in 1 step to
	len(x) + len(nil) = len(x)
--- clause
	len(rev(app(x, cons(xts, yts)))) = s(len(x) + len(yts))
... reduced in 1 step to
	len(x) + len(cons(xts, yts)) = s(len(x) + len(yts))

+++ Status of the Inference System
--- Conjectures:
	len(x) + len(nil) = len(x)
	len(x) + len(cons(xts, yts)) = s(len(x) + len(yts))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(rev(app(x, y))) -> len(x) + len(y)
--- Primal Grammar:
	<empty>

--- clause
	len(x) + len(nil) = len(x)
... reduced to tautology
	len(x) = len(x)
--- clause
	len(x) + len(cons(xts, yts)) = s(len(x) + len(yts))
... reduced to tautology
	s(len(x) + len(yts)) = s(len(x) + len(yts))

+++ Status of the Inference System
--- Conjectures:
	<empty>
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(rev(app(x, y))) -> len(x) + len(y)
--- Primal Grammar:
	<empty>

+++ SUCCESS: all conjectures proved
+++ Statistics:
... Number of proof steps          = 2
... Number of induction steps      = 1
... Number of equational steps     = 0
... Number of case rewriting steps = 0
... Elapsed time (seconds)         = 0.003
