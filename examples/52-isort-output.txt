+++ SPECIFICATION --- bidirectional branch, version 0.99
+++ Parameters:
    ===========
+++ input       = 52-isort-input.txt
+++ output      = 52-isort-output.txt
+++ trace       = 3
+++ direction   = last-to-first
+++ drop        = yes
+++ verbose     = 3
+++ split       = 4
+++ loop limit  = 250
-----------------------------------------------------------------------

+++ specification list from 52-isort-input.txt successfully parsed
+++ sorts: nat bool list
+++ finitary sorts: bool
+++ symbol precedence = {<= > isort > insert > ordered > cons > nil > s > 0 > false = true}
+++ Rewrite System 
	0 <= x -> true
	isort(nil) -> nil
	s(x) <= 0 -> false
	ordered(nil) -> true
	s(x) <= s(y) -> x <= y
	ordered(cons(x, nil)) -> true
	insert(x, nil) -> cons(x, nil)
	isort(cons(x, vl)) -> insert(x, isort(vl))
	x <= y = false => ordered(cons(x, cons(y, z))) -> false
	x <= y = true => insert(x, cons(y, z)) -> cons(x, cons(y, z))
	x <= y = false => insert(x, cons(y, z)) -> cons(y, insert(x, z))
	x <= y = true => ordered(cons(x, cons(y, z))) -> ordered(cons(y, z))
+++ inductive positions:
... for <=: 0 1
... for insert: 1
... for isort: 0
... for ordered: 0 0.1
+++ maximal depths of left-hand sides:
... for ordered: 3
... for insert: 2
... for isort: 2
... for <=: 2
+++ general maximal depth = 3
+++ sort dependence: nat < list
+++ test sets for defined functions and sorts:
... for <=
... ... nat
		0
		s(x)
... for insert
... ... list
		nil
		cons(x, y)
... for isort
... ... list
		nil
		cons(x, y)
... for ordered
... ... list
		nil
		cons(0, nil)
		cons(s(x), nil)
		cons(0, cons(x, y))
		cons(s(x), cons(y, z))

+++ conjecture(s)
	ordered(isort(x)) = true

+++ inference system initiated
+++ treating clause
	ordered(isort(x)) = true
+++ inductive narrowing on conjecture
	ordered(isort(x)) = true
... induction variables of
	ordered(isort(x)) = true
... are:
	x:list
+++ perform INDUCTIVE NARROWING on conjecture 
	ordered(isort(x)) = true
... with variable x
+++ creating new conjecture
	ordered(isort(nil)) = true
+++ creating new conjecture
	ordered(isort(cons(xts, yts))) = true
--- clause
	ordered(isort(nil)) = true
... reduced to tautology
	true = true
--- clause
	ordered(isort(cons(xts, yts))) = true
... reduced in 1 step to
	ordered(insert(xts, isort(yts))) = true
+++ inductive narrowing succeeded
--- clause
	ordered(isort(x)) = true
... oriented to rule
	ordered(isort(x)) -> true
+++ added new clause(s)
	ordered(insert(xts, isort(yts))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(insert(xts, isort(yts))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
--- Primal Grammar:
	<empty>

+++ treating clause
	ordered(insert(xts, isort(yts))) = true
+++ inductive narrowing on conjecture
	ordered(insert(xts, isort(yts))) = true
... induction variables of
	ordered(insert(xts, isort(yts))) = true
... are:
	yts:list
+++ perform INDUCTIVE NARROWING on conjecture 
	ordered(insert(xts, isort(yts))) = true
... with variable yts
+++ creating new conjecture
	ordered(insert(xts, isort(nil))) = true
+++ creating new conjecture
	ordered(insert(xts2, isort(cons(xts1, yts)))) = true
--- clause
	ordered(insert(xts, isort(nil))) = true
... reduced to tautology
	true = true
--- clause
	ordered(insert(xts2, isort(cons(xts1, yts)))) = true
... reduced in 1 step to
	ordered(insert(xts2, insert(xts1, isort(yts)))) = true
+++ inductive narrowing succeeded
--- clause
	ordered(insert(xts, isort(yts))) = true
... oriented to rule
	ordered(insert(xts, isort(yts))) -> true
+++ added new clause(s)
	ordered(insert(xts2, insert(xts1, isort(yts)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(insert(xts2, insert(xts1, isort(yts)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
--- Primal Grammar:
	<empty>

+++ treating clause
	ordered(insert(xts2, insert(xts1, isort(yts)))) = true
+++ inductive narrowing on conjecture
	ordered(insert(xts2, insert(xts1, isort(yts)))) = true
... induction variables of
	ordered(insert(xts2, insert(xts1, isort(yts)))) = true
... are:
	yts:list
+++ perform INDUCTIVE NARROWING on conjecture 
	ordered(insert(xts2, insert(xts1, isort(yts)))) = true
... with variable yts
+++ creating new conjecture
	ordered(insert(xts2, insert(xts1, isort(nil)))) = true
+++ creating new conjecture
	ordered(insert(xts3, insert(xts2, isort(cons(xts1, yts))))) = true
--- clause
	ordered(insert(xts2, insert(xts1, isort(nil)))) = true
... reduced in 2 steps to
	ordered(insert(xts2, cons(xts1, nil))) = true
--- clause
	ordered(insert(xts3, insert(xts2, isort(cons(xts1, yts))))) = true
... reduced in 1 step to
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) = true
+++ inductive narrowing succeeded
--- clause
	ordered(insert(xts2, insert(xts1, isort(yts)))) = true
... oriented to rule
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
+++ added new clause(s)
	ordered(insert(xts2, cons(xts1, nil))) = true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(insert(xts2, cons(xts1, nil))) = true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
--- Primal Grammar:
	<empty>

+++ treating clause
	ordered(insert(xts2, cons(xts1, nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	xts2 <= xts1 = false => ordered(cons(xts1, cons(xts2, nil))) = true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) = true
+++ added new clause(s)
	xts2 <= xts1 = false => ordered(cons(xts1, cons(xts2, nil))) = true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) = true
	xts2 <= xts1 = false => ordered(cons(xts1, cons(xts2, nil))) = true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
--- Primal Grammar:
	<empty>

+++ treating clause
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) = true
+++ inductive narrowing on conjecture
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) = true
... induction variables of
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) = true
... are:
	yts:list
+++ perform INDUCTIVE NARROWING on conjecture 
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) = true
... with variable yts
+++ creating new conjecture
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(nil))))) = true
+++ creating new conjecture
	ordered(insert(xts4, insert(xts3, insert(xts2, isort(cons(xts1, yts)))))) = true
--- clause
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(nil))))) = true
... reduced in 2 steps to
	ordered(insert(xts3, insert(xts2, cons(xts1, nil)))) = true
--- clause
	ordered(insert(xts4, insert(xts3, insert(xts2, isort(cons(xts1, yts)))))) = true
... reduced in 1 step to
	ordered(insert(xts4, insert(xts3, insert(xts2, insert(xts1, isort(yts)))))) = true
+++ inductive narrowing succeeded
--- clause
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) = true
... oriented to rule
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
+++ added new clause(s)
	ordered(insert(xts3, insert(xts2, cons(xts1, nil)))) = true
	ordered(insert(xts4, insert(xts3, insert(xts2, insert(xts1, isort(yts)))))) = true
... to conjectures
+++ active wrap
	ordered(insert(., .)) = true
... with sequence
	ordered(insert(xts, isort(yts))) = true
	ordered(insert(xts2, insert(xts1, isort(yts)))) = true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) = true
+++ primal grammar found for head
	{insert, isort, ordered, true}
... and wrap
	ordered(insert(., .)) = true
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
--- clause
	ordered(insert(xts4, insert(xts3, insert(xts2, insert(xts1, isort(yts)))))) = true
... subsumed by lemma
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
... with substitution
	$n <- 3

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = false => ordered(cons(xts1, cons(xts2, nil))) = true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) = true
	ordered(insert(xts3, insert(xts2, cons(xts1, nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	xts2 <= xts1 = false => ordered(cons(xts1, cons(xts2, nil))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = false => ordered(cons(xts1, cons(xts2, nil))) = true
... induction variables of
	xts2 <= xts1 = false => ordered(cons(xts1, cons(xts2, nil))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = false => ordered(cons(xts1, cons(xts2, nil))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = false => ordered(cons(xts, cons(0, nil))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = false => ordered(cons(xts1, cons(s(xts2), nil))) = true
--- clause
	0 <= xts = false => ordered(cons(xts, cons(0, nil))) = true
... reduced in 1 step to
	true = false => ordered(cons(xts, cons(0, nil))) = true
--- clause
	true = false => ordered(cons(xts, cons(0, nil))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = false => ordered(cons(xts1, cons(xts2, nil))) = true
... oriented to rule
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
+++ added new clause(s)
	s(xts2) <= xts1 = false => ordered(cons(xts1, cons(s(xts2), nil))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) = true
	ordered(insert(xts3, insert(xts2, cons(xts1, nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(xts1, cons(s(xts2), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) = true
... induction variables of
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = true => ordered(cons(0, cons(xts, nil))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) = true
--- clause
	0 <= xts = true => ordered(cons(0, cons(xts, nil))) = true
... reduced in 1 step to
	ordered(cons(0, cons(xts, nil))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) = true
... oriented to rule
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
+++ added new clause(s)
	ordered(cons(0, cons(xts, nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(insert(xts3, insert(xts2, cons(xts1, nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(xts1, cons(s(xts2), nil))) = true
	ordered(cons(0, cons(xts, nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	ordered(insert(xts3, insert(xts2, cons(xts1, nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	xts3 <= xts2 = true => ordered(insert(xts1, cons(xts3, cons(xts2, nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(xts3, nil)))) = true
+++ added new clause(s)
	xts3 <= xts2 = true => ordered(insert(xts1, cons(xts3, cons(xts2, nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(xts3, nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = false => ordered(cons(xts1, cons(s(xts2), nil))) = true
	ordered(cons(0, cons(xts, nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(xts3, cons(xts2, nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(xts3, nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	s(xts2) <= xts1 = false => ordered(cons(xts1, cons(s(xts2), nil))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = false => ordered(cons(xts1, cons(s(xts2), nil))) = true
... induction variables of
	s(xts2) <= xts1 = false => ordered(cons(xts1, cons(s(xts2), nil))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = false => ordered(cons(xts1, cons(s(xts2), nil))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = false => ordered(cons(0, cons(s(xts), nil))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = false => ordered(cons(s(xts1), cons(s(xts2), nil))) = true
--- clause
	s(xts) <= 0 = false => ordered(cons(0, cons(s(xts), nil))) = true
... reduced in 1 step to
	ordered(cons(0, cons(s(xts), nil))) = true
--- clause
	s(xts2) <= s(xts1) = false => ordered(cons(s(xts1), cons(s(xts2), nil))) = true
... reduced in 1 step to
	xts2 <= xts1 = false => ordered(cons(s(xts1), cons(s(xts2), nil))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = false => ordered(cons(xts1, cons(s(xts2), nil))) = true
... oriented to rule
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
+++ added new clause(s)
	ordered(cons(0, cons(s(xts), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(xts1), cons(s(xts2), nil))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(0, cons(xts, nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(xts3, cons(xts2, nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(xts3, nil)))) = true
	ordered(cons(0, cons(s(xts), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(xts1), cons(s(xts2), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	ordered(cons(0, cons(xts, nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(xts3, cons(xts2, nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(xts3, nil)))) = true
	ordered(cons(0, cons(s(xts), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(xts1), cons(s(xts2), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) = true
... induction variables of
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = true => ordered(cons(s(xts), cons(0, nil))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = true => ordered(cons(s(xts2), cons(s(xts1), nil))) = true
--- clause
	s(xts) <= 0 = true => ordered(cons(s(xts), cons(0, nil))) = true
... reduced in 1 step to
	false = true => ordered(cons(s(xts), cons(0, nil))) = true
--- clause
	false = true => ordered(cons(s(xts), cons(0, nil))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(xts1) = true => ordered(cons(s(xts2), cons(s(xts1), nil))) = true
... reduced in 1 step to
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) = true
... oriented to rule
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
+++ added new clause(s)
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 <= xts2 = true => ordered(insert(xts1, cons(xts3, cons(xts2, nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(xts3, nil)))) = true
	ordered(cons(0, cons(s(xts), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(xts1), cons(s(xts2), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	xts3 <= xts2 = true => ordered(insert(xts1, cons(xts3, cons(xts2, nil)))) = true
+++ inductive narrowing on conjecture
	xts3 <= xts2 = true => ordered(insert(xts1, cons(xts3, cons(xts2, nil)))) = true
... induction variables of
	xts3 <= xts2 = true => ordered(insert(xts1, cons(xts3, cons(xts2, nil)))) = true
... are:
	xts3:nat
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 <= xts2 = true => ordered(insert(xts1, cons(xts3, cons(xts2, nil)))) = true
... with variable xts3
+++ creating new conjecture
	0 <= xts2 = true => ordered(insert(xts1, cons(0, cons(xts2, nil)))) = true
+++ creating new conjecture
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(xts2, nil)))) = true
--- clause
	0 <= xts2 = true => ordered(insert(xts1, cons(0, cons(xts2, nil)))) = true
... reduced in 1 step to
	ordered(insert(xts2, cons(0, cons(xts1, nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts3 <= xts2 = true => ordered(insert(xts1, cons(xts3, cons(xts2, nil)))) = true
... oriented to rule
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
+++ added new clause(s)
	ordered(insert(xts2, cons(0, cons(xts1, nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(xts2, nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(xts3, nil)))) = true
	ordered(cons(0, cons(s(xts), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(xts1), cons(s(xts2), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) = true
	ordered(insert(xts2, cons(0, cons(xts1, nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(xts2, nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	xts3 <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(xts3, nil)))) = true
+++ inductive narrowing on conjecture
	xts3 <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(xts3, nil)))) = true
... induction variables of
	xts3 <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(xts3, nil)))) = true
... are:
	xts3:nat
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(xts3, nil)))) = true
... with variable xts3
+++ creating new conjecture
	0 <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(0, nil)))) = true
+++ creating new conjecture
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(s(xts3), nil)))) = true
--- clause
	0 <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(0, nil)))) = true
... reduced in 1 step to
	true = false => ordered(insert(xts2, cons(xts1, cons(0, nil)))) = true
--- clause
	true = false => ordered(insert(xts2, cons(xts1, cons(0, nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts3 <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(xts3, nil)))) = true
... oriented to rule
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
+++ added new clause(s)
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(s(xts3), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(0, cons(s(xts), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(xts1), cons(s(xts2), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) = true
	ordered(insert(xts2, cons(0, cons(xts1, nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(xts2, nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(s(xts3), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	ordered(cons(0, cons(s(xts), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = false => ordered(cons(s(xts1), cons(s(xts2), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) = true
	ordered(insert(xts2, cons(0, cons(xts1, nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(xts2, nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(s(xts3), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	xts2 <= xts1 = false => ordered(cons(s(xts1), cons(s(xts2), nil))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = false => ordered(cons(s(xts1), cons(s(xts2), nil))) = true
... induction variables of
	xts2 <= xts1 = false => ordered(cons(s(xts1), cons(s(xts2), nil))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = false => ordered(cons(s(xts1), cons(s(xts2), nil))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = false => ordered(cons(s(xts), cons(s(0), nil))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(xts1), cons(s(s(xts2)), nil))) = true
--- clause
	0 <= xts = false => ordered(cons(s(xts), cons(s(0), nil))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(xts), cons(s(0), nil))) = true
--- clause
	true = false => ordered(cons(s(xts), cons(s(0), nil))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = false => ordered(cons(s(xts1), cons(s(xts2), nil))) = true
... oriented to rule
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
+++ added new clause(s)
	s(xts2) <= xts1 = false => ordered(cons(s(xts1), cons(s(s(xts2)), nil))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) = true
	ordered(insert(xts2, cons(0, cons(xts1, nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(xts2, nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(s(xts3), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(xts1), cons(s(s(xts2)), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) = true
... induction variables of
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = true => ordered(cons(s(0), cons(s(xts), nil))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) = true
--- clause
	0 <= xts = true => ordered(cons(s(0), cons(s(xts), nil))) = true
... reduced in 1 step to
	ordered(cons(s(0), cons(s(xts), nil))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) = true
... oriented to rule
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
+++ added new clause(s)
	ordered(cons(s(0), cons(s(xts), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(insert(xts2, cons(0, cons(xts1, nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(xts2, nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(s(xts3), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(xts1), cons(s(s(xts2)), nil))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	ordered(insert(xts2, cons(0, cons(xts1, nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) = true
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) = true
+++ added new clause(s)
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) = true
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(xts2, nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(s(xts3), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(xts1), cons(s(s(xts2)), nil))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) = true
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) = true
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(xts2, nil)))) = true
+++ inductive narrowing on conjecture
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(xts2, nil)))) = true
... induction variables of
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(xts2, nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(xts2, nil)))) = true
... with variable xts2
+++ creating new conjecture
	s(xts2) <= 0 = true => ordered(insert(xts1, cons(s(xts2), cons(0, nil)))) = true
+++ creating new conjecture
	s(xts3) <= s(xts2) = true => ordered(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = true
--- clause
	s(xts2) <= 0 = true => ordered(insert(xts1, cons(s(xts2), cons(0, nil)))) = true
... reduced in 1 step to
	false = true => ordered(insert(xts2, cons(s(xts1), cons(0, nil)))) = true
--- clause
	false = true => ordered(insert(xts2, cons(s(xts1), cons(0, nil)))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts3) <= s(xts2) = true => ordered(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = true
... reduced in 1 step to
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(xts2, nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
+++ added new clause(s)
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(s(xts3), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(xts1), cons(s(s(xts2)), nil))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) = true
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) = true
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(s(xts3), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(s(xts3), nil)))) = true
... induction variables of
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(s(xts3), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(s(xts3), nil)))) = true
... with variable xts2
+++ creating new conjecture
	s(xts2) <= 0 = false => ordered(insert(xts1, cons(0, cons(s(xts2), nil)))) = true
+++ creating new conjecture
	s(xts3) <= s(xts2) = false => ordered(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = true
--- clause
	s(xts2) <= 0 = false => ordered(insert(xts1, cons(0, cons(s(xts2), nil)))) = true
... reduced in 1 step to
	ordered(insert(xts2, cons(0, cons(s(xts1), nil)))) = true
--- clause
	s(xts3) <= s(xts2) = false => ordered(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = true
... reduced in 1 step to
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(s(xts3), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
+++ added new clause(s)
	ordered(insert(xts2, cons(0, cons(s(xts1), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = false => ordered(cons(s(xts1), cons(s(s(xts2)), nil))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) = true
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) = true
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = true
	ordered(insert(xts2, cons(0, cons(s(xts1), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	s(xts2) <= xts1 = false => ordered(cons(s(xts1), cons(s(s(xts2)), nil))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(xts1), cons(s(s(xts2)), nil))) = true
... induction variables of
	s(xts2) <= xts1 = false => ordered(cons(s(xts1), cons(s(s(xts2)), nil))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = false => ordered(cons(s(xts1), cons(s(s(xts2)), nil))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = false => ordered(cons(s(0), cons(s(s(xts)), nil))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = false => ordered(cons(s(s(xts1)), cons(s(s(xts2)), nil))) = true
--- clause
	s(xts) <= 0 = false => ordered(cons(s(0), cons(s(s(xts)), nil))) = true
... reduced in 1 step to
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
--- clause
	s(xts2) <= s(xts1) = false => ordered(cons(s(s(xts1)), cons(s(s(xts2)), nil))) = true
... reduced in 1 step to
	xts2 <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(xts2)), nil))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = false => ordered(cons(s(xts1), cons(s(s(xts2)), nil))) = true
... oriented to rule
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
+++ added new clause(s)
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(xts2)), nil))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(0), cons(s(xts), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) = true
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) = true
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = true
	ordered(insert(xts2, cons(0, cons(s(xts1), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(xts2)), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	ordered(cons(s(0), cons(s(xts), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) = true
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) = true
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = true
	ordered(insert(xts2, cons(0, cons(s(xts1), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(xts2)), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) = true
... induction variables of
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = true => ordered(cons(s(s(xts)), cons(s(0), nil))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) = true
--- clause
	s(xts) <= 0 = true => ordered(cons(s(s(xts)), cons(s(0), nil))) = true
... reduced in 1 step to
	false = true => ordered(cons(s(s(xts)), cons(s(0), nil))) = true
--- clause
	false = true => ordered(cons(s(s(xts)), cons(s(0), nil))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(xts1) = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) = true
... reduced in 1 step to
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) = true
... oriented to rule
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
+++ added new clause(s)
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) = true
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = true
	ordered(insert(xts2, cons(0, cons(s(xts1), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) = true
... induction variables of
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= 0 = false => ordered(cons(0, insert(0, cons(xts, nil)))) = true
+++ creating new conjecture
	s(xts2) <= 0 = false => ordered(cons(0, insert(s(xts2), cons(xts1, nil)))) = true
--- clause
	0 <= 0 = false => ordered(cons(0, insert(0, cons(xts, nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(0, insert(0, cons(xts, nil)))) = true
--- clause
	true = false => ordered(cons(0, insert(0, cons(xts, nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= 0 = false => ordered(cons(0, insert(s(xts2), cons(xts1, nil)))) = true
... reduced in 1 step to
	ordered(cons(0, insert(s(xts2), cons(xts1, nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) = true
... oriented to rule
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
+++ added new clause(s)
	ordered(cons(0, insert(s(xts2), cons(xts1, nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = true
	ordered(insert(xts2, cons(0, cons(s(xts1), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) = true
	ordered(cons(0, insert(s(xts2), cons(xts1, nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) = true
... induction variables of
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= 0 = true => ordered(cons(0, cons(0, cons(xts, nil)))) = true
+++ creating new conjecture
	s(xts2) <= 0 = true => ordered(cons(s(xts2), cons(0, cons(xts1, nil)))) = true
--- clause
	0 <= 0 = true => ordered(cons(0, cons(0, cons(xts, nil)))) = true
... reduced in 1 step to
	ordered(cons(0, cons(0, cons(xts, nil)))) = true
--- clause
	s(xts2) <= 0 = true => ordered(cons(s(xts2), cons(0, cons(xts1, nil)))) = true
... reduced in 1 step to
	false = true => ordered(cons(s(xts2), cons(0, cons(xts1, nil)))) = true
--- clause
	false = true => ordered(cons(s(xts2), cons(0, cons(xts1, nil)))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) = true
... oriented to rule
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
+++ added new clause(s)
	ordered(cons(0, cons(0, cons(xts, nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = true
	ordered(insert(xts2, cons(0, cons(s(xts1), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) = true
	ordered(cons(0, insert(s(xts2), cons(xts1, nil)))) = true
	ordered(cons(0, cons(0, cons(xts, nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = true
+++ inductive narrowing on conjecture
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = true
... induction variables of
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = true
... are:
	xts3:nat
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = true
... with variable xts3
+++ creating new conjecture
	0 <= xts2 = true => ordered(insert(xts1, cons(s(0), cons(s(xts2), nil)))) = true
+++ creating new conjecture
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(xts2), nil)))) = true
--- clause
	0 <= xts2 = true => ordered(insert(xts1, cons(s(0), cons(s(xts2), nil)))) = true
... reduced in 1 step to
	ordered(insert(xts2, cons(s(0), cons(s(xts1), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = true
... oriented to rule
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
+++ added new clause(s)
	ordered(insert(xts2, cons(s(0), cons(s(xts1), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(xts2), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(insert(xts2, cons(0, cons(s(xts1), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) = true
	ordered(cons(0, insert(s(xts2), cons(xts1, nil)))) = true
	ordered(cons(0, cons(0, cons(xts, nil)))) = true
	ordered(insert(xts2, cons(s(0), cons(s(xts1), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(xts2), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	ordered(insert(xts2, cons(0, cons(s(xts1), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) = true
+++ added new clause(s)
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) = true
	ordered(cons(0, insert(s(xts2), cons(xts1, nil)))) = true
	ordered(cons(0, cons(0, cons(xts, nil)))) = true
	ordered(insert(xts2, cons(s(0), cons(s(xts1), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(xts2), nil)))) = true
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = true
+++ inductive narrowing on conjecture
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = true
... induction variables of
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = true
... are:
	xts3:nat
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = true
... with variable xts3
+++ creating new conjecture
	0 <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(0), nil)))) = true
+++ creating new conjecture
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(s(xts3)), nil)))) = true
--- clause
	0 <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(0), nil)))) = true
... reduced in 1 step to
	true = false => ordered(insert(xts2, cons(s(xts1), cons(s(0), nil)))) = true
--- clause
	true = false => ordered(insert(xts2, cons(s(xts1), cons(s(0), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = true
... oriented to rule
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
+++ added new clause(s)
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(s(xts3)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) = true
	ordered(cons(0, insert(s(xts2), cons(xts1, nil)))) = true
	ordered(cons(0, cons(0, cons(xts, nil)))) = true
	ordered(insert(xts2, cons(s(0), cons(s(xts1), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(xts2), nil)))) = true
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(s(xts3)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) = true
	ordered(cons(0, insert(s(xts2), cons(xts1, nil)))) = true
	ordered(cons(0, cons(0, cons(xts, nil)))) = true
	ordered(insert(xts2, cons(s(0), cons(s(xts1), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(xts2), nil)))) = true
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(s(xts3)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	xts2 <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(xts2)), nil))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(xts2)), nil))) = true
... induction variables of
	xts2 <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(xts2)), nil))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(xts2)), nil))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = false => ordered(cons(s(s(xts)), cons(s(s(0)), nil))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(s(xts2))), nil))) = true
--- clause
	0 <= xts = false => ordered(cons(s(s(xts)), cons(s(s(0)), nil))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(s(xts)), cons(s(s(0)), nil))) = true
--- clause
	true = false => ordered(cons(s(s(xts)), cons(s(s(0)), nil))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(xts2)), nil))) = true
... oriented to rule
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
+++ added new clause(s)
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(s(xts2))), nil))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) = true
	ordered(cons(0, insert(s(xts2), cons(xts1, nil)))) = true
	ordered(cons(0, cons(0, cons(xts, nil)))) = true
	ordered(insert(xts2, cons(s(0), cons(s(xts1), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(xts2), nil)))) = true
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(s(xts3)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(s(xts2))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) = true
... induction variables of
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = true => ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) = true
--- clause
	0 <= xts = true => ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
... reduced in 1 step to
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) = true
... oriented to rule
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
+++ added new clause(s)
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(0, insert(s(xts2), cons(xts1, nil)))) = true
	ordered(cons(0, cons(0, cons(xts, nil)))) = true
	ordered(insert(xts2, cons(s(0), cons(s(xts1), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(xts2), nil)))) = true
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(s(xts3)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(s(xts2))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	ordered(cons(0, insert(s(xts2), cons(xts1, nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts1, cons(s(xts2), nil)))) = true
+++ added new clause(s)
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts1, cons(s(xts2), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(0, cons(0, cons(xts, nil)))) = true
	ordered(insert(xts2, cons(s(0), cons(s(xts1), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(xts2), nil)))) = true
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(s(xts3)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(s(xts2))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts1, cons(s(xts2), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	ordered(cons(0, cons(0, cons(xts, nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(0, cons(xts, nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(0, cons(xts, nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	ordered(insert(xts2, cons(s(0), cons(s(xts1), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(xts2), nil)))) = true
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(s(xts3)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(s(xts2))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts1, cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(xts, nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	ordered(insert(xts2, cons(s(0), cons(s(xts1), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) = true
+++ added new clause(s)
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(xts2), nil)))) = true
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(s(xts3)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(s(xts2))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts1, cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(xts, nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(xts2), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(xts2), nil)))) = true
... induction variables of
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(xts2), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(xts2), nil)))) = true
... with variable xts2
+++ creating new conjecture
	s(xts2) <= 0 = true => ordered(insert(xts1, cons(s(s(xts2)), cons(s(0), nil)))) = true
+++ creating new conjecture
	s(xts3) <= s(xts2) = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = true
--- clause
	s(xts2) <= 0 = true => ordered(insert(xts1, cons(s(s(xts2)), cons(s(0), nil)))) = true
... reduced in 1 step to
	false = true => ordered(insert(xts2, cons(s(s(xts1)), cons(s(0), nil)))) = true
--- clause
	false = true => ordered(insert(xts2, cons(s(s(xts1)), cons(s(0), nil)))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts3) <= s(xts2) = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = true
... reduced in 1 step to
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(xts2), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
+++ added new clause(s)
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(s(xts3)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(s(xts2))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts1, cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(xts, nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) = true
... induction variables of
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= 0 = false => ordered(cons(0, insert(0, cons(s(xts), nil)))) = true
+++ creating new conjecture
	s(xts2) <= 0 = false => ordered(cons(0, insert(s(xts2), cons(s(xts1), nil)))) = true
--- clause
	0 <= 0 = false => ordered(cons(0, insert(0, cons(s(xts), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(0, insert(0, cons(s(xts), nil)))) = true
--- clause
	true = false => ordered(cons(0, insert(0, cons(s(xts), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= 0 = false => ordered(cons(0, insert(s(xts2), cons(s(xts1), nil)))) = true
... reduced in 1 step to
	ordered(cons(0, insert(s(xts2), cons(s(xts1), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) = true
... oriented to rule
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
+++ added new clause(s)
	ordered(cons(0, insert(s(xts2), cons(s(xts1), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(s(xts3)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(s(xts2))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts1, cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(xts, nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(0, insert(s(xts2), cons(s(xts1), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) = true
... induction variables of
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= 0 = true => ordered(cons(0, cons(0, cons(s(xts), nil)))) = true
+++ creating new conjecture
	s(xts2) <= 0 = true => ordered(cons(s(xts2), cons(0, cons(s(xts1), nil)))) = true
--- clause
	0 <= 0 = true => ordered(cons(0, cons(0, cons(s(xts), nil)))) = true
... reduced in 1 step to
	ordered(cons(0, cons(0, cons(s(xts), nil)))) = true
--- clause
	s(xts2) <= 0 = true => ordered(cons(s(xts2), cons(0, cons(s(xts1), nil)))) = true
... reduced in 1 step to
	false = true => ordered(cons(s(xts2), cons(0, cons(s(xts1), nil)))) = true
--- clause
	false = true => ordered(cons(s(xts2), cons(0, cons(s(xts1), nil)))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) = true
... oriented to rule
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
+++ added new clause(s)
	ordered(cons(0, cons(0, cons(s(xts), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(s(xts3)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(s(xts2))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts1, cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(xts, nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(0, insert(s(xts2), cons(s(xts1), nil)))) = true
	ordered(cons(0, cons(0, cons(s(xts), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(s(xts3)), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(s(xts3)), nil)))) = true
... induction variables of
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(s(xts3)), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(s(xts3)), nil)))) = true
... with variable xts2
+++ creating new conjecture
	s(xts2) <= 0 = false => ordered(insert(xts1, cons(s(0), cons(s(s(xts2)), nil)))) = true
+++ creating new conjecture
	s(xts3) <= s(xts2) = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = true
--- clause
	s(xts2) <= 0 = false => ordered(insert(xts1, cons(s(0), cons(s(s(xts2)), nil)))) = true
... reduced in 1 step to
	ordered(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
--- clause
	s(xts3) <= s(xts2) = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = true
... reduced in 1 step to
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(s(xts3)), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	ordered(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(s(xts2))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts1, cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(xts, nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(0, insert(s(xts2), cons(s(xts1), nil)))) = true
	ordered(cons(0, cons(0, cons(s(xts), nil)))) = true
	ordered(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true

+++ treating clause
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(s(xts2))), nil))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(s(xts2))), nil))) = true
... induction variables of
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(s(xts2))), nil))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(s(xts2))), nil))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = false => ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
--- clause
	s(xts) <= 0 = false => ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
... reduced in 1 step to
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
--- clause
	s(xts2) <= s(xts1) = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
... reduced in 1 step to
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(s(xts2))), nil))) = true
... oriented to rule
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
+++ added new clause(s)
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
... to conjectures
+++ active wrap
	s(xts2) <= xts1 = false => ordered(cons(., cons(s(.), nil))) = true
... with sequence
	s(xts2) <= xts1 = false => ordered(cons(xts1, cons(s(xts2), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(xts1), cons(s(s(xts2)), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(s(xts2))), nil))) = true
+++ primal grammar found for head
	{<=, cons, false, nil, ordered, s, true}
... and wrap
	s(xts2) <= xts1 = false => ordered(cons(., cons(s(.), nil))) = true
+++ Presburger system  = {
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts1, cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(xts, nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(0, insert(s(xts2), cons(s(xts1), nil)))) = true
	ordered(cons(0, cons(0, cons(s(xts), nil)))) = true
	ordered(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true

+++ treating clause
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts1, cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(xts, nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(0, insert(s(xts2), cons(s(xts1), nil)))) = true
	ordered(cons(0, cons(0, cons(s(xts), nil)))) = true
	ordered(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true

+++ treating clause
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) = true
... induction variables of
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = true => ordered(cons(s(s(s(xts))), cons(s(s(0)), nil))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = true
--- clause
	s(xts) <= 0 = true => ordered(cons(s(s(s(xts))), cons(s(s(0)), nil))) = true
... reduced in 1 step to
	false = true => ordered(cons(s(s(s(xts))), cons(s(s(0)), nil))) = true
--- clause
	false = true => ordered(cons(s(s(s(xts))), cons(s(s(0)), nil))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(xts1) = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = true
... reduced in 1 step to
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) = true
... oriented to rule
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
+++ added new clause(s)
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = true
... to conjectures
+++ active wrap
	s(xts2) <= xts1 = true => ordered(cons(s(.), cons(., nil))) = true
... with sequence
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) = true
+++ primal grammar found for head
	{<=, cons, nil, ordered, s, true}
... and wrap
	s(xts2) <= xts1 = true => ordered(cons(s(.), cons(., nil))) = true
+++ Presburger system  = {
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts1, cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(xts, nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(0, insert(s(xts2), cons(s(xts1), nil)))) = true
	ordered(cons(0, cons(0, cons(s(xts), nil)))) = true
	ordered(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true

+++ treating clause
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) = true
... induction variables of
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = true => ordered(cons(0, cons(s(xts), cons(0, nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
--- clause
	s(xts) <= 0 = true => ordered(cons(0, cons(s(xts), cons(0, nil)))) = true
... reduced in 1 step to
	false = true => ordered(cons(0, cons(s(xts), cons(0, nil)))) = true
--- clause
	false = true => ordered(cons(0, cons(s(xts), cons(0, nil)))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(xts1) = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
+++ added new clause(s)
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts1, cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(xts, nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(0, insert(s(xts2), cons(s(xts1), nil)))) = true
	ordered(cons(0, cons(0, cons(s(xts), nil)))) = true
	ordered(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true

+++ treating clause
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts1, cons(s(xts2), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts1, cons(s(xts2), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts1, cons(s(xts2), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts1, cons(s(xts2), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = false => ordered(cons(0, cons(0, cons(s(xts), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
--- clause
	s(xts) <= 0 = false => ordered(cons(0, cons(0, cons(s(xts), nil)))) = true
... reduced in 1 step to
	ordered(cons(0, cons(0, cons(s(xts), nil)))) = true
--- clause
	s(xts2) <= s(xts1) = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
--- clause
	ordered(cons(0, cons(0, cons(s(xts), nil)))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts1, cons(s(xts2), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
+++ added new clause(s)
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(0, cons(xts, nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(0, insert(s(xts2), cons(s(xts1), nil)))) = true
	ordered(cons(0, cons(0, cons(s(xts), nil)))) = true
	ordered(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true

+++ treating clause
	ordered(cons(0, cons(xts, nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(0, insert(s(xts2), cons(s(xts1), nil)))) = true
	ordered(cons(0, cons(0, cons(s(xts), nil)))) = true
	ordered(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true

+++ treating clause
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) = true
... induction variables of
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= s(0) = false => ordered(cons(s(0), insert(0, cons(s(xts), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(0) = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) = true
--- clause
	0 <= s(0) = false => ordered(cons(s(0), insert(0, cons(s(xts), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(0), insert(0, cons(s(xts), nil)))) = true
--- clause
	true = false => ordered(cons(s(0), insert(0, cons(s(xts), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(0) = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) = true
... reduced in 1 step to
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) = true
... oriented to rule
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
+++ added new clause(s)
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(0, insert(s(xts2), cons(s(xts1), nil)))) = true
	ordered(cons(0, cons(0, cons(s(xts), nil)))) = true
	ordered(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true

+++ treating clause
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) = true
... induction variables of
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= s(0) = true => ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(0) = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) = true
--- clause
	0 <= s(0) = true => ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
... reduced in 1 step to
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
--- clause
	s(xts2) <= s(0) = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) = true
... reduced in 1 step to
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) = true
... oriented to rule
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
+++ added new clause(s)
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(0, insert(s(xts2), cons(s(xts1), nil)))) = true
	ordered(cons(0, cons(0, cons(s(xts), nil)))) = true
	ordered(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true

+++ treating clause
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = true
+++ inductive narrowing on conjecture
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = true
... induction variables of
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = true
... are:
	xts3:nat
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = true
... with variable xts3
+++ creating new conjecture
	0 <= xts2 = true => ordered(insert(xts1, cons(s(s(0)), cons(s(s(xts2)), nil)))) = true
+++ creating new conjecture
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(xts2)), nil)))) = true
--- clause
	0 <= xts2 = true => ordered(insert(xts1, cons(s(s(0)), cons(s(s(xts2)), nil)))) = true
... reduced in 1 step to
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = true
... oriented to rule
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(xts2)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(0, insert(s(xts2), cons(s(xts1), nil)))) = true
	ordered(cons(0, cons(0, cons(s(xts), nil)))) = true
	ordered(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(xts2)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true

+++ treating clause
	ordered(cons(0, insert(s(xts2), cons(s(xts1), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
+++ added new clause(s)
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(0, cons(0, cons(s(xts), nil)))) = true
	ordered(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true

+++ treating clause
	ordered(cons(0, cons(0, cons(s(xts), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(0, cons(s(xts), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(0, cons(s(xts), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	ordered(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(s(xts), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true

+++ treating clause
	ordered(insert(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
+++ added new clause(s)
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true

+++ treating clause
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = true
+++ inductive narrowing on conjecture
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = true
... induction variables of
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = true
... are:
	xts3:nat
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = true
... with variable xts3
+++ creating new conjecture
	0 <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(0)), nil)))) = true
+++ creating new conjecture
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
--- clause
	0 <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(0)), nil)))) = true
... reduced in 1 step to
	true = false => ordered(insert(xts2, cons(s(s(xts1)), cons(s(s(0)), nil)))) = true
--- clause
	true = false => ordered(insert(xts2, cons(s(s(xts1)), cons(s(s(0)), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = true
... oriented to rule
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true

+++ treating clause
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true

+++ treating clause
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
... induction variables of
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = false => ordered(cons(s(s(s(xts))), cons(s(s(s(0))), nil))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil))) = true
--- clause
	0 <= xts = false => ordered(cons(s(s(s(xts))), cons(s(s(s(0))), nil))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(s(s(xts))), cons(s(s(s(0))), nil))) = true
--- clause
	true = false => ordered(cons(s(s(s(xts))), cons(s(s(s(0))), nil))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil))) = true
... subsumed by lemma
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
... with substitution
	$n <- 3
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
... oriented to rule
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
+++ active wrap
	xts2 <= xts1 = false => ordered(cons(s(.), cons(s(.), nil))) = true
... with sequence
	xts2 <= xts1 = false => ordered(cons(s(xts1), cons(s(xts2), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(xts1)), cons(s(s(xts2)), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil))) = true
+++ primal grammar found for head
	{<=, cons, false, nil, ordered, s, true}
... and wrap
	xts2 <= xts1 = false => ordered(cons(s(.), cons(s(.), nil))) = true
+++ Presburger system  = {
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true

+++ treating clause
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = true
... induction variables of
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = true => ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil))) = true
--- clause
	0 <= xts = true => ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
... reduced in 1 step to
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
--- clause
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil))) = true
... subsumed by lemma
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
... with substitution
	$n <- 3
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = true
... oriented to rule
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
+++ added new clause(s)
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
... to conjectures
+++ active wrap
	xts2 <= xts1 = true => ordered(cons(s(.), cons(s(.), nil))) = true
... with sequence
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) = true
+++ primal grammar found for head
	{<=, cons, nil, ordered, s, true}
... and wrap
	xts2 <= xts1 = true => ordered(cons(s(.), cons(s(.), nil))) = true
+++ Presburger system  = {
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true

+++ treating clause
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
... induction variables of
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = true => ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
--- clause
	0 <= xts = true => ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
... reduced in 1 step to
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
--- clause
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
... oriented to rule
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
+++ added new clause(s)
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true

+++ treating clause
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
... induction variables of
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = false => ordered(cons(0, cons(s(xts), cons(s(0), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
--- clause
	0 <= xts = false => ordered(cons(0, cons(s(xts), cons(s(0), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(0, cons(s(xts), cons(s(0), nil)))) = true
--- clause
	true = false => ordered(cons(0, cons(s(xts), cons(s(0), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
... oriented to rule
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
+++ added new clause(s)
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true

+++ treating clause
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) = true
... induction variables of
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= 0 = false => ordered(cons(s(0), insert(s(0), cons(s(xts), nil)))) = true
+++ creating new conjecture
	s(xts2) <= 0 = false => ordered(cons(s(0), insert(s(s(xts2)), cons(s(xts1), nil)))) = true
--- clause
	0 <= 0 = false => ordered(cons(s(0), insert(s(0), cons(s(xts), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(0), insert(s(0), cons(s(xts), nil)))) = true
--- clause
	true = false => ordered(cons(s(0), insert(s(0), cons(s(xts), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= 0 = false => ordered(cons(s(0), insert(s(s(xts2)), cons(s(xts1), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(xts1), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) = true
... oriented to rule
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(xts1), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(xts1), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true

+++ treating clause
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(xts1), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true

+++ treating clause
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) = true
... induction variables of
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= 0 = true => ordered(cons(s(0), cons(s(0), cons(s(xts), nil)))) = true
+++ creating new conjecture
	s(xts2) <= 0 = true => ordered(cons(s(s(xts2)), cons(s(0), cons(s(xts1), nil)))) = true
--- clause
	0 <= 0 = true => ordered(cons(s(0), cons(s(0), cons(s(xts), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(0), cons(s(0), cons(s(xts), nil)))) = true
--- clause
	s(xts2) <= 0 = true => ordered(cons(s(s(xts2)), cons(s(0), cons(s(xts1), nil)))) = true
... reduced in 1 step to
	false = true => ordered(cons(s(s(xts2)), cons(s(0), cons(s(xts1), nil)))) = true
--- clause
	false = true => ordered(cons(s(s(xts2)), cons(s(0), cons(s(xts1), nil)))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) = true
... oriented to rule
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(0), cons(s(0), cons(s(xts), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(xts1), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(xts), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true

+++ treating clause
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
+++ added new clause(s)
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(xts1), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true

+++ treating clause
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(xts2)), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(xts2)), nil)))) = true
... induction variables of
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(xts2)), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(xts2)), nil)))) = true
... with variable xts2
+++ creating new conjecture
	s(xts2) <= 0 = true => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(0)), nil)))) = true
+++ creating new conjecture
	s(xts3) <= s(xts2) = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
--- clause
	s(xts2) <= 0 = true => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(0)), nil)))) = true
... reduced in 1 step to
	false = true => ordered(insert(xts2, cons(s(s(s(xts1))), cons(s(s(0)), nil)))) = true
--- clause
	false = true => ordered(insert(xts2, cons(s(s(s(xts1))), cons(s(s(0)), nil)))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts3) <= s(xts2) = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
... reduced in 1 step to
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(xts2)), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
... to conjectures
+++ active wrap
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(.), cons(., nil)))) = true
... with sequence
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(xts2, nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(xts2), nil)))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(xts2)), nil)))) = true
+++ primal grammar found for head
	{<=, cons, insert, nil, ordered, s, true}
... and wrap
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(.), cons(., nil)))) = true
+++ Presburger system  = {
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(xts1), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true

+++ treating clause
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
... induction variables of
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = true => ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
--- clause
	0 <= xts = true => ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
... reduced in 1 step to
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
--- clause
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
... oriented to rule
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
+++ added new clause(s)
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	ordered(cons(0, cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(xts1), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true

+++ treating clause
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
... induction variables of
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = false => ordered(cons(0, cons(s(xts), cons(s(0), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
--- clause
	0 <= xts = false => ordered(cons(0, cons(s(xts), cons(s(0), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(0, cons(s(xts), cons(s(0), nil)))) = true
--- clause
	true = false => ordered(cons(0, cons(s(xts), cons(s(0), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
... oriented to rule
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(0, cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(xts1), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true

+++ treating clause
	ordered(cons(0, cons(s(xts), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(xts1), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true

+++ treating clause
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = true
... induction variables of
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= s(0) = false => ordered(cons(s(0), insert(0, cons(s(s(xts)), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(0) = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
--- clause
	0 <= s(0) = false => ordered(cons(s(0), insert(0, cons(s(s(xts)), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(0), insert(0, cons(s(s(xts)), nil)))) = true
--- clause
	true = false => ordered(cons(s(0), insert(0, cons(s(s(xts)), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(0) = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
... reduced in 1 step to
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) = true
... oriented to rule
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(xts1), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true

+++ treating clause
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
... induction variables of
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= s(0) = true => ordered(cons(0, cons(s(0), cons(s(s(xts)), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(0) = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) = true
--- clause
	0 <= s(0) = true => ordered(cons(0, cons(s(0), cons(s(s(xts)), nil)))) = true
... reduced in 1 step to
	ordered(cons(0, cons(s(0), cons(s(s(xts)), nil)))) = true
--- clause
	s(xts2) <= s(0) = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) = true
... reduced in 1 step to
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) = true
... oriented to rule
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	ordered(cons(0, cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(xts1), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true

+++ treating clause
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
... induction variables of
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	s(xts2) <= 0 = false => ordered(insert(xts1, cons(s(s(0)), cons(s(s(s(xts2))), nil)))) = true
+++ creating new conjecture
	s(xts3) <= s(xts2) = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
--- clause
	s(xts2) <= 0 = false => ordered(insert(xts1, cons(s(s(0)), cons(s(s(s(xts2))), nil)))) = true
... reduced in 1 step to
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
--- clause
	s(xts3) <= s(xts2) = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
... reduced in 1 step to
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
... to conjectures
+++ active wrap
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(., cons(s(.), nil)))) = true
... with sequence
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(xts2, cons(s(xts3), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(s(xts3)), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(s(xts3))), nil)))) = true
+++ primal grammar found for head
	{<=, cons, false, insert, nil, ordered, s, true}
... and wrap
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(., cons(s(.), nil)))) = true
+++ Presburger system  = {
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(xts1), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(xts1), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = true => ordered(cons(0, cons(s(s(xts)), cons(s(0), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
--- clause
	s(xts) <= 0 = true => ordered(cons(0, cons(s(s(xts)), cons(s(0), nil)))) = true
... reduced in 1 step to
	false = true => ordered(cons(0, cons(s(s(xts)), cons(s(0), nil)))) = true
--- clause
	false = true => ordered(cons(0, cons(s(s(xts)), cons(s(0), nil)))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(xts1) = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
+++ added new clause(s)
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(xts1), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = false => ordered(cons(0, cons(s(0), cons(s(s(xts)), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
--- clause
	s(xts) <= 0 = false => ordered(cons(0, cons(s(0), cons(s(s(xts)), nil)))) = true
... reduced in 1 step to
	ordered(cons(0, cons(s(0), cons(s(s(xts)), nil)))) = true
--- clause
	s(xts2) <= s(xts1) = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
--- clause
	ordered(cons(0, cons(s(0), cons(s(s(xts)), nil)))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(xts1), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(xts1), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts1), cons(s(s(xts2)), nil)))) = true
+++ added new clause(s)
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts1), cons(s(s(xts2)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts1), cons(s(s(xts2)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	ordered(cons(s(0), cons(s(xts), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(0), cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts1), cons(s(s(xts2)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	ordered(cons(s(0), cons(s(0), cons(s(xts), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) = true
... induction variables of
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(0, cons(s(s(xts)), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(s(0)) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
--- clause
	0 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(0, cons(s(s(xts)), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(s(0)), insert(0, cons(s(s(xts)), nil)))) = true
--- clause
	true = false => ordered(cons(s(s(0)), insert(0, cons(s(s(xts)), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(s(0)) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
... reduced in 1 step to
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) = true
... oriented to rule
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
... induction variables of
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= s(s(0)) = true => ordered(cons(0, cons(s(s(0)), cons(s(s(xts)), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
--- clause
	0 <= s(s(0)) = true => ordered(cons(0, cons(s(s(0)), cons(s(s(xts)), nil)))) = true
... reduced in 1 step to
	ordered(cons(0, cons(s(s(0)), cons(s(s(xts)), nil)))) = true
--- clause
	s(xts2) <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
... reduced in 1 step to
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
... oriented to rule
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	ordered(cons(0, cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
+++ inductive narrowing on conjecture
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
... induction variables of
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
... are:
	xts3:nat
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
... with variable xts3
+++ creating new conjecture
	0 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(0))), cons(s(s(s(xts2))), nil)))) = true
+++ creating new conjecture
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(s(xts3)))), cons(s(s(s(xts2))), nil)))) = true
--- clause
	0 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(0))), cons(s(s(s(xts2))), nil)))) = true
... reduced in 1 step to
	ordered(insert(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
--- clause
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(s(s(s(xts3)))), cons(s(s(s(xts2))), nil)))) = true
... subsumed by lemma
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
... with substitution
	$n <- 3
+++ inductive narrowing succeeded
--- clause
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
... oriented to rule
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	ordered(insert(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... to conjectures
+++ active wrap
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(.), cons(s(.), nil)))) = true
... with sequence
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(xts3), cons(s(xts2), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(xts3)), cons(s(s(xts2)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(s(s(xts3))), cons(s(s(s(xts2))), nil)))) = true
+++ primal grammar found for head
	{<=, cons, insert, nil, ordered, s, true}
... and wrap
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(.), cons(s(.), nil)))) = true
+++ Presburger system  = {
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	ordered(cons(0, cons(s(0), cons(s(xts), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
... induction variables of
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= 0 = false => ordered(cons(s(0), insert(s(0), cons(s(s(xts)), nil)))) = true
+++ creating new conjecture
	s(xts2) <= 0 = false => ordered(cons(s(0), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
--- clause
	0 <= 0 = false => ordered(cons(s(0), insert(s(0), cons(s(s(xts)), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(0), insert(s(0), cons(s(s(xts)), nil)))) = true
--- clause
	true = false => ordered(cons(s(0), insert(s(0), cons(s(s(xts)), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= 0 = false => ordered(cons(s(0), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
... oriented to rule
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(0, cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	ordered(cons(0, cons(s(0), cons(s(s(xts)), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) = true
... induction variables of
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= 0 = true => ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
+++ creating new conjecture
	s(xts2) <= 0 = true => ordered(cons(s(s(xts2)), cons(s(0), cons(s(s(xts1)), nil)))) = true
--- clause
	0 <= 0 = true => ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
--- clause
	s(xts2) <= 0 = true => ordered(cons(s(s(xts2)), cons(s(0), cons(s(s(xts1)), nil)))) = true
... reduced in 1 step to
	false = true => ordered(cons(s(s(xts2)), cons(s(0), cons(s(s(xts1)), nil)))) = true
--- clause
	false = true => ordered(cons(s(s(xts2)), cons(s(0), cons(s(s(xts1)), nil)))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) = true
... oriented to rule
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	ordered(insert(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
+++ added new clause(s)
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
+++ inductive narrowing on conjecture
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
... induction variables of
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
... are:
	xts3:nat
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
... with variable xts3
+++ creating new conjecture
	0 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(0))), nil)))) = true
+++ creating new conjecture
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(s(xts3)))), nil)))) = true
--- clause
	0 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(0))), nil)))) = true
... reduced in 1 step to
	true = false => ordered(insert(xts2, cons(s(s(s(xts1))), cons(s(s(s(0))), nil)))) = true
--- clause
	true = false => ordered(insert(xts2, cons(s(s(s(xts1))), cons(s(s(s(0))), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(s(xts3)))), nil)))) = true
... subsumed by lemma
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
... with substitution
	$n <- 3
+++ inductive narrowing succeeded
--- clause
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
... oriented to rule
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
+++ active wrap
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(.), cons(s(.), nil)))) = true
... with sequence
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(xts2), cons(s(xts3), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(xts2)), cons(s(s(xts3)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(s(s(xts2))), cons(s(s(s(xts3))), nil)))) = true
+++ primal grammar found for head
	{<=, cons, false, insert, nil, ordered, s, true}
... and wrap
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(.), cons(s(.), nil)))) = true
+++ Presburger system  = {
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... induction variables of
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = true => ordered(cons(0, cons(s(s(0)), cons(s(s(xts)), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
--- clause
	0 <= xts = true => ordered(cons(0, cons(s(s(0)), cons(s(s(xts)), nil)))) = true
... reduced in 1 step to
	ordered(cons(0, cons(s(s(0)), cons(s(s(xts)), nil)))) = true
--- clause
	ordered(cons(0, cons(s(s(0)), cons(s(s(xts)), nil)))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... oriented to rule
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
... induction variables of
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = false => ordered(cons(0, cons(s(s(xts)), cons(s(s(0)), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
--- clause
	0 <= xts = false => ordered(cons(0, cons(s(s(xts)), cons(s(s(0)), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(0, cons(s(s(xts)), cons(s(s(0)), nil)))) = true
--- clause
	true = false => ordered(cons(0, cons(s(s(xts)), cons(s(s(0)), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
... oriented to rule
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = true => ordered(cons(s(0), cons(s(s(xts)), cons(s(0), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
--- clause
	s(xts) <= 0 = true => ordered(cons(s(0), cons(s(s(xts)), cons(s(0), nil)))) = true
... reduced in 1 step to
	false = true => ordered(cons(s(0), cons(s(s(xts)), cons(s(0), nil)))) = true
--- clause
	false = true => ordered(cons(s(0), cons(s(s(xts)), cons(s(0), nil)))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(xts1) = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
+++ added new clause(s)
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts1), cons(s(s(xts2)), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts1), cons(s(s(xts2)), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts1), cons(s(s(xts2)), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts1), cons(s(s(xts2)), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = false => ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
--- clause
	s(xts) <= 0 = false => ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
--- clause
	s(xts2) <= s(xts1) = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
--- clause
	ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts1), cons(s(s(xts2)), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(0), cons(s(xts), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	ordered(cons(s(0), cons(s(xts), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
... induction variables of
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= s(0) = false => ordered(cons(s(s(0)), insert(s(0), cons(s(s(xts)), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(0) = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
--- clause
	0 <= s(0) = false => ordered(cons(s(s(0)), insert(s(0), cons(s(s(xts)), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(s(0)), insert(s(0), cons(s(s(xts)), nil)))) = true
--- clause
	true = false => ordered(cons(s(s(0)), insert(s(0), cons(s(s(xts)), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(0) = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... reduced in 1 step to
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) = true
... oriented to rule
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(0, cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	ordered(cons(0, cons(s(s(0)), cons(s(s(xts)), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	ordered(insert(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
... induction variables of
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= s(0) = true => ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
--- clause
	0 <= s(0) = true => ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
--- clause
	s(xts2) <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
... reduced in 1 step to
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
... oriented to rule
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(insert(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	ordered(insert(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	xts2 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
+++ added new clause(s)
	xts2 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(0), cons(s(xts), nil))) = true
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	ordered(cons(s(0), cons(s(xts), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	ordered(cons(s(0), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
+++ added new clause(s)
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	ordered(cons(s(0), cons(s(0), cons(s(s(xts)), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
... induction variables of
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(0, cons(s(s(s(xts))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(s(0)) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
--- clause
	0 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(0, cons(s(s(s(xts))), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(s(0)), insert(0, cons(s(s(s(xts))), nil)))) = true
--- clause
	true = false => ordered(cons(s(s(0)), insert(0, cons(s(s(s(xts))), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(s(0)) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
... reduced in 1 step to
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
... oriented to rule
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
... induction variables of
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= s(s(0)) = true => ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
--- clause
	0 <= s(s(0)) = true => ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
... reduced in 1 step to
	ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
--- clause
	s(xts2) <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
... reduced in 1 step to
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
... oriented to rule
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = true => ordered(cons(0, cons(s(s(s(xts))), cons(s(s(0)), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
--- clause
	s(xts) <= 0 = true => ordered(cons(0, cons(s(s(s(xts))), cons(s(s(0)), nil)))) = true
... reduced in 1 step to
	false = true => ordered(cons(0, cons(s(s(s(xts))), cons(s(s(0)), nil)))) = true
--- clause
	false = true => ordered(cons(0, cons(s(s(s(xts))), cons(s(s(0)), nil)))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(xts1) = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... to conjectures
+++ active wrap
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(.), cons(., nil)))) = true
... with sequence
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, nil, ordered, s, true}
... and wrap
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(.), cons(., nil)))) = true
+++ Presburger system  = {
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = false => ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
--- clause
	s(xts) <= 0 = false => ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
... reduced in 1 step to
	ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
--- clause
	s(xts2) <= s(xts1) = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
--- clause
	ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
... to conjectures
+++ active wrap
	s(xts2) <= xts1 = false => ordered(cons(0, cons(., cons(s(.), nil)))) = true
... with sequence
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts1, cons(s(xts2), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, false, nil, ordered, s, true}
... and wrap
	s(xts2) <= xts1 = false => ordered(cons(0, cons(., cons(s(.), nil)))) = true
+++ Presburger system  = {
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... induction variables of
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = true => ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
--- clause
	0 <= xts = true => ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
--- clause
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... oriented to rule
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
... induction variables of
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = false => ordered(cons(s(0), cons(s(s(xts)), cons(s(s(0)), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
--- clause
	0 <= xts = false => ordered(cons(s(0), cons(s(s(xts)), cons(s(s(0)), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(0), cons(s(s(xts)), cons(s(s(0)), nil)))) = true
--- clause
	true = false => ordered(cons(s(0), cons(s(s(xts)), cons(s(s(0)), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
... oriented to rule
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... induction variables of
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(0)), cons(s(s(xts)), nil)))) = true
+++ creating new conjecture
	s(xts2) <= 0 = false => ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
--- clause
	0 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(0)), cons(s(s(xts)), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(s(0)), insert(s(s(0)), cons(s(s(xts)), nil)))) = true
--- clause
	true = false => ordered(cons(s(s(0)), insert(s(s(0)), cons(s(s(xts)), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= 0 = false => ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... oriented to rule
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
	xts2 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
... induction variables of
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= 0 = true => ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
+++ creating new conjecture
	s(xts2) <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
--- clause
	0 <= 0 = true => ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
--- clause
	s(xts2) <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
... reduced in 1 step to
	false = true => ordered(cons(s(s(s(xts2))), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
--- clause
	false = true => ordered(cons(s(s(s(xts2))), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) = true
... oriented to rule
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
	xts2 <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	xts2 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
... induction variables of
	xts2 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(0, cons(s(s(s(xts))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
--- clause
	0 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(0, cons(s(s(s(xts))), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(s(s(0))), insert(0, cons(s(s(s(xts))), nil)))) = true
--- clause
	true = false => ordered(cons(s(s(s(0))), insert(0, cons(s(s(s(xts))), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
... reduced in 1 step to
	xts2 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) = true
... oriented to rule
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	xts2 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	xts2 <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... induction variables of
	xts2 <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= s(s(s(0))) = true => ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(s(s(0))) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
--- clause
	0 <= s(s(s(0))) = true => ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
... reduced in 1 step to
	ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
--- clause
	s(xts2) <= s(s(s(0))) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... reduced in 1 step to
	xts2 <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... oriented to rule
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... induction variables of
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = true => ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
--- clause
	0 <= xts = true => ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
--- clause
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
... oriented to rule
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
... induction variables of
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = false => ordered(cons(s(0), cons(s(s(xts)), cons(s(s(0)), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
--- clause
	0 <= xts = false => ordered(cons(s(0), cons(s(s(xts)), cons(s(s(0)), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(0), cons(s(s(xts)), cons(s(s(0)), nil)))) = true
--- clause
	true = false => ordered(cons(s(0), cons(s(s(xts)), cons(s(s(0)), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
... oriented to rule
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	ordered(cons(s(0), cons(s(s(xts)), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
... induction variables of
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= s(0) = false => ordered(cons(s(s(0)), insert(s(0), cons(s(s(s(xts))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(0) = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
--- clause
	0 <= s(0) = false => ordered(cons(s(s(0)), insert(s(0), cons(s(s(s(xts))), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(s(0)), insert(s(0), cons(s(s(s(xts))), nil)))) = true
--- clause
	true = false => ordered(cons(s(s(0)), insert(s(0), cons(s(s(s(xts))), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(0) = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
... reduced in 1 step to
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
... oriented to rule
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	ordered(cons(0, cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
... induction variables of
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= s(0) = true => ordered(cons(s(0), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
--- clause
	0 <= s(0) = true => ordered(cons(s(0), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
--- clause
	s(xts2) <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
... reduced in 1 step to
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
... oriented to rule
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... induction variables of
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = true => ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
--- clause
	0 <= xts = true => ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
... reduced in 1 step to
	ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
--- clause
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
... subsumed by lemma
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
... with substitution
	$n <- 3
--- clause
	ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... oriented to rule
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
+++ active wrap
	xts2 <= xts1 = true => ordered(cons(0, cons(s(.), cons(s(.), nil)))) = true
... with sequence
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, nil, ordered, s, true}
... and wrap
	xts2 <= xts1 = true => ordered(cons(0, cons(s(.), cons(s(.), nil)))) = true
+++ Presburger system  = {
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true

+++ treating clause
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
... induction variables of
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = false => ordered(cons(0, cons(s(s(s(xts))), cons(s(s(s(0))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
--- clause
	0 <= xts = false => ordered(cons(0, cons(s(s(s(xts))), cons(s(s(s(0))), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(0, cons(s(s(s(xts))), cons(s(s(s(0))), nil)))) = true
--- clause
	true = false => ordered(cons(0, cons(s(s(s(xts))), cons(s(s(s(0))), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
... subsumed by lemma
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
... with substitution
	$n <- 3
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
... oriented to rule
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
+++ active wrap
	xts2 <= xts1 = false => ordered(cons(0, cons(s(.), cons(s(.), nil)))) = true
... with sequence
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts1), cons(s(xts2), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, false, nil, ordered, s, true}
... and wrap
	xts2 <= xts1 = false => ordered(cons(0, cons(s(.), cons(s(.), nil)))) = true
+++ Presburger system  = {
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = true => ordered(cons(s(0), cons(s(s(s(xts))), cons(s(s(0)), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
--- clause
	s(xts) <= 0 = true => ordered(cons(s(0), cons(s(s(s(xts))), cons(s(s(0)), nil)))) = true
... reduced in 1 step to
	false = true => ordered(cons(s(0), cons(s(s(s(xts))), cons(s(s(0)), nil)))) = true
--- clause
	false = true => ordered(cons(s(0), cons(s(s(s(xts))), cons(s(s(0)), nil)))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(xts1) = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = false => ordered(cons(s(0), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
--- clause
	s(xts) <= 0 = false => ordered(cons(s(0), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
--- clause
	s(xts2) <= s(xts1) = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
--- clause
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
+++ added new clause(s)
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	xts2 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
... induction variables of
	xts2 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(0), cons(s(s(s(xts))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
--- clause
	0 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(0), cons(s(s(s(xts))), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(s(s(0))), insert(s(0), cons(s(s(s(xts))), nil)))) = true
--- clause
	true = false => ordered(cons(s(s(s(0))), insert(s(0), cons(s(s(s(xts))), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
... reduced in 1 step to
	xts2 <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) = true
... oriented to rule
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	xts2 <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	ordered(cons(0, cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	xts2 <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... induction variables of
	xts2 <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= s(s(0)) = true => ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(s(0)) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
--- clause
	0 <= s(s(0)) = true => ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
--- clause
	s(xts2) <= s(s(0)) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... reduced in 1 step to
	xts2 <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... oriented to rule
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(xts)), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
... induction variables of
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(0)), cons(s(s(s(xts))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= 0 = false => ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
--- clause
	0 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(0)), cons(s(s(s(xts))), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(s(0)), insert(s(s(0)), cons(s(s(s(xts))), nil)))) = true
--- clause
	true = false => ordered(cons(s(s(0)), insert(s(s(0)), cons(s(s(s(xts))), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= 0 = false => ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
... oriented to rule
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	ordered(cons(s(0), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
... induction variables of
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= 0 = true => ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
--- clause
	0 <= 0 = true => ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
--- clause
	s(xts2) <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
... reduced in 1 step to
	false = true => ordered(cons(s(s(s(xts2))), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
--- clause
	false = true => ordered(cons(s(s(s(xts2))), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) = true
... oriented to rule
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... induction variables of
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = true => ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
--- clause
	0 <= xts = true => ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
--- clause
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... oriented to rule
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
... induction variables of
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = false => ordered(cons(s(0), cons(s(s(s(xts))), cons(s(s(s(0))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
--- clause
	0 <= xts = false => ordered(cons(s(0), cons(s(s(s(xts))), cons(s(s(s(0))), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(0), cons(s(s(s(xts))), cons(s(s(s(0))), nil)))) = true
--- clause
	true = false => ordered(cons(s(0), cons(s(s(s(xts))), cons(s(s(s(0))), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
... oriented to rule
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = true => ordered(cons(s(s(0)), cons(s(s(s(xts))), cons(s(s(0)), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
--- clause
	s(xts) <= 0 = true => ordered(cons(s(s(0)), cons(s(s(s(xts))), cons(s(s(0)), nil)))) = true
... reduced in 1 step to
	false = true => ordered(cons(s(s(0)), cons(s(s(s(xts))), cons(s(s(0)), nil)))) = true
--- clause
	false = true => ordered(cons(s(s(0)), cons(s(s(s(xts))), cons(s(s(0)), nil)))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(xts1) = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
+++ added new clause(s)
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... to conjectures
+++ active wrap
	s(xts2) <= xts1 = true => ordered(cons(., cons(s(s(.)), cons(s(.), nil)))) = true
... with sequence
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, nil, ordered, s, true}
... and wrap
	s(xts2) <= xts1 = true => ordered(cons(., cons(s(s(.)), cons(s(.), nil)))) = true
+++ Presburger system  = {
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = false => ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
--- clause
	s(xts) <= 0 = false => ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
--- clause
	s(xts2) <= s(xts1) = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
--- clause
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
... to conjectures
+++ active wrap
	s(xts2) <= xts1 = false => ordered(cons(., cons(s(.), cons(s(s(.)), nil)))) = true
... with sequence
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, false, nil, ordered, s, true}
... and wrap
	s(xts2) <= xts1 = false => ordered(cons(., cons(s(.), cons(s(s(.)), nil)))) = true
+++ Presburger system  = {
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	xts2 <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true

+++ treating clause
	xts2 <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
... induction variables of
	xts2 <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(0)), cons(s(s(s(xts))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
--- clause
	0 <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(0)), cons(s(s(s(xts))), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(s(s(0))), insert(s(s(0)), cons(s(s(s(xts))), nil)))) = true
--- clause
	true = false => ordered(cons(s(s(s(0))), insert(s(s(0)), cons(s(s(s(xts))), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... reduced in 1 step to
	xts2 <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) = true
... oriented to rule
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	xts2 <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true

+++ treating clause
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true

+++ treating clause
	xts2 <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... induction variables of
	xts2 <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= s(0) = true => ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(0) = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
--- clause
	0 <= s(0) = true => ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
--- clause
	s(xts2) <= s(0) = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... reduced in 1 step to
	xts2 <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... oriented to rule
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(0)), cons(s(s(xts)), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(0)), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
+++ added new clause(s)
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(0)), cons(s(s(0)), cons(s(s(s(xts))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = true => ordered(cons(s(0), cons(s(s(s(s(xts)))), cons(s(s(s(0))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
--- clause
	s(xts) <= 0 = true => ordered(cons(s(0), cons(s(s(s(s(xts)))), cons(s(s(s(0))), nil)))) = true
... reduced in 1 step to
	false = true => ordered(cons(s(0), cons(s(s(s(s(xts)))), cons(s(s(s(0))), nil)))) = true
--- clause
	false = true => ordered(cons(s(0), cons(s(s(s(s(xts)))), cons(s(s(s(0))), nil)))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(xts1) = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
... to conjectures
+++ active wrap
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(.)), cons(s(.), nil)))) = true
... with sequence
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, nil, ordered, s, true}
... and wrap
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(.)), cons(s(.), nil)))) = true
+++ Presburger system  = {
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = false => ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
--- clause
	s(xts) <= 0 = false => ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
--- clause
	s(xts2) <= s(xts1) = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
... to conjectures
+++ active wrap
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(.), cons(s(s(.)), nil)))) = true
... with sequence
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts1), cons(s(s(xts2)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, false, nil, ordered, s, true}
... and wrap
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(.), cons(s(s(.)), nil)))) = true
+++ Presburger system  = {
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true

+++ treating clause
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... induction variables of
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = true => ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
--- clause
	0 <= xts = true => ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
--- clause
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
... subsumed by an existing conjecture
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... oriented to rule
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
... to conjectures
+++ active wrap
	xts2 <= xts1 = true => ordered(cons(., cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... with sequence
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, nil, ordered, s, true}
... and wrap
	xts2 <= xts1 = true => ordered(cons(., cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
+++ Presburger system  = {
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
--- clause
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... subsumed by lemma
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... with substitution
	$n <- 2

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true

+++ treating clause
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
... induction variables of
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = false => ordered(cons(s(s(0)), cons(s(s(s(xts))), cons(s(s(s(0))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
--- clause
	0 <= xts = false => ordered(cons(s(s(0)), cons(s(s(s(xts))), cons(s(s(s(0))), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(s(0)), cons(s(s(s(xts))), cons(s(s(s(0))), nil)))) = true
--- clause
	true = false => ordered(cons(s(s(0)), cons(s(s(s(xts))), cons(s(s(s(0))), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
... oriented to rule
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
... to conjectures
+++ active wrap
	xts2 <= xts1 = false => ordered(cons(., cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
... with sequence
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, false, nil, ordered, s, true}
... and wrap
	xts2 <= xts1 = false => ordered(cons(., cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
+++ Presburger system  = {
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
--- clause
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
... subsumed by lemma
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
... with substitution
	$n <- 2

+++ Status of the Inference System
--- Conjectures:
	xts2 <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true

+++ treating clause
	xts2 <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... induction variables of
	xts2 <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
--- clause
	0 <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(s(s(0))), insert(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
--- clause
	true = false => ordered(cons(s(s(s(0))), insert(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(s(s(0))), insert(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
... oriented to rule
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(s(s(0))), insert(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	ordered(cons(s(s(s(0))), insert(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	xts2 <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	ordered(cons(s(s(s(0))), insert(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	ordered(cons(s(s(s(0))), insert(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true

+++ treating clause
	xts2 <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... induction variables of
	xts2 <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... are:
	xts2:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= 0 = true => ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= 0 = true => ordered(cons(s(s(s(s(xts2)))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
--- clause
	0 <= 0 = true => ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
--- clause
	s(xts2) <= 0 = true => ordered(cons(s(s(s(s(xts2)))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... reduced in 1 step to
	false = true => ordered(cons(s(s(s(s(xts2)))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
--- clause
	false = true => ordered(cons(s(s(s(s(xts2)))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) = true
... oriented to rule
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	ordered(cons(s(s(s(0))), insert(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(0)), cons(s(s(s(xts))), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	ordered(cons(s(s(s(0))), insert(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true

+++ treating clause
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
... induction variables of
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = true => ordered(cons(s(0), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
--- clause
	0 <= xts = true => ordered(cons(s(0), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(0), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
--- clause
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
... subsumed by lemma
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
... with substitution
	$n <- 3
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
... oriented to rule
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(0), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
... to conjectures
+++ active wrap
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(.)), cons(s(s(.)), nil)))) = true
... with sequence
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, nil, ordered, s, true}
... and wrap
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(.)), cons(s(s(.)), nil)))) = true
+++ Presburger system  = {
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	ordered(cons(s(s(s(0))), insert(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	ordered(cons(s(0), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true

+++ treating clause
	ordered(cons(s(0), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	ordered(cons(s(s(s(0))), insert(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	ordered(cons(s(0), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true

+++ treating clause
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
... induction variables of
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = false => ordered(cons(s(0), cons(s(s(s(s(xts)))), cons(s(s(s(s(0)))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
--- clause
	0 <= xts = false => ordered(cons(s(0), cons(s(s(s(s(xts)))), cons(s(s(s(s(0)))), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(0), cons(s(s(s(s(xts)))), cons(s(s(s(s(0)))), nil)))) = true
--- clause
	true = false => ordered(cons(s(0), cons(s(s(s(s(xts)))), cons(s(s(s(s(0)))), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
... subsumed by lemma
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
... with substitution
	$n <- 3
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
... oriented to rule
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
+++ active wrap
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(.)), cons(s(s(.)), nil)))) = true
... with sequence
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts1)), cons(s(s(xts2)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, false, nil, ordered, s, true}
... and wrap
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(.)), cons(s(s(.)), nil)))) = true
+++ Presburger system  = {
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	ordered(cons(s(s(s(0))), insert(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	ordered(cons(s(0), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts)))), cons(s(s(s(0))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
--- clause
	s(xts) <= 0 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts)))), cons(s(s(s(0))), nil)))) = true
... reduced in 1 step to
	false = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts)))), cons(s(s(s(0))), nil)))) = true
--- clause
	false = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts)))), cons(s(s(s(0))), nil)))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(xts1) = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	ordered(cons(s(s(s(0))), insert(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	ordered(cons(s(0), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = false => ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
--- clause
	s(xts) <= 0 = false => ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
--- clause
	s(xts2) <= s(xts1) = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(0))), insert(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	ordered(cons(s(0), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(0))), insert(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
+++ added new clause(s)
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	ordered(cons(s(0), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
	ordered(cons(s(0), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(xts))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(0), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true

+++ treating clause
	ordered(cons(s(0), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true

+++ treating clause
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
... induction variables of
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = true => ordered(cons(s(s(0)), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
--- clause
	0 <= xts = true => ordered(cons(s(s(0)), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(s(0)), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
... oriented to rule
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(s(0)), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(0)), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true

+++ treating clause
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
... induction variables of
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts)))), cons(s(s(s(s(0)))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
--- clause
	0 <= xts = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts)))), cons(s(s(s(s(0)))), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts)))), cons(s(s(s(s(0)))), nil)))) = true
--- clause
	true = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts)))), cons(s(s(s(s(0)))), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
... oriented to rule
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
+++ added new clause(s)
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), cons(s(s(s(0))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
--- clause
	s(xts) <= 0 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), cons(s(s(s(0))), nil)))) = true
... reduced in 1 step to
	false = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), cons(s(s(s(0))), nil)))) = true
--- clause
	false = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), cons(s(s(s(0))), nil)))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(xts1) = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
+++ added new clause(s)
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
... to conjectures
+++ active wrap
	s(xts2) <= xts1 = true => ordered(cons(s(.), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
... with sequence
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, nil, ordered, s, true}
... and wrap
	s(xts2) <= xts1 = true => ordered(cons(s(.), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
+++ Presburger system  = {
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = false => ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
--- clause
	s(xts) <= 0 = false => ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
--- clause
	s(xts2) <= s(xts1) = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
... to conjectures
+++ active wrap
	s(xts2) <= xts1 = false => ordered(cons(s(.), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
... with sequence
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, false, nil, ordered, s, true}
... and wrap
	s(xts2) <= xts1 = false => ordered(cons(s(.), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
+++ Presburger system  = {
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(0))), cons(s(s(s(xts))), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(0)), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(0)), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts))))), cons(s(s(s(s(0)))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
--- clause
	s(xts) <= 0 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts))))), cons(s(s(s(s(0)))), nil)))) = true
... reduced in 1 step to
	false = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts))))), cons(s(s(s(s(0)))), nil)))) = true
--- clause
	false = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts))))), cons(s(s(s(s(0)))), nil)))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(xts1) = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
+++ added new clause(s)
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = false => ordered(cons(s(s(0)), cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
--- clause
	s(xts) <= 0 = false => ordered(cons(s(s(0)), cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(s(0)), cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil)))) = true
--- clause
	s(xts2) <= s(xts1) = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(s(0)), cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true

+++ treating clause
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
... induction variables of
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
--- clause
	0 <= xts = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
... oriented to rule
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
... to conjectures
+++ active wrap
	xts <= . = true => ordered(cons(., cons(s(s(.)), cons(s(s(s(.))), nil)))) = true
... with sequence
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, nil, ordered, s, true}
... and wrap
	xts <= . = true => ordered(cons(., cons(s(s(.)), cons(s(s(s(.))), nil)))) = true
+++ Presburger system  = {
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(0))), cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true

+++ treating clause
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
... induction variables of
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), cons(s(s(s(s(0)))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
--- clause
	0 <= xts = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), cons(s(s(s(s(0)))), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), cons(s(s(s(s(0)))), nil)))) = true
--- clause
	true = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), cons(s(s(s(s(0)))), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
... oriented to rule
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
+++ added new clause(s)
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
... to conjectures
+++ active wrap
	xts2 <= xts1 = false => ordered(cons(s(.), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
... with sequence
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, false, nil, ordered, s, true}
... and wrap
	xts2 <= xts1 = false => ordered(cons(s(.), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
+++ Presburger system  = {
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true

+++ treating clause
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
... induction variables of
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
--- clause
	0 <= xts = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
... oriented to rule
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(0)), cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(0)), cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true

+++ treating clause
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
... induction variables of
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts))))), cons(s(s(s(s(s(0))))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
--- clause
	0 <= xts = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts))))), cons(s(s(s(s(s(0))))), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts))))), cons(s(s(s(s(s(0))))), nil)))) = true
--- clause
	true = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts))))), cons(s(s(s(s(s(0))))), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
... oriented to rule
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
+++ added new clause(s)
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts))))), cons(s(s(s(s(0)))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
--- clause
	s(xts) <= 0 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts))))), cons(s(s(s(s(0)))), nil)))) = true
... reduced in 1 step to
	false = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts))))), cons(s(s(s(s(0)))), nil)))) = true
--- clause
	false = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts))))), cons(s(s(s(s(0)))), nil)))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(xts1) = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
+++ added new clause(s)
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
... to conjectures
+++ active wrap
	s(xts2) <= xts1 = true => ordered(cons(s(.), cons(s(s(s(s(.)))), cons(s(s(s(.))), nil)))) = true
... with sequence
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, nil, ordered, s, true}
... and wrap
	s(xts2) <= xts1 = true => ordered(cons(s(.), cons(s(s(s(s(.)))), cons(s(s(s(.))), nil)))) = true
+++ Presburger system  = {
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(0))), cons(s(s(s(s(xts)))), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
--- clause
	s(xts) <= 0 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil)))) = true
--- clause
	s(xts2) <= s(xts1) = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
... to conjectures
+++ active wrap
	s(xts2) <= xts1 = false => ordered(cons(s(.), cons(s(s(s(.))), cons(s(s(s(s(.)))), nil)))) = true
... with sequence
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, false, nil, ordered, s, true}
... and wrap
	s(xts2) <= xts1 = false => ordered(cons(s(.), cons(s(s(s(.))), cons(s(s(s(s(.)))), nil)))) = true
+++ Presburger system  = {
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts)))))), cons(s(s(s(s(s(0))))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
--- clause
	s(xts) <= 0 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts)))))), cons(s(s(s(s(s(0))))), nil)))) = true
... reduced in 1 step to
	false = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts)))))), cons(s(s(s(s(s(0))))), nil)))) = true
--- clause
	false = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts)))))), cons(s(s(s(s(s(0))))), nil)))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(xts1) = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
+++ added new clause(s)
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(s(xts)))))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
--- clause
	s(xts) <= 0 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(s(xts)))))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(s(xts)))))), nil)))) = true
--- clause
	s(xts2) <= s(xts1) = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(s(xts)))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(s(xts)))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(xts)))), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(s(xts)))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true

+++ treating clause
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
... induction variables of
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
--- clause
	0 <= xts = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(s(s(0))), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
--- clause
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
... subsumed by lemma
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
... with substitution
	$n <- 2
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
... oriented to rule
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(s(s(0))), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
... to conjectures
+++ active wrap
	xts2 <= xts1 = true => ordered(cons(s(.), cons(s(s(s(s(.)))), cons(s(s(s(s(.)))), nil)))) = true
... with sequence
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, nil, ordered, s, true}
... and wrap
	xts2 <= xts1 = true => ordered(cons(s(.), cons(s(s(s(s(.)))), cons(s(s(s(s(.)))), nil)))) = true
+++ Presburger system  = {
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(s(^f283($n; xts1))))), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(s(xts)))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(s(^f283($n; xts1))))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(0))), cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(s(xts)))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(s(^f283($n; xts1))))), nil)))) = true

+++ treating clause
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
... induction variables of
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts))))), cons(s(s(s(s(s(0))))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
--- clause
	0 <= xts = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts))))), cons(s(s(s(s(s(0))))), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts))))), cons(s(s(s(s(s(0))))), nil)))) = true
--- clause
	true = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts))))), cons(s(s(s(s(s(0))))), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
... subsumed by lemma
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
... with substitution
	$n <- 2
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
... oriented to rule
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
+++ active wrap
	xts2 <= xts1 = false => ordered(cons(s(.), cons(s(s(s(s(.)))), cons(s(s(s(s(.)))), nil)))) = true
... with sequence
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, false, nil, ordered, s, true}
... and wrap
	xts2 <= xts1 = false => ordered(cons(s(.), cons(s(s(s(s(.)))), cons(s(s(s(s(.)))), nil)))) = true
+++ Presburger system  = {
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts1))))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(s(xts)))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(s(^f283($n; xts1))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts1))))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(s(xts)))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(s(^f283($n; xts1))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts1))))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true

+++ treating clause
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
... induction variables of
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(xts)))))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
--- clause
	0 <= xts = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(xts)))))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(s(0)), cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(xts)))))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
... oriented to rule
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(s(0)), cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(xts)))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(s(xts)))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(xts)))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(s(^f283($n; xts1))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts1))))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(0)), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(s(xts)))))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(s(xts)))))), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(s(xts)))))), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
	ordered(cons(s(s(s(0))), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(xts)))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(s(xts)))))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(s(^f283($n; xts1))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts1))))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true

+++ treating clause
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
... induction variables of
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts)))))), cons(s(s(s(s(s(s(0)))))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
--- clause
	0 <= xts = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts)))))), cons(s(s(s(s(s(s(0)))))), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts)))))), cons(s(s(s(s(s(s(0)))))), nil)))) = true
--- clause
	true = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts)))))), cons(s(s(s(s(s(s(0)))))), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
... oriented to rule
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
+++ added new clause(s)
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
... to conjectures

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(0))), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(xts)))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(s(xts)))))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(s(^f283($n; xts1))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts1))))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(0))), cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(xts)))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(s(xts)))))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(s(^f283($n; xts1))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts1))))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(s(0)))), cons(s(s(s(s(s(xts))))), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(0)), cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(xts)))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(s(xts)))))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(s(^f283($n; xts1))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts1))))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(0)), cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(xts)))))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(xts)))))), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(xts)))))), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(s(xts)))))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil))) = true
	ordered(cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(xts)))))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(s(^f283($n; xts1))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts1))))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts))))))), cons(s(s(s(s(s(s(0)))))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) = true
--- clause
	s(xts) <= 0 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts))))))), cons(s(s(s(s(s(s(0)))))), nil)))) = true
... reduced in 1 step to
	false = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts))))))), cons(s(s(s(s(s(s(0)))))), nil)))) = true
--- clause
	false = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts))))))), cons(s(s(s(s(s(s(0)))))), nil)))) = true
... contains a ground negative condition
	false = true
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= s(xts1) = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
+++ added new clause(s)
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) = true
... to conjectures
+++ active wrap
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(.))))), cons(s(s(s(s(.)))), nil)))) = true
... with sequence
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, nil, ordered, s, true}
... and wrap
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(.))))), cons(s(s(s(s(.)))), nil)))) = true
+++ Presburger system  = {
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts2)))))), cons(s(s(s(s(^f1($n; xts1))))), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(s(xts)))))), nil))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil))) = true
	ordered(cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(xts)))))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(s(^f283($n; xts1))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts1))))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts2)))))), cons(s(s(s(s(^f1($n; xts1))))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(s(xts)))))), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil))) = true
	ordered(cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(xts)))))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(s(^f283($n; xts1))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts1))))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts2)))))), cons(s(s(s(s(^f1($n; xts1))))), nil)))) = true

+++ treating clause
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
+++ inductive narrowing on conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
... induction variables of
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
... are:
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
... with variable xts1
+++ creating new conjecture
	s(xts) <= 0 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(s(xts))))))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= s(xts1) = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts1))))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
--- clause
	s(xts) <= 0 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(s(xts))))))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(s(0)), cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(s(xts))))))), nil)))) = true
--- clause
	s(xts2) <= s(xts1) = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts1))))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
... reduced in 1 step to
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts1))))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
+++ inductive narrowing succeeded
--- clause
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
... oriented to rule
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(s(0)), cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(s(xts))))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts1))))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
... to conjectures
+++ active wrap
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(.)))), cons(s(s(s(s(s(.))))), nil)))) = true
... with sequence
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, false, nil, ordered, s, true}
... and wrap
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(.)))), cons(s(s(s(s(s(.))))), nil)))) = true
+++ Presburger system  = {
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(^f1($n; xts1))))), cons(s(s(s(s(s(^f1($n; xts2)))))), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil))) = true
	ordered(cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(xts)))))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(s(xts))))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts1))))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(s(^f283($n; xts1))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts1))))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts2)))))), cons(s(s(s(s(^f1($n; xts1))))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(^f1($n; xts1))))), cons(s(s(s(s(s(^f1($n; xts2)))))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(s(s(0))))), cons(s(s(s(s(s(xts))))), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(xts)))))), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(s(xts))))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts1))))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(s(^f283($n; xts1))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts1))))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts2)))))), cons(s(s(s(s(^f1($n; xts1))))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(^f1($n; xts1))))), cons(s(s(s(s(s(^f1($n; xts2)))))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(xts)))))), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(s(xts))))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts1))))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(s(^f283($n; xts1))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts1))))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts2)))))), cons(s(s(s(s(^f1($n; xts1))))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(^f1($n; xts1))))), cons(s(s(s(s(s(^f1($n; xts2)))))), nil)))) = true

+++ treating clause
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) = true
... induction variables of
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(0))))))), cons(s(s(s(s(s(s(s(xts))))))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(s(xts2)))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) = true
--- clause
	0 <= xts = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(0))))))), cons(s(s(s(s(s(s(s(xts))))))), nil)))) = true
... reduced in 1 step to
	ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(0))))))), cons(s(s(s(s(s(s(s(xts))))))), nil)))) = true
--- clause
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(s(xts2)))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) = true
... subsumed by lemma
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts2)))))), cons(s(s(s(s(^f1($n; xts1))))), nil)))) = true
... with substitution
	$n <- 3
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) = true
... oriented to rule
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) -> true
+++ added new clause(s)
	ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(0))))))), cons(s(s(s(s(s(s(s(xts))))))), nil)))) = true
... to conjectures
+++ active wrap
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(.))))), cons(s(s(s(s(s(.))))), nil)))) = true
... with sequence
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, nil, ordered, s, true}
... and wrap
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(.))))), cons(s(s(s(s(s(.))))), nil)))) = true
+++ Presburger system  = {
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts2)))))), cons(s(s(s(s(s(^f1($n; xts1)))))), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(0)), cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(s(xts))))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts1))))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(0))))))), cons(s(s(s(s(s(s(s(xts))))))), nil)))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(s(^f283($n; xts1))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts1))))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts2)))))), cons(s(s(s(s(^f1($n; xts1))))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(^f1($n; xts1))))), cons(s(s(s(s(s(^f1($n; xts2)))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts2)))))), cons(s(s(s(s(s(^f1($n; xts1)))))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(0)), cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(s(xts))))))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(s(xts))))))), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(s(xts))))))), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts1))))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
	ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(0))))))), cons(s(s(s(s(s(s(s(xts))))))), nil)))) = true
	ordered(cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(s(xts))))))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(s(^f283($n; xts1))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts1))))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts2)))))), cons(s(s(s(s(^f1($n; xts1))))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(^f1($n; xts1))))), cons(s(s(s(s(s(^f1($n; xts2)))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts2)))))), cons(s(s(s(s(s(^f1($n; xts1)))))), nil)))) = true

+++ treating clause
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts1))))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
+++ inductive narrowing on conjecture
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts1))))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
... induction variables of
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts1))))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
... are:
	xts2:nat
	xts1:nat
+++ perform INDUCTIVE NARROWING on conjecture 
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts1))))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
... with variable xts2
+++ creating new conjecture
	0 <= xts = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts))))))), cons(s(s(s(s(s(s(s(0))))))), nil)))) = true
+++ creating new conjecture
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts1))))))), cons(s(s(s(s(s(s(s(s(xts2)))))))), nil)))) = true
--- clause
	0 <= xts = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts))))))), cons(s(s(s(s(s(s(s(0))))))), nil)))) = true
... reduced in 1 step to
	true = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts))))))), cons(s(s(s(s(s(s(s(0))))))), nil)))) = true
--- clause
	true = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts))))))), cons(s(s(s(s(s(s(s(0))))))), nil)))) = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)
--- clause
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts1))))))), cons(s(s(s(s(s(s(s(s(xts2)))))))), nil)))) = true
... subsumed by lemma
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(^f1($n; xts1))))), cons(s(s(s(s(s(^f1($n; xts2)))))), nil)))) = true
... with substitution
	$n <- 3
+++ inductive narrowing succeeded
--- clause
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts1))))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
... oriented to rule
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) -> true
+++ active wrap
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(.))))), cons(s(s(s(s(s(.))))), nil)))) = true
... with sequence
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts1))))), cons(s(s(s(s(s(xts2))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts1)))))), cons(s(s(s(s(s(s(xts2)))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts1))))))), cons(s(s(s(s(s(s(s(xts2))))))), nil)))) = true
+++ primal grammar found for head
	{0, <=, cons, false, nil, ordered, s, true}
... and wrap
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(.))))), cons(s(s(s(s(s(.))))), nil)))) = true
+++ Presburger system  = {
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
+++ }
+++ Lemma(s)           = 
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts1)))))), cons(s(s(s(s(s(^f1($n; xts2)))))), nil)))) = true

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(0))))))), cons(s(s(s(s(s(s(s(xts))))))), nil)))) = true
	ordered(cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(s(xts))))))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(s(^f283($n; xts1))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts1))))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts2)))))), cons(s(s(s(s(^f1($n; xts1))))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(^f1($n; xts1))))), cons(s(s(s(s(s(^f1($n; xts2)))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts2)))))), cons(s(s(s(s(s(^f1($n; xts1)))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts1)))))), cons(s(s(s(s(s(^f1($n; xts2)))))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(0))))))), cons(s(s(s(s(s(s(s(xts))))))), nil)))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
	ordered(cons(s(s(s(s(s(s(s(0))))))), cons(s(s(s(s(s(s(s(xts))))))), nil))) = true
+++ added new clause(s)
	true = false => false = true
	ordered(cons(s(s(s(s(s(s(s(0))))))), cons(s(s(s(s(s(s(s(xts))))))), nil))) = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(s(xts))))))), nil))) = true
	ordered(cons(s(s(s(s(s(s(s(0))))))), cons(s(s(s(s(s(s(s(xts))))))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(s(^f283($n; xts1))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts1))))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts2)))))), cons(s(s(s(s(^f1($n; xts1))))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(^f1($n; xts1))))), cons(s(s(s(s(s(^f1($n; xts2)))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts2)))))), cons(s(s(s(s(s(^f1($n; xts1)))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts1)))))), cons(s(s(s(s(s(^f1($n; xts2)))))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(s(s(s(0)))))), cons(s(s(s(s(s(s(s(xts))))))), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	ordered(cons(s(s(s(s(s(s(s(0))))))), cons(s(s(s(s(s(s(s(xts))))))), nil))) = true
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(s(^f283($n; xts1))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts1))))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts2)))))), cons(s(s(s(s(^f1($n; xts1))))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(^f1($n; xts1))))), cons(s(s(s(s(s(^f1($n; xts2)))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts2)))))), cons(s(s(s(s(s(^f1($n; xts1)))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts1)))))), cons(s(s(s(s(s(^f1($n; xts2)))))), nil)))) = true

+++ treating clause
	ordered(cons(s(s(s(s(s(s(s(0))))))), cons(s(s(s(s(s(s(s(xts))))))), nil))) = true
--- no new clauses created
+++ attempting case rewriting
--- case rewriting generated new conjectures
	true = false => false = true
+++ added new clause(s)
	true = false => false = true
... to conjectures
--- clause
	true = false => false = true
... contains a ground negative condition
	true = false
... and is therefore discarded (false => t is always true)

+++ Status of the Inference System
--- Conjectures:
	<empty>
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	ordered(isort(x)) -> true
	ordered(insert(xts, isort(yts))) -> true
	ordered(insert(xts2, insert(xts1, isort(yts)))) -> true
	xts2 <= xts1 = true => ordered(cons(xts2, cons(xts1, nil))) -> true
	xts2 <= xts1 = false => ordered(cons(xts2, cons(xts1, nil))) -> true
	ordered(insert(xts3, insert(xts2, insert(xts1, isort(yts))))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(xts2), cons(xts1, nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(xts2, cons(s(xts1), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(xts2), cons(s(xts1), nil))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(xts1, nil)))) -> true
	xts <= 0 = true => ordered(cons(xts2, cons(0, cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(0, insert(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(xts1), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(xts2), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(xts1)), nil))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(xts1, nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(xts1, nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(xts2, cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(xts1), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(xts2), cons(s(0), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(xts1), nil)))) -> true
	xts <= s(0) = true => ordered(cons(xts2, cons(s(0), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(xts1)), nil))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(xts2)), cons(s(s(s(xts1))), nil))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(xts1, nil)))) -> true
	xts <= 0 = false => ordered(cons(s(0), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(0), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(xts2, cons(s(xts1), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(xts1), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(xts2)), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(xts1)), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(xts2), cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(xts1)), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(xts2, cons(s(s(0)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(xts2), cons(s(s(xts1)), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(0)), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(0)), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(0)), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts <= 0 = true => ordered(cons(s(s(s(xts2))), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = true => ordered(cons(s(s(xts2)), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = true => ordered(cons(s(xts2), cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = true => ordered(cons(xts2, cons(s(s(s(0))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(insert(xts3, cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) -> true
	xts2 <= xts1 = false => ordered(insert(xts3, cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= 0 = false => ordered(cons(s(s(s(0))), insert(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(0) = false => ordered(cons(s(s(s(0))), insert(s(s(xts2)), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(0)) = false => ordered(cons(s(s(s(0))), insert(s(xts2), cons(s(s(s(xts1))), nil)))) -> true
	xts <= s(s(s(0))) = false => ordered(cons(s(s(s(0))), insert(xts2, cons(s(s(s(xts1))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(xts2))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(xts1)))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(xts2)))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(s(0))), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(xts1))))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(xts2))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(xts1)))))), nil)))) -> true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) -> true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(xts2)))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) -> true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(s(s(xts2))))))), cons(s(s(s(s(s(s(s(xts1))))))), nil)))) -> true
--- Primal Grammar:
+++ Presburger system  = {
	^f0(0; yts, xts@) -> isort(yts)
	^f0($n0 + 1; yts, xts@) -> insert(xts$n0, ^f0($n0; yts, xts@))
	^f1(0; xts) -> xts
	^f1($n1 + 1; xts) -> s(^f1($n1; xts))
	^f19(0) -> 0
	^f19($n19 + 1) -> s(^f19($n19))
	^f283(0; xts) -> xts
	^f283($n283 + 1; xts) -> s(^f283($n283; xts))
+++ }
+++ Lemma(s)           = 
	ordered(insert(xts$n, ^f0($n; yts, xts@))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil))) = true
	s(xts3) <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(^f1($n; xts2), nil)))) = true
	s(xts3) <= xts2 = false => ordered(insert(xts1, cons(^f1($n; xts2), cons(s(^f1($n; xts3)), nil)))) = true
	xts3 <= xts2 = true => ordered(insert(xts1, cons(s(^f1($n; xts3)), cons(s(^f1($n; xts2)), nil)))) = true
	xts3 <= xts2 = false => ordered(insert(xts1, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts3)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(^f1($n; xts1), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(0, cons(^f1($n; xts1), cons(s(^f1($n; xts2)), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(0, cons(s(^f1($n; xts2)), cons(s(^f1($n; xts1)), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(0, cons(s(^f1($n; xts1)), cons(s(^f1($n; xts2)), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(^f19($n), cons(s(s(xts1)), cons(s(s(s(xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(^f1($n; xts1)), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(0), cons(s(^f1($n; xts1)), cons(s(s(^f1($n; xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(^f19($n), cons(s(s(s(xts2))), cons(s(s(s(xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(^f19($n), cons(s(s(s(xts1))), cons(s(s(s(xts2))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(0), cons(s(s(^f1($n; xts2))), cons(s(s(^f1($n; xts1))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(0), cons(s(s(^f1($n; xts1))), cons(s(s(^f1($n; xts2))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(xts1))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(xts1))), cons(s(s(s(s(xts2)))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts2)))), cons(s(s(s(s(xts1)))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(xts1)))), cons(s(s(s(s(xts2)))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(^f283($n; xts1)))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(^f283($n; xts1)))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts2))))), cons(s(s(s(s(^f283($n; xts1))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(^f19($n)), cons(s(s(s(s(^f283($n; xts1))))), cons(s(s(s(s(^f283($n; xts2))))), nil)))) = true
	s(xts2) <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts2)))))), cons(s(s(s(s(^f1($n; xts1))))), nil)))) = true
	s(xts2) <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(^f1($n; xts1))))), cons(s(s(s(s(s(^f1($n; xts2)))))), nil)))) = true
	xts2 <= xts1 = true => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts2)))))), cons(s(s(s(s(s(^f1($n; xts1)))))), nil)))) = true
	xts2 <= xts1 = false => ordered(cons(s(s(0)), cons(s(s(s(s(s(^f1($n; xts1)))))), cons(s(s(s(s(s(^f1($n; xts2)))))), nil)))) = true

+++ SUCCESS: all conjectures proved
+++ Statistics:
... Number of proof steps          = 207
... Number of induction steps      = 120
... Number of equational steps     = 0
... Number of case rewriting steps = 87
... Number of PG defined symbols   = 4
... Number of PG lemmas            = 33
... Elapsed time (seconds)         = 6.05
