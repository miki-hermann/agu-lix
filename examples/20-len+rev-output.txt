+++ SPECIFICATION --- bidirectional branch, version 0.99
+++ Parameters:
    ===========
+++ input       = 20-len+rev-input.txt
+++ output      = 20-len+rev-output.txt
+++ trace       = 3
+++ direction   = last-to-first
+++ drop        = yes
+++ verbose     = 3
+++ split       = 4
+++ loop limit  = 10
-----------------------------------------------------------------------

+++ specification LenRev from 20-len+rev-input.txt successfully parsed
+++ sorts: nat list
+++ finitary sorts: <empty>
+++ symbol precedence = {rev > len > app > + > cons > nil > s > 0}
+++ Rewrite System 
	x + 0 -> x
	len(nil) -> 0
	rev(nil) -> nil
	app(nil, y) -> y
	x + s(y) -> s(x + y)
	len(cons(x, y)) -> s(len(y))
	app(cons(x, y), z) -> cons(x, app(y, z))
	rev(cons(x, y)) -> app(rev(y), cons(x, nil))
+++ inductive positions:
... for +: 1
... for app: 0
... for len: 0
... for rev: 0
+++ maximal depths of left-hand sides:
... for app: 2
... for rev: 2
... for len: 2
... for +: 2
+++ general maximal depth = 2
+++ sort dependence: nat < list
+++ test sets for defined functions and sorts:
... for +
... ... nat
		0
		s(x)
... for len
... ... list
		nil
		cons(x, y)
... for app
... ... list
		nil
		cons(x, y)
... for rev
... ... list
		nil
		cons(x, y)

+++ conjecture(s)
	len(rev(app(x, y))) = len(x) + len(y)

+++ inference system initiated
+++ treating clause
	len(rev(app(x, y))) = len(x) + len(y)
+++ inductive narrowing on conjecture
	len(rev(app(x, y))) = len(x) + len(y)
... induction variables of
	len(rev(app(x, y))) = len(x) + len(y)
... are:
	y:list
	x:list
+++ perform INDUCTIVE NARROWING on conjecture 
	len(rev(app(x, y))) = len(x) + len(y)
... with variable y
+++ creating new conjecture
	len(rev(app(x, nil))) = len(x) + len(nil)
+++ creating new conjecture
	len(rev(app(x, cons(xts, yts)))) = len(x) + len(cons(xts, yts))
--- clause
	len(rev(app(x, nil))) = len(x) + len(nil)
... reduced in 2 steps to
	len(rev(app(x, nil))) = len(x)
--- clause
	len(rev(app(x, cons(xts, yts)))) = len(x) + len(cons(xts, yts))
... reduced in 2 steps to
	len(rev(app(x, cons(xts, yts)))) = s(len(x) + len(yts))
+++ inductive narrowing succeeded
--- clause
	len(rev(app(x, y))) = len(x) + len(y)
... oriented to rule
	len(rev(app(x, y))) -> len(x) + len(y)
+++ added new clause(s)
	len(rev(app(x, nil))) = len(x)
	len(rev(app(x, cons(xts, yts)))) = s(len(x) + len(yts))
... to conjectures
--- clause
	len(rev(app(x, nil))) = len(x)
... reduced in 1 step to
	len(x) + len(nil) = len(x)
--- clause
	len(rev(app(x, cons(xts, yts)))) = s(len(x) + len(yts))
... reduced in 1 step to
	len(x) + len(cons(xts, yts)) = s(len(x) + len(yts))

+++ Status of the Inference System
--- Conjectures:
	len(x) + len(nil) = len(x)
	len(x) + len(cons(xts, yts)) = s(len(x) + len(yts))
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(rev(app(x, y))) -> len(x) + len(y)
--- Primal Grammar:
	<empty>

--- clause
	len(x) + len(nil) = len(x)
... reduced to tautology
	len(x) = len(x)
--- clause
	len(x) + len(cons(xts, yts)) = s(len(x) + len(yts))
... reduced to tautology
	s(len(x) + len(yts)) = s(len(x) + len(yts))

+++ Status of the Inference System
--- Conjectures:
	<empty>
--- Non-orientable hypotheses:
	<empty>
--- Oriented hypotheses:
	len(rev(app(x, y))) -> len(x) + len(y)
--- Primal Grammar:
	<empty>

+++ SUCCESS: all conjectures proved
+++ Statistics:
... Number of proof steps          = 2
... Number of induction steps      = 1
... Number of equational steps     = 0
... Number of case rewriting steps = 0
... Elapsed time (seconds)         = 0.001
